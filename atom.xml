<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>鸡排大仙儿的个人博客</title>
  
  <subtitle>卟呤卟呤</subtitle>
  <link href="https://flower48237.com/atom.xml" rel="self"/>
  
  <link href="https://flower48237.com/"/>
  <updated>2021-08-16T14:18:19.454Z</updated>
  <id>https://flower48237.com/</id>
  
  <author>
    <name>flower48237</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《Causality - Models  Reasoning  and Inference》读书笔记</title>
    <link href="https://flower48237.com/2021/08/16/Causality-Models%20%20Reasoning%20%20and%20Inference/"/>
    <id>https://flower48237.com/2021/08/16/Causality-Models%20%20Reasoning%20%20and%20Inference/</id>
    <published>2021-08-16T14:18:00.000Z</published>
    <updated>2021-08-16T14:18:19.454Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Causality - Models  Reasoning  and Inference - 2E</p><blockquote><p>Judea Pearl</p></blockquote><h3 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h3><ul><li><p>笔者认为，概率关系只是因果机制的表面现象，而因果机制是我们理解世界的基础和推动力。<img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210808132109973.png" alt="image-20210808132109973"></p></li><li><p>笔者认为，对科学进步的最大阻碍莫过于把我们所有的数学资源集中在概率和统计推断上，而把因果考虑留给直觉和良好的判断。</p></li><li><p>笔者尝试提出数学工具来处理因果关系和概率关系。</p></li><li><p>使用概率计算的简单扩展，读者将能够在数学上确定干预可能产生的影响，什么测量方法适合控制混淆，如何利用存在于因果路径上的测量方法，如何用一套测量方法交换另一套测量方法，以及如何估计一个事件导致另一个事件发生的概率。<img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210808132225391.png" alt="image-20210808132225391"></p></li><li><p>读者希望被首次引入到用因果关系方面的建议开始与结尾,接着席卷其他历史/概念书的部分：1.1.1,3.3.3,4.5.3,5.1,5.4.1之前,6.1,7.2,7.4,7.5,8.3,9.1,9.3和10.1。</p></li><li><p>更正式地驱动的读者,可能急于探究面对数学方面和计算工具,建议从7.1节开始,然后为我建 筑进行如下：1.2节,第3章,sect1ons4.2 - 4.4, 5.2 - -5.3,部分6.2 - -6.3,7.3节、章8 -  10。</p></li></ul><a id="more"></a><h3 id="Chapter-1"><a href="#Chapter-1" class="headerlink" title="Chapter 1"></a>Chapter 1</h3><blockquote><p>Introduction to Probabilities,Graphs,and Causal Models</p><p>概率、图、因果模型的介绍</p></blockquote><h4 id="1-1-Introduction-to-Probability-Theory"><a href="#1-1-Introduction-to-Probability-Theory" class="headerlink" title="1.1 Introduction to Probability Theory"></a>1.1 Introduction to Probability Theory</h4><h5 id="1-1-1-Why-probabilities"><a href="#1-1-1-Why-probabilities" class="headerlink" title="1.1.1 Why probabilities"></a>1.1.1 Why probabilities</h5><ul><li><p>stuble 微妙的</p></li><li><p>utterance 话语</p></li><li><p>plagued 困扰</p></li><li><p>antecedent 先行词</p></li><li><p>因为我们观察到，因果性话语经常用于充满不确定性的场合。因此，任何旨在容纳此类话语的因果关系理论，都必须用一种语言来区分各种可能性的细微差别——确切地说，就是概率语言。</p><p><img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210808162204233.png" alt="image-20210808162204233"></p></li><li><p>discipline 学科</p></li><li><p>在经济学、流行病学、社会学、心理学等学科中，研究人员不仅关注因果联系的存在或缺失，而且还关注这些联系的相对强度，以及从有噪声（干扰变量等非目标值）的观察结果中推断这些联系的方法。<img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210808164416424.png" alt="image-20210808164416424"></p></li><li><p>finite granularity 有限的粒度</p></li><li><p>manifested 证明，显示</p></li><li><p>implicit 隐含</p></li><li><p>概率论，由于特别能够容忍不明确的例外，使我们能够专注于因果关系的主要问题，而不必应付这类悖论（悖论的出现是因为我们的语言系统是有限的）。<img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210808170808685.png" alt="image-20210808170808685"></p></li><li><p>portray 描述</p></li><li><p>universality 普遍性</p></li><li><p>recast 重做的事情</p></li><li><p>merely 仅仅是</p></li></ul><h5 id="1-1-2-Basic-Concepts-in-Probability-Theory"><a href="#1-1-2-Basic-Concepts-in-Probability-Theory" class="headerlink" title="1.1.2 Basic Concepts in Probability Theory"></a>1.1.2 Basic Concepts in Probability Theory</h5><ul><li>bulk 体积、容量</li><li>discrete 离散的</li><li><strong>discrete variables 离散变量</strong> </li><li><strong>continuous variables  连续变量</strong></li><li>rudimentary 基本的</li><li>notation 符号</li><li>elementary conepts 基本的问题</li><li>elaborated in full generality 全面阐述</li><li>outlined 概述</li><li>adhare 坚持</li><li>formalism 形式</li><li>assigne 分配</li><li>proposition 命题</li><li>manipulate 操作</li><li>explicitly articulate 明确的表达</li><li>axiom 公理</li><li>在贝叶斯法则中，信念度量遵循概率论的三个基本公理:<img src="C:\Users\Q\AppData\Roaming\Typora\typora-user-images\image-20210808183959130.png" alt="image-20210808183959130" style="zoom:80%;" /></li><li>law of total probability全概率公式：P(A) = ∑<del>i</del>P(A, B<del>i</del>)</li><li>independent and conditionally independent 独立和条件独立<img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210808184351094.png" alt="image-20210808184351094"></li><li>贝叶斯认为条件关系比联合事件更基本的——也就是说，更符合人类知识的组织。<img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210808185803317.png" alt="image-20210808185803317"></li><li>下图中公式的分解为假设或“基于假设”的推理提供了基础。  <img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210808192313344.png" alt="image-20210808192313344"></li><li>chain rule formula 链式法则。乘积法则(方程(1.9))的另一个有用的推广是公式的链式法则。 它表示，如果我们有一组n个事件，E E2….. En，则联合事件(E, E2，… ， E)可以写成n个条件概率的乘积:  <img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210808192630286.png" alt="image-20210808192630286"></li><li>贝叶斯推理的核心在于著名的反演公式，即将P(H|e)和P(e|H)关联了起来。其中P(H|e)被称为后验概率/posterior，P(A)被称为先验概率/prior<img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210808192735691.png" alt="image-20210808192735691"></li><li>proportionally 成比例地</li><li>joint probability function 联合概率函数</li><li>sufficient information 充分信息</li><li>algebraic 代数的</li></ul><h5 id="1-1-3-Combining-Predictive-and-Diagnostic-Support"><a href="#1-1-3-Combining-Predictive-and-Diagnostic-Support" class="headerlink" title="1.1.3 Combining Predictive and Diagnostic Support"></a>1.1.3 Combining Predictive and Diagnostic Support</h5><ul><li>likelihood ratio 概率比、似然率</li><li>essence 本质、实质</li><li>portray 描述</li><li>dictate 规定、命令</li><li>predictive 预测</li><li>prospective 未来的</li><li>diagnostic 诊断</li><li>retrospective 回顾</li><li>tacit 隐性的</li><li>贝叶斯技术的力量主要来自于事实，在因果推理中，关系P(e|H)是相当局部的，给定的H是真的，e的概率可以自然地估计，因为它通常不依赖于知识库中的许多其他命题。<img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210809151518343.png" alt="image-20210809151518343"></li></ul><h5 id="1-1-4-Random-Variables-and-Exceptions"><a href="#1-1-4-Random-Variables-and-Exceptions" class="headerlink" title="1.1.4 Random Variables and Exceptions"></a>1.1.4 Random Variables and Exceptions</h5><ul><li>partitions 分区</li><li>generic 通用的</li><li>Cartesian product 笛卡尔积</li><li>随机变量和期望的相关公式<img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210809174236571.png" alt=""></li><li>期望、方差、相关系数、回归系数、条件相关系数、协方差、标准差等内容</li><li>变量之间的条件独立关系，是因果建模中的一个中心概念。<img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210809195136108.png" alt="image-20210809195136108"></li></ul><h5 id="1-1-5-Condtional-Independence-and-Graphoids"><a href="#1-1-5-Condtional-Independence-and-Graphoids" class="headerlink" title="1.1.5 Condtional Independence and Graphoids"></a>1.1.5 Condtional Independence and Graphoids</h5><ul><li>介绍了条件独立性<img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210809195601349.png" alt="image-20210809195601349"></li><li>terse 简洁的</li><li>marginal independence 边际独立</li><li>unconditional independence 非条件独立</li><li>非条件独立也叫边际独立 <img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210809200113411.png" alt="image-20210809200113411"></li><li>graphoid axioms 图形公理</li><li>intercepte 截获，拦截</li><li>intuitive 直觉的</li><li>symmetry axioms 对称定理</li><li>decomposition axioms 分解定理</li><li>contraction axioms 收缩定理</li><li>五个满足条件独立关系后的性质：<img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210809234700576.png" alt="image-20210809234700576"></li><li>对称公理：在任何知识状态 Z 中，如果 Y 没有告诉我们关于 X 的任何新信息，那么 X 告诉我们关于 Y 的任何新信息。</li><li>分解公理：如果判断两个组合的信息项与 X 无关，那么每个单独的项也无关紧要。</li><li>弱联合公理：学习无关信息 W 不能帮助无关信息 Y 与 X 相关。</li><li>收缩公理：如果我们在学习了一些不相关的信息 Y 后判断 W 与 X 不相关，那么在我们倾向于 Y 之前，W 一定是不相关的。</li><li>弱联合和收缩性质意味着不相关的信息不应该改变系统中其他命题的相关状态； 相关的仍然相关，不相关的仍然不相关。</li><li>交集公理：如果当我们知道 W 时 Y 与 X 无关，如果当我们知道 Y 时 W 与 X 无关，那么 W 和 Y（或它们的组合）都与 X 无关。</li><li><img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210809234923007.png" alt="image-20210809234923007"></li></ul><h4 id="1-2-Graphs-and-Probabilities"><a href="#1-2-Graphs-and-Probabilities" class="headerlink" title="1.2 Graphs and Probabilities"></a>1.2 Graphs and Probabilities</h4><h5 id="1-2-1-Graphical-Notation-and-Terminology"><a href="#1-2-1-Graphical-Notation-and-Terminology" class="headerlink" title="1.2.1 Graphical Notation and Terminology"></a>1.2.1 Graphical Notation and Terminology</h5><ul><li><p>confounder 混淆因素</p></li><li><p>dotted curved arcs 虚线弧形</p></li><li><p>strip away 剥去</p></li><li><p>preceding edge 前边</p></li><li><p>skeleton 骨骼</p></li><li><p>mutual 相互的</p></li><li><p>feedback 反馈</p></li><li><p>acyclic 无环的</p></li><li><p>directed acyclic graph （DAG）有向无环图</p><p><img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210810155452877.png" alt="image-20210810155452877"></p></li><li><p>terminology 术语</p></li><li><p>kinship 亲属关系</p></li><li><p>adjacent node 相邻节点</p></li><li><p><img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210810155847352.png" alt="image-20210810155847352"></p></li></ul><h5 id="1-2-2-Bayesian-Network-⭐"><a href="#1-2-2-Bayesian-Network-⭐" class="headerlink" title="1.2.2 Bayesian Network ⭐"></a>1.2.2 Bayesian Network ⭐</h5><ul><li><p>threefold 三重</p></li><li><p>facilitate 促进</p></li><li><p>图在概率和统计建模中的作用有三个方面:</p><p><img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210810155949343.png" alt="image-20210810155949343"></p><ul><li><p>提供表达实质性假设的便利手段;</p></li><li><p>便于联合概率函数的经济学表示;</p></li><li><p>便于从观察中做出有效的推断。</p></li></ul></li><li><p>specify 指定</p></li><li><p>arbitrary 任意的</p></li><li><p>dichotomous 对立的</p></li><li><p>substantial 实质性的</p></li><li><p>coherently 连贯的</p></li><li><p>decomposition 分解</p></li><li><p>Markov networks 马尔可夫网络</p></li><li><p>symmtrical spatial relationship 对称的空间关系</p></li><li><p>temporal relation 时间关系</p></li><li><p>有向图，尤其是有向无环图，常用来表示因果关系或者时间关系，并被称为贝叶斯网络，这是 Pearl (1985) 中创造的一个术语，以强调三个方面：</p><p><img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210810213806956.png" alt="image-20210810213806956"></p><p>(1) 输入信息的主观性；<br>(2) 依赖贝叶斯条件作为更新信息的基础；<br>(3) 因果推理模式和证据推理模式之间的区别，这一区别强调了托马斯贝叶斯 1763 年的论文。</p></li><li><p>with occasional 偶尔</p></li><li><p>illustrate 说明</p></li><li><p>arbitrarily 任意地</p></li><li><p>概率微积分的链式法则(方程(1.12))总是允许我们将P分解为n个条件分布的乘积:<img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210812151742383.png" alt="image-20210812151742383"></p><p><img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210812151610623.png" alt="image-20210812151610623"></p></li><li><p>predecessors 前驱</p></li><li><p>considerably 相当地、非常地、大大地</p></li><li><p><img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210812153348432.png" alt="image-20210812153348432"></p></li><li><p>render 致使</p></li><li><p>redundant 冗余</p></li><li><p>assignment 赋值</p></li><li><p>recursive 递归</p></li><li><p>examine 检查</p></li><li><p>递归画图的步骤<img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210812154740623.png" alt="image-20210812154740623"></p></li><li><p>当分布P(u)严格为正时(即不涉及逻辑或定义约束)，集合PA<del>j</del>是唯一的，因此变量的每一个配置v，无论多么不可能，都有一定的发生概率。在此条件下，若给定变量的顺序，则与P(v)相关的贝叶斯网络是唯一的。</p></li><li><p>是一个简单但是经典的贝叶斯网络（图1.2）。<img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210812154010050.png" alt="image-20210812154010050"></p></li><li><p>一个DAG是概率分布P的贝叶斯网络的必要条件是，P符合G所规定的乘积分解。像下图中的公式，以及它应用于上图时的写法：<img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210812161728471.png" alt="image-20210812161728471"></p></li><li><p>in accordance with 按照</p></li><li><p>compatibility 兼容性</p></li><li><p>factorization 因式分解</p></li><li><p>primarily 主要地</p></li><li><p>sufficent 充足的</p></li><li><p>stochastic 随机的</p></li><li><p>instance 实例</p></li><li><p>d-separation，方向分离，在本书中很重要<img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210812165001172.png" alt="image-20210812165001172"></p></li></ul><h5 id="1-2-3-The-d-Separation-Criterion-⭐"><a href="#1-2-3-The-d-Separation-Criterion-⭐" class="headerlink" title="1.2.3 The d-Separation Criterion ⭐"></a>1.2.3 The d-Separation Criterion ⭐</h5><ul><li>disjoint 不相交的</li><li>consecutive 连续的</li><li>阻塞了路径，即为d-separation<img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210812210437051.png" alt="image-20210812210437051"></li><li>intuition 直觉</li><li>marginally 边际地</li><li>figuratively 形象地</li><li>metaphorically 比喻地</li><li>converging 收敛</li><li>对两个独立原因的共同结果的观察，往往使这些原因相互依赖，因为考虑到后果已经发生，关于其中一个原因的信息往往会使另一个原因发生的概率变大或者变小。 这种模式在统计文献中被称为选择偏差或伯克森悖论，在人工智能中被称为解释效应。<img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210812213227753.png" alt="image-20210812213227753"></li><li>Theorem 定理</li><li>Probabilistic Implication 概率含义</li><li>没有d-separation意味着依赖</li><li>相关定理：<img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210812233705119.png" alt="image-20210812233705119">)<img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210812232316720.png" alt="image-20210812232316720">)<img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210812232324515.png" alt="image-20210812232324515">)<img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210812232332609.png" alt="image-20210812232332609">)<img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210812232341052.png" alt="image-20210812232341052"></li></ul><h5 id="1-2-4-Inference-with-Bayesian-Network"><a href="#1-2-4-Inference-with-Bayesian-Network" class="headerlink" title="1.2.4 Inference with Bayesian Network"></a>1.2.4 Inference with Bayesian Network</h5><ul><li>coherent 连贯的</li><li>boils down 可以归结为</li><li>network topology 网络拓扑</li><li>propagation 传播</li><li>exhaust 耗尽</li><li>exponential 指数级的</li><li>exceed reasonable bounds 超出合理范围</li><li>stochastic simulation 随机模拟</li><li>local subsets 局部子集</li><li>exploit 利用</li></ul><h4 id="1-3-Causal-Bayesian-Network-⭐"><a href="#1-3-Causal-Bayesian-Network-⭐" class="headerlink" title="1.3 Causal Bayesian Network ⭐"></a>1.3 Causal Bayesian Network ⭐</h4><ul><li><p>将有向无环图解释为独立假设的载体并不一定意味着因果关系； 事实上，它对于任何一组递归独立的变量都是有效的，不一定是因果或时间顺序的。<img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210813144609922.png" alt="image-20210813144609922"></p></li><li><p>ubiquity 无处不在</p></li><li><p>defensible 可辩护的，有道理的</p></li><li><p>assertion 声明，主张</p></li><li><p>mediate 调节</p></li><li><p>因果关系不支持的依赖性被认为是奇怪的或虚假的，甚至被称为“悖论”（参见伯克森悖论的讨论，第 1.2.3 节）。<img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210813180910637.png" alt="image-20210813180910637"></p></li><li><p>围绕因果而非关联信息构建 DAG 模型的两个。</p><p>（1）模型构建所需的判断更有意义，更容易理解，因此更可靠。<img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210813180923286.png" alt="image-20210813180923286"></p><p>（2）在因果关系上建立贝叶斯网络的第二个优势是表示和响应外部或自发变化的能力——这是理解因果组织的基础。环境中机制的任何本地重新配置，只需稍作修改，都可以转换为网络拓扑的同构重新配置。<img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210813181727884.png" alt="image-20210813181727884"></p></li><li><p>demonstrate 证明</p></li><li><p>In extreme cases 在极端情况下</p></li><li><p>paradigm 范式</p></li><li><p>vehicle 工具、车辆</p></li><li><p>tap 挖掘</p></li><li><p>笔者认为因果知识的重要性高于相关（联想？）知识。如果条件独立判断是存储的因果关系的副产品，那么直接挖掘和表示这些关系将是一种更自然、更可靠的表达我们对世界的了解或信仰的方式。<img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210813180056573.png" alt="image-20210813180056573"></p></li></ul><h5 id="1-3-1-Causal-Network-as-Oracles-for-Interventions"><a href="#1-3-1-Causal-Network-as-Oracles-for-Interventions" class="headerlink" title="1.3.1 Causal Network as Oracles for Interventions"></a>1.3.1 Causal Network as Oracles for Interventions</h5><ul><li>因果网络作为干预措施的启示（Oracle？）</li><li>conceivable 可想象的</li><li>联合分布告诉我们事件的可能性有多大，以及概率如何随着后续观察而变化，但是<strong>因果模型也告诉我们这些概率将如何因外部干预而发生变化</strong>（例如在政策分析、治疗管理或规划日常活动中遇到的那些）。<img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210813183040307.png" alt="image-20210813183040307"></li><li>假设变化是局部的，不会扩散到指定的机制之外。<img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210816215755164.png" alt="image-20210816215755164"></li><li>mutilated 残缺的</li><li>interventional distributions 介入分布</li><li>a truncated factorization 一个截断因子分解<img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210816221034314.png" alt="image-20210816221034314"></li><li>exogenous 外生的</li><li>因果贝叶斯网络图的两个性质<img src="C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210816221327954.png" alt="image-20210816221327954"></li></ul><h5 id="1-3-2-Causal-Relationships-and-Their-Stability"><a href="#1-3-2-Causal-Relationships-and-Their-Stability" class="headerlink" title="1.3.2 Causal Relationships and Their Stability"></a>1.3.2 Causal Relationships and Their Stability</h5><ul><li><h3 id="Chapter-2"><a href="#Chapter-2" class="headerlink" title="Chapter 2"></a>Chapter 2</h3></li></ul><blockquote><p>A Theory of Inferred Causal</p><p>推断因果关系理论</p></blockquote><ul><li></li><li></li></ul><h3 id="Chapter-3"><a href="#Chapter-3" class="headerlink" title="Chapter 3"></a>Chapter 3</h3><blockquote><p>Causal Diagrams and the Identification of Causal Effect</p><p>因果图和因果效应识别</p></blockquote><ul><li></li><li></li></ul><h3 id="Chapter-4"><a href="#Chapter-4" class="headerlink" title="Chapter 4"></a>Chapter 4</h3><blockquote><p>Actions，Plans，and Direct Effects</p><p>行动,计划,直接影响</p></blockquote><ul><li></li><li></li></ul><h3 id="Chapter-5"><a href="#Chapter-5" class="headerlink" title="Chapter 5"></a>Chapter 5</h3><blockquote><p>Causality and Structural Models in Social Science and Economics</p><p>社会科学与经济学中的因果关系与结构模型</p></blockquote><ul><li></li><li></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Causality - Models  Reasoning  and Inference - 2E&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Judea Pearl&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;笔者认为，概率关系只是因果机制的表面现象，而因果机制是我们理解世界的基础和推动力。&lt;img src=&quot;C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210808132109973.png&quot; alt=&quot;image-20210808132109973&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;笔者认为，对科学进步的最大阻碍莫过于把我们所有的数学资源集中在概率和统计推断上，而把因果考虑留给直觉和良好的判断。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;笔者尝试提出数学工具来处理因果关系和概率关系。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用概率计算的简单扩展，读者将能够在数学上确定干预可能产生的影响，什么测量方法适合控制混淆，如何利用存在于因果路径上的测量方法，如何用一套测量方法交换另一套测量方法，以及如何估计一个事件导致另一个事件发生的概率。&lt;img src=&quot;C:%5CUsers%5CQ%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210808132225391.png&quot; alt=&quot;image-20210808132225391&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;读者希望被首次引入到用因果关系方面的建议开始与结尾,接着席卷其他历史/概念书的部分：1.1.1,3.3.3,4.5.3,5.1,5.4.1之前,6.1,7.2,7.4,7.5,8.3,9.1,9.3和10.1。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;更正式地驱动的读者,可能急于探究面对数学方面和计算工具,建议从7.1节开始,然后为我建 筑进行如下：1.2节,第3章,sect1ons4.2 - 4.4, 5.2 - -5.3,部分6.2 - -6.3,7.3节、章8 -  10。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="读书笔记" scheme="https://flower48237.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="读书笔记" scheme="https://flower48237.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>《居安思危·国家安全与乡村治理》读书笔记</title>
    <link href="https://flower48237.com/2021/06/02/%E3%80%8A%E5%B1%85%E5%AE%89%E6%80%9D%E5%8D%B1%C2%B7%E5%9B%BD%E5%AE%B6%E5%AE%89%E5%85%A8%E4%B8%8E%E4%B9%A1%E6%9D%91%E6%B2%BB%E7%90%86%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://flower48237.com/2021/06/02/%E3%80%8A%E5%B1%85%E5%AE%89%E6%80%9D%E5%8D%B1%C2%B7%E5%9B%BD%E5%AE%B6%E5%AE%89%E5%85%A8%E4%B8%8E%E4%B9%A1%E6%9D%91%E6%B2%BB%E7%90%86%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2021-06-02T14:12:42.000Z</published>
    <updated>2021-06-02T14:13:34.895Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="总序"><a href="#总序" class="headerlink" title="总序"></a>总序</h3><blockquote><p>农民在现代化的大潮中挣扎着下沉，就剩下两只手在水面乱抓。你的思想无论对错，只不过是被溺水者最后抓住的那根稻草，再怎么努力，也不过是落得跟着沉下去的结局</p><p>“自毁甚于他毁的现代性为表、横贪纵欲为里之巨大制度成本肆无忌惮地向资源环境转嫁而至人类自身不可持续” —— 梁漱溟</p></blockquote><a id="more"></a><h3 id="第一篇-局势：发展中国家内外风险叠加"><a href="#第一篇-局势：发展中国家内外风险叠加" class="headerlink" title="第一篇  局势：发展中国家内外风险叠加"></a>第一篇  局势：发展中国家内外风险叠加</h3><h4 id="第一章-中国对美“双重输出”格局及其新变化"><a href="#第一章-中国对美“双重输出”格局及其新变化" class="headerlink" title="第一章   中国对美“双重输出”格局及其新变化"></a>第一章   中国对美“双重输出”格局及其新变化</h4><blockquote><p>20210506</p></blockquote><p>中国内部一方面发生资金从实体经济析出向虚拟经济转化的顺向运动，另一方面城市经济不可能承载输入型危机</p><p>中国低价出口创造的收益大量回流美国</p><p>美国的金融资本越来越虚拟化</p><p>债务泡沫和金融泡沫都成为美国在金融资本主义阶段发生经济危机的主要来源</p><p>生产过剩的长期化这种实质性矛盾并不可能随着经济过热而根本解决</p><p>地方政府成为房地产价格居高不下的主要推手</p><h4 id="第二章-关于一带一路和当前国际局势的一些思考"><a href="#第二章-关于一带一路和当前国际局势的一些思考" class="headerlink" title="第二章   关于一带一路和当前国际局势的一些思考"></a>第二章   关于一带一路和当前国际局势的一些思考</h4><blockquote><p>20210507</p></blockquote><p>在金融资本阶段，作为信用货币的信用之来源，主要是国家政治强权</p><p>二战以来，美国一直是全球资本高附加值的创新源头</p><p>美元价值的最根本基础除了独占鳌头的军事政治强权之外，就是美国的垄断性提升资本附加值的创新能力</p><p>一带一路本身是没有灵魂的，它需要更深厚的社会公义思想和文化内涵</p><p>中国推进一带一路的成败在于话语权，当前急需内外兼修，自省谋变</p><h4 id="第三章-金融资本“无祖国”与做空分析"><a href="#第三章-金融资本“无祖国”与做空分析" class="headerlink" title="第三章   金融资本“无祖国”与做空分析"></a>第三章   金融资本“无祖国”与做空分析</h4><blockquote><p>20210508</p></blockquote><p>任何体制下的金融资本扩张都具有本质上的共性：追求流动性获利而推进经济虚拟化</p><p>金融全球化是世界上所有可称之为金融资本的特殊利益集团的基本要求</p><h4 id="第四章-谨防当前国际外部性风险叠加国内社会动荡"><a href="#第四章-谨防当前国际外部性风险叠加国内社会动荡" class="headerlink" title="第四章   谨防当前国际外部性风险叠加国内社会动荡"></a>第四章   谨防当前国际外部性风险叠加国内社会动荡</h4><blockquote><p>20210509</p></blockquote><p>2003年这一以美联储为中心的临时货币互换网络（美联储绕开了IMF，直接承担起国际货币最终贷款人的终极角色）正式长期化，标志着国际货币体系真正格局性变革的到来</p><h4 id="第五章-中央风险与地方竞争"><a href="#第五章-中央风险与地方竞争" class="headerlink" title="第五章   中央风险与地方竞争"></a>第五章   中央风险与地方竞争</h4><blockquote><p>20210510</p></blockquote><p>深化体制改革首先要明确改革的对象到底是什么体制</p><p>中央调控和地方发展之间存在明显分歧</p><p>地方政府公司化竞争与有限责任化</p><p>每当遭遇经济危机时，中央政府应对危机的办法是向地方放权以刺激地方发展，从而度过危机</p><p>中央政府承担无限责任——制度优势与现实挑战</p><p>经济分层条件下中央—地方利益失衡格局长期化</p><h3 id="第二篇-乡土：国家稳定的基石"><a href="#第二篇-乡土：国家稳定的基石" class="headerlink" title="第二篇  乡土：国家稳定的基石"></a>第二篇  乡土：国家稳定的基石</h3><h4 id="第六章-莫让-私有化摧毁乡土社会"><a href="#第六章-莫让-私有化摧毁乡土社会" class="headerlink" title="第六章  莫让 私有化摧毁乡土社会"></a>第六章  莫让 私有化摧毁乡土社会</h4><blockquote><p>20210511</p></blockquote><p>私有化是市场化的前提</p><p>土地私有化不可能是一个解决发展中国家发展问题的思路</p><p>不能轻易改变目前的土地制度</p><p>谁也不愿意扔掉家乡属于自己的土地，这可以被媒体说成是中国农民的土地情结，但也是乡土社会风险内部化机制特殊的运作特点</p><p>恰恰是农村目前的土地制度，让农民理所当然地人围他有权无偿获取一份土地财产，并以此作为无风险资产来追求其他高风险收益，才可以使其风险收益最大化</p><p>农民是靠兼业化小农家庭经济的内部性来化解外部风险的</p><p>立足先行基本制度，走长期的、改良的、新农村建设的道路</p><h4 id="第七章-中国地方政府的三次“圈地运动”"><a href="#第七章-中国地方政府的三次“圈地运动”" class="headerlink" title="第七章  中国地方政府的三次“圈地运动”"></a>第七章  中国地方政府的三次“圈地运动”</h4><blockquote><p>20210512</p></blockquote><p>第一轮圈地运动中，农村耕地主要被乡镇企业乱占滥用，干扰了国家建设的总体思路</p><p>农村集体对土地的非农使用权力被上收到公司主义的政府手中的同时，土地的商品属性也逐渐确立</p><p>第二轮圈地运动由地方政府发起，因主导力量发生改变而与第一轮大不相同，并且持续时间更长，地方政府以地生财</p><p>第三轮圈地运动以地方政府的以地套现为肇端，逐渐形成了新世纪以来基于“高圈地”的“高负债+高投资=高增长”的发展模式</p><h4 id="第八章-百年乡建-一波三折"><a href="#第八章-百年乡建-一波三折" class="headerlink" title="第八章  百年乡建 一波三折"></a>第八章  百年乡建 一波三折</h4><blockquote><p>20210513</p></blockquote><p>百年中国历史上四次工业化的内在动力与联系效果</p><p>乡村建设是一个延续百年的社会大众改良实践</p><p>梁漱溟：外力之破坏乡村尚属有限，我们感受外面刺激而起反应，自动的破坏乡村，殆十倍之不止……一部中国近百年史，从头到尾就是一部乡村破坏史。</p><h4 id="第九章-乡村治理与国家安全的相关问题研究"><a href="#第九章-乡村治理与国家安全的相关问题研究" class="headerlink" title="第九章  乡村治理与国家安全的相关问题研究"></a>第九章  乡村治理与国家安全的相关问题研究</h4><blockquote><p>20210514</p></blockquote><p>中央下乡与地方下乡的零和博弈</p><p>地方下乡，实质上还是以资源和土地的资本化开发来实现产业化经营</p><p>物质形态的改变发生在乡村，但以地套现所得的资金并不保留在乡村而是主要地流入当地的城市化</p><p>村庄成为多种潜在冲突不断复合和累积的矛盾体</p><p>一旦城市中的资本危机爆发，村庄中累积的社会矛盾将加速、加剧、加倍地激化和爆发</p><h4 id="第十章-乡村公共财地作用与生成逻辑"><a href="#第十章-乡村公共财地作用与生成逻辑" class="headerlink" title="第十章  乡村公共财地作用与生成逻辑"></a>第十章  乡村公共财地作用与生成逻辑</h4><blockquote><p>20210515</p></blockquote><p>公共财是村庄善治可持续的关键</p><h4 id="第十一章-政府理性与村社理性：中国地两大”比较优势“"><a href="#第十一章-政府理性与村社理性：中国地两大”比较优势“" class="headerlink" title="第十一章  政府理性与村社理性：中国地两大”比较优势“"></a>第十一章  政府理性与村社理性：中国地两大”比较优势“</h4><blockquote><p>20210516</p></blockquote><p>西方资本主义国家：军事和金融霸权内在结合</p><p>随着工业化地大力推进，各地出现了多种形式地“开发区”，实质上是城市资本通过与地方政府分享收益去实现农村资源的资本化</p><p>地方政府利用行政权力强力配合资本占有社区资源实现资本化，大量获取土地资本增值收益，用于地方政府分享资本收益分配</p><h4 id="第十二章-重构宏观经济危机”软着陆”的乡土基础"><a href="#第十二章-重构宏观经济危机”软着陆”的乡土基础" class="headerlink" title="第十二章  重构宏观经济危机”软着陆”的乡土基础"></a>第十二章  重构宏观经济危机”软着陆”的乡土基础</h4><blockquote><p>20210517</p></blockquote><p>农村组织化程度最高的是农业集体化十七，土地的社区财政功能发挥到最大</p><p>国家在赤字危机爆发的压力下客观地发生了放弃集体化——农民去组织化大包干</p><h3 id="第三篇-农业：现代化何以为继？"><a href="#第三篇-农业：现代化何以为继？" class="headerlink" title="第三篇   农业：现代化何以为继？"></a>第三篇   农业：现代化何以为继？</h3><h4 id="第十三章-农业现代化的误区"><a href="#第十三章-农业现代化的误区" class="headerlink" title="第十三章  农业现代化的误区"></a>第十三章  农业现代化的误区</h4><blockquote><p>20210518</p></blockquote><p>1956年提出中国农业现代化的口号</p><p>生产过剩是资本主义一般内生性矛盾</p><p>新三农：合作农民、稳定农村、安全农业</p><p>资本要素的流动，将会给农村代理新的发展机会</p><h4 id="第十四章-中国当代农业农村政策的基本问题"><a href="#第十四章-中国当代农业农村政策的基本问题" class="headerlink" title="第十四章  中国当代农业农村政策的基本问题"></a>第十四章  中国当代农业农村政策的基本问题</h4><blockquote><p>20210519    </p></blockquote><p>农业全球化困境：地板高于天花板</p><p>农业困境的内因分析：生产要素被外部定价</p><p>农业产业化：背景、实质、成果及其三重负外部性</p><ul><li>客观上发生了农业过剩和农产品大量浪费</li><li>几乎所有外部投资主体都与地方部门交易来更大规模占有农业资源</li><li>急需简历政府部门和社会组织积极配合开展生态化农村经济及两型农业的优惠政策及投入导向</li></ul><h4 id="第十五章-农业现代化的发展路径与方向问题"><a href="#第十五章-农业现代化的发展路径与方向问题" class="headerlink" title="第十五章  农业现代化的发展路径与方向问题"></a>第十五章  农业现代化的发展路径与方向问题</h4><blockquote><p>20210520</p></blockquote><p>亚洲至今仍然是世界上最大的原住民大陆</p><p>村社土地共有制关系的财产关系是以血地缘关系为产权边界的</p><p>服务于国家工业化原始积累，才是把农业单纯作为第一产业、推行土地规模经济和农业集体化的根本原因</p><p>城乡之间出现了一个城市长期提取农村剩余的二元对立体制，这才是导致三农困境的根本原因</p><p>三农问题重中之重的指导思想，大方向是生态化</p><p>2008年是三产化的第三次农业现代化的开端</p><h4 id="第十六章-农业“三产化”阶段的制度创新"><a href="#第十六章-农业“三产化”阶段的制度创新" class="headerlink" title="第十六章  农业“三产化”阶段的制度创新"></a>第十六章  农业“三产化”阶段的制度创新</h4><blockquote><p>20200521</p></blockquote><p>生产导向转为消费导向</p><p>劳动力老龄化更表明，农业竞争力丧失殆尽</p><h3 id="第四篇-粮食：金融化趋势下如何保障安全"><a href="#第四篇-粮食：金融化趋势下如何保障安全" class="headerlink" title="第四篇  粮食：金融化趋势下如何保障安全"></a>第四篇  粮食：金融化趋势下如何保障安全</h3><h4 id="第十七章-粮食金融化与粮食安全"><a href="#第十七章-粮食金融化与粮食安全" class="headerlink" title="第十七章  粮食金融化与粮食安全"></a>第十七章  粮食金融化与粮食安全</h4><blockquote><p>20210522</p></blockquote><p>中国农业进口约占国内消费的1/4</p><p>20世纪粮食价格波动的主要原因：几乎每次主要粮食生产国粮食减产，都会导致本国粮食对世界粮食市场的需求增加，从而使粮食价格猛涨</p><p>国际粮价的潮起潮落与2008年金融海啸及美国连续三次推行量化宽松的货币政策存在紧密联系</p><p>粮食美元化/粮食的金融化</p><p>价格是市场经济体系下实体经济的核心环节</p><p>金融化表面上看是超发货币及其衍生品导致的经济现象，但它绝不属于传统经济学意义上的通货膨胀的概念范畴</p><p>粮食金融化是发达资本主义国家实体经济高度金融化所衍生出的一个剖面</p><p>粮食市场成为过剩金融流动性的垃圾消纳场</p><p>粮食市场的运行脱离实体层面，而粮食被人为创造出金融属性</p><p>任志刚：金融资本应当落实在产业资本实体经济上，但显示并非如此，是不正常的</p><p>金融危机以来，美国通过美元持续贬值成为最大的受益国</p><p>粮食的金融属性越来越显化</p><p>自20世纪70年代以来，金融资本愈益成为使劲分工和分配的核心，遂使货币权力超越地缘实力，成为金融资本主义时代国家间关系的新枢纽</p><p>在金融投机过程中，非理性预期是定价的主导因素</p><p>过剩金融资本冲击粮食市场，导致粮食价格大幅度上涨</p><p>发达国家主导的农产品金融交易会成为其专家金融风险的利器</p><p>农产品的去大宗化和去同质化，发展多样化</p><h4 id="第十八章-粮食金融化挑战"><a href="#第十八章-粮食金融化挑战" class="headerlink" title="第十八章  粮食金融化挑战"></a>第十八章  粮食金融化挑战</h4><blockquote><p>20210523</p></blockquote><p>金融产品市场形成的虚拟经济掌握了生产产品与服务的实体经济的定价权的现象</p><p>金融化对产业发展和社会生产力进步具有严重的破坏作用</p><p>实体经济金融化，是资本主义经济体制发展深化的必然产物，金融经济对国民经济投资和国际经济体系的主导作用超过实体经济，金融资本家对经济的控制力量超过产业资本家</p><p>全球粮食供需基本面情况，不再是构成粮价剧烈波动的最主要原因</p><p>后金融危机时代，国际粮食市场的剧烈波动和近年来世界粮食安全面临的新挑战，根源都在于粮食金融化</p><p>美元价格越贬值，国际经济体系中的流动性越强，则粮食价格和能源价格就会持续上涨</p><p>粮食危机实际上是美元危机</p><h4 id="第十九章-日本高米价背后的农协垄断及其政党联系"><a href="#第十九章-日本高米价背后的农协垄断及其政党联系" class="headerlink" title="第十九章  日本高米价背后的农协垄断及其政党联系"></a>第十九章  日本高米价背后的农协垄断及其政党联系</h4><blockquote><p>20210524</p></blockquote><p>若没有农民和农村的高度组织化，历经多次危机并且深陷于20年衰退的日本根本不可能维护国内政治长期稳定</p><p>一个被组织起来的群体对政党来说意味着较低的政治交易成本</p><h3 id="第五篇-生态文明：发展中国家的希望"><a href="#第五篇-生态文明：发展中国家的希望" class="headerlink" title="第五篇  生态文明：发展中国家的希望"></a>第五篇  生态文明：发展中国家的希望</h3><h4 id="第二十章-理性看待全球危机，自觉转向生态文明"><a href="#第二十章-理性看待全球危机，自觉转向生态文明" class="headerlink" title="第二十章  理性看待全球危机，自觉转向生态文明"></a>第二十章  理性看待全球危机，自觉转向生态文明</h4><blockquote><p>20210525</p></blockquote><p>中国作为世界最大的原住民人口聚居地和“超大型大陆经济体”，无法无条件照搬殖民化，由此却走出了与西方工业化不同的路径</p><p>二战后世界主流是发展主义</p><p>西方的资本原始积累，是依靠大量掳掠来的海外财富，以及欧洲贫弱和犯罪人口大量向殖民地移出来完成的</p><p>金融资本的寄生性：政府直接出手，通过货币扩张和债务扩张来满足西方社会的大多数中产阶级群体的福利主义需求</p><p>“中国经验”的本质是在“政府公司化”条件下维持了产业结构的相对完整</p><h4 id="第二十一章-以生态文明为导向的高等教育理念转型及其试验"><a href="#第二十一章-以生态文明为导向的高等教育理念转型及其试验" class="headerlink" title="第二十一章  以生态文明为导向的高等教育理念转型及其试验"></a>第二十一章  以生态文明为导向的高等教育理念转型及其试验</h4><blockquote><p>20210526</p></blockquote><p>高等教育的本质属性是应对国家宏观发展战略的上层建筑范畴</p><p>工业化国家的经济都依赖于非再生能源基础</p><p>生态文明时代的经济社会活动、人的文化心理变迁，需要以遵循自然规律、以“资源节约型、环境友好型”为基础目标，以敬畏天地和自然规律为终极目标。要求生态文明理念与道德准则在经济、社会、人文、民生与资源、环境等各个领域发挥导向作用、驱动作用</p><h3 id="第六篇-探索：本土经验与地方创新"><a href="#第六篇-探索：本土经验与地方创新" class="headerlink" title="第六篇  探索：本土经验与地方创新"></a>第六篇  探索：本土经验与地方创新</h3><h4 id="第二十二章-地方政府制度创新与产业转型升级"><a href="#第二十二章-地方政府制度创新与产业转型升级" class="headerlink" title="第二十二章  地方政府制度创新与产业转型升级"></a>第二十二章  地方政府制度创新与产业转型升级</h4><blockquote><p>20210527</p></blockquote><p>制度提供了人类相互影响的框架，他们建立了构成一个社会，或更确切地说一种经济秩序地合作与竞争关系</p><p>由于社会和历史地初期条件局限，经济社会地制度进化往往表现出极强地路径依赖性</p><p>在经济发展中一个最为重要的解释性变量是政治组织和政府的施政能力</p><p>收益与风险对等</p><p>居于任何类型的政府治理下，只要推进经济结构调整，都会有结构调整带来的制度成本</p><h4 id="第二十三章-逆周期调节与“政府信用替代资本信用”"><a href="#第二十三章-逆周期调节与“政府信用替代资本信用”" class="headerlink" title="第二十三章  逆周期调节与“政府信用替代资本信用”"></a>第二十三章  逆周期调节与“政府信用替代资本信用”</h4><blockquote><p>20210528</p></blockquote><p>在危机条件下，各国政府所普遍采行的逆周期干预措施，其实质都是政府信用的具体表达，基本方式都是政府信用对资本信用的替代</p><p>从中国工业化进程中政府自身的特性出发，政府信用是政府权力直接派生的国家信用工具，在资本稀缺条件下政府信用直接对私人资本起到替代作用，主要服务于国家的整体经济社会发展大局</p><p>中央和地方的政府信用分化始于1984年的“财政分级承包”以及1994年的分税制改革</p><p>一般而言，地方政府信用的强弱取决于其社会动员能力、经济实力、财政实力以及金融实力等经济社会条件</p><p>危机时代应该强调政府信用替代资本有逆周期调节的宏观作用</p><h4 id="第二十四章-通过国家赋权与地方创新破解“三元悖论“"><a href="#第二十四章-通过国家赋权与地方创新破解“三元悖论“" class="headerlink" title="第二十四章  通过国家赋权与地方创新破解“三元悖论“"></a>第二十四章  通过国家赋权与地方创新破解“三元悖论“</h4><blockquote><p>20210529</p></blockquote><p>只有通过国家暴力机器的介入洗出灰色资本，才能重构综合收益对国资、外资、民资的顺畅的分配渠道</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;总序&quot;&gt;&lt;a href=&quot;#总序&quot; class=&quot;headerlink&quot; title=&quot;总序&quot;&gt;&lt;/a&gt;总序&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;农民在现代化的大潮中挣扎着下沉，就剩下两只手在水面乱抓。你的思想无论对错，只不过是被溺水者最后抓住的那根稻草，再怎么努力，也不过是落得跟着沉下去的结局&lt;/p&gt;
&lt;p&gt;“自毁甚于他毁的现代性为表、横贪纵欲为里之巨大制度成本肆无忌惮地向资源环境转嫁而至人类自身不可持续” —— 梁漱溟&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="读书笔记" scheme="https://flower48237.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="读书笔记" scheme="https://flower48237.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>测试百度搜搜索用-鸡排大仙儿的网站</title>
    <link href="https://flower48237.com/2021/05/23/%E6%B5%8B%E8%AF%95%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2%E7%94%A8-%E9%B8%A1%E6%8E%92%E5%A4%A7%E4%BB%99%E5%84%BF%E7%9A%84%E7%BD%91%E7%AB%99/"/>
    <id>https://flower48237.com/2021/05/23/%E6%B5%8B%E8%AF%95%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2%E7%94%A8-%E9%B8%A1%E6%8E%92%E5%A4%A7%E4%BB%99%E5%84%BF%E7%9A%84%E7%BD%91%E7%AB%99/</id>
    <published>2021-05-23T12:54:13.974Z</published>
    <updated>2021-06-02T14:11:59.641Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="测试百度搜搜索用-鸡排大仙儿的网站"><a href="#测试百度搜搜索用-鸡排大仙儿的网站" class="headerlink" title="测试百度搜搜索用-鸡排大仙儿的网站"></a>测试百度搜搜索用-鸡排大仙儿的网站</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SQL学习：INDEX、DROP、ALTER、 AUTO INCREMENT</title>
    <link href="https://flower48237.com/2020/07/31/sql%E5%AD%A6%E4%B9%A00731-INDEX%E3%80%81DROP%E3%80%81ALTER%E3%80%81%20AUTO%20INCREMENT/"/>
    <id>https://flower48237.com/2020/07/31/sql%E5%AD%A6%E4%B9%A00731-INDEX%E3%80%81DROP%E3%80%81ALTER%E3%80%81%20AUTO%20INCREMENT/</id>
    <published>2020-07-31T10:02:00.000Z</published>
    <updated>2021-06-02T14:23:42.330Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>在不读取整个表的情况下，索引能更加快速地查找数据。用户无法看到索引，他们只能被用来提高查询效率。更新一个带有索引的表比更新一个不带索引的表花费更多时间，这是由于索引本身也需要更新导致的。因此，理想的做法是仅在经常被搜索的表上创建索引。</p><a id="more"></a><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">创建简单索引，允许重复</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> index_name</span><br><span class="line"><span class="keyword">ON</span> table_name (column_name);</span><br><span class="line"></span><br><span class="line">创建简单索引（在多个列上），允许重复</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> index_name</span><br><span class="line"><span class="keyword">ON</span> table_name (column_name1, column_name2);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">创建唯一索引，不允许重复，唯一索引意味着两个行不能拥有同一个索引值</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> index_name</span><br><span class="line"><span class="keyword">ON</span> table_name (column_name)</span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> PIndex</span><br><span class="line"><span class="keyword">ON</span> Persons (LastName);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> PIndex</span><br><span class="line"><span class="keyword">ON</span> Persons (LastName, FirstName);</span><br></pre></td></tr></table></figure><h1 id="DROP"><a href="#DROP" class="headerlink" title="DROP"></a>DROP</h1><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><p>通过DROP语句可以删除索引、表、数据库</p><h2 id="语法1-撤销索引-DROP-INDEX"><a href="#语法1-撤销索引-DROP-INDEX" class="headerlink" title="语法1 撤销索引 DROP INDEX"></a>语法1 撤销索引 DROP INDEX</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(Oracle)</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> index_name;</span><br></pre></td></tr></table></figure><h2 id="语法2-撤销表-DROP-TABLE"><a href="#语法2-撤销表-DROP-TABLE" class="headerlink" title="语法2 撤销表 DROP TABLE"></a>语法2 撤销表 DROP TABLE</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> table_name;</span><br></pre></td></tr></table></figure><h2 id="语法3-撤销数据库-DROP-DATABASE"><a href="#语法3-撤销数据库-DROP-DATABASE" class="headerlink" title="语法3 撤销数据库 DROP DATABASE"></a>语法3 撤销数据库 DROP DATABASE</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> database_name;</span><br></pre></td></tr></table></figure><h2 id="语法4-TRUNCATE-TABLE语句"><a href="#语法4-TRUNCATE-TABLE语句" class="headerlink" title="语法4 TRUNCATE TABLE语句"></a>语法4 TRUNCATE TABLE语句</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">只删除表中内容，不删除表</span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> table_name;</span><br></pre></td></tr></table></figure><h1 id="ALTER-TABLE"><a href="#ALTER-TABLE" class="headerlink" title="ALTER TABLE"></a>ALTER TABLE</h1><h2 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h2><p>ALTER TABLE 语句用于在已有的表中 添加、删除 或 修改 各个列。</p><h2 id="语法1-在表中添加列"><a href="#语法1-在表中添加列" class="headerlink" title="语法1 在表中添加列"></a>语法1 在表中添加列</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line"><span class="keyword">ADD</span> column_name data_type;</span><br></pre></td></tr></table></figure><h2 id="语法2-删除表中的列"><a href="#语法2-删除表中的列" class="headerlink" title="语法2 删除表中的列"></a>语法2 删除表中的列</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> column_name;</span><br></pre></td></tr></table></figure><h2 id="语法3-改变表中的数据类中"><a href="#语法3-改变表中的数据类中" class="headerlink" title="语法3 改变表中的数据类中"></a>语法3 改变表中的数据类中</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line"><span class="keyword">MODIFY</span> column_name data_type;</span><br></pre></td></tr></table></figure><h2 id="举例Persons表"><a href="#举例Persons表" class="headerlink" title="举例Persons表"></a>举例Persons表</h2><table><thead><tr><th>P_id</th><th>LastName</th><th>FirstName</th><th>City</th></tr></thead><tbody><tr><td>1</td><td>san</td><td>zhang</td><td>BeiJing</td></tr><tr><td>2</td><td>si</td><td>li</td><td>ShangHai</td></tr><tr><td>3</td><td>wu</td><td>wang</td><td>GuangZhou</td></tr></tbody></table><h2 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在 "Persons" 表中添加一个名为 "DateOfBirth" 的列</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">ADD</span> DateOfBirth <span class="built_in">date</span>;</span><br></pre></td></tr></table></figure><p>操作后的表如下：<br>| P_id | LastName | FirstName | City | DateOfBirth |<br>|–|–|–|–|–|<br>| 1 | san | zhang | BeiJing ||<br>| 2 | si | li | ShangHai ||<br>| 3 | wu | wang | GuangZhou ||</p><h2 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">改变 "Persons" 表中 "DateOfBirth" 列的数据类型</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">MODIFY</span> DateOfBirth <span class="keyword">year</span>;</span><br></pre></td></tr></table></figure><h2 id="实例3"><a href="#实例3" class="headerlink" title="实例3"></a>实例3</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">删除 "Person" 表中的 "DateOfBirth" 列</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> DataOfBirth;</span><br></pre></td></tr></table></figure><p>操作后的表如下：<br>| P_id | LastName | FirstName | City |<br>|–|–|–|–|<br>| 1 | san | zhang | BeiJing |<br>| 2 | si | li | ShangHai |<br>| 3 | wu | wang | GuangZhou |</p><h1 id="AUTO-INCREMENT-字段"><a href="#AUTO-INCREMENT-字段" class="headerlink" title="AUTO INCREMENT 字段"></a>AUTO INCREMENT 字段</h1><h2 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h2><p>我们通常希望在每次插入新记录时，自动地创建主键字段的值。<br>AUTO INCREMENT 字段可以在新记录插入到表中的时候生成一个唯一的数字</p><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">在 Oracle 中，必须通过 sequence 对象（该对象生成数字序列）创建 AUTO INCREMENT 字段:</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">SEQUENCE</span> seq_person</span><br><span class="line"><span class="keyword">MINVALUE</span>        <span class="number">1</span></span><br><span class="line"><span class="keyword">START</span> <span class="keyword">WITH</span>      <span class="number">1</span></span><br><span class="line"><span class="keyword">INCREMENT</span> <span class="keyword">BY</span>    <span class="number">1</span></span><br><span class="line"><span class="keyword">CACHE</span>           <span class="number">10</span></span><br></pre></td></tr></table></figure><p>上面的代码创建一个名为 seq_person 的 sequence 对象，它以1起始且以 1 为单位递增。该对象缓存10个值以提高性能。cache选项规定了为了提高访问速度要存储多少个序列值。</p><h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">要在 "Persons" 表中插入新记录，我们必须使用 nextval 函数（该函数从 seq_person 序列中取回下一个值）：</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Persons (<span class="keyword">ID</span>,FirstName,LastName)</span><br><span class="line"><span class="keyword">VALUES</span> (seq_person.nextval,<span class="string">'Lars'</span>,<span class="string">'Monsen'</span>)</span><br></pre></td></tr></table></figure><p>上面的 SQL 语句会在 “Persons” 表中插入一条新记录。<br>“ID” 列会被赋值为来自 seq_person 序列的下一个数字，所以使用了nextval函数；<br>“FirstName”列 会被设置为 “Lars”；”LastName” 列会被设置为 “Monsen”。</p><h1 id="VIEW-试图"><a href="#VIEW-试图" class="headerlink" title="VIEW(试图)"></a>VIEW(试图)</h1><h2 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h2><p>视图是可视化的表，下面主要介绍怎样创建、更新和删除视图</p><h2 id="创建视图-CREATE-VIEW"><a href="#创建视图-CREATE-VIEW" class="headerlink" title="创建视图 CREATE　VIEW"></a>创建视图 CREATE　VIEW</h2><h3 id="语法1-创建视图"><a href="#语法1-创建视图" class="headerlink" title="语法1 创建视图"></a>语法1 创建视图</h3><p>视图是基于SQL语句的结果集的可视化的表。</p><p>视图包含行和列，像一个真实的表（实际上并不是）。视图中的字段就是来自一个或多个数据库中的真实的表中的字段。</p><p>可以向视图添加WHERE语句、JOIN语句以及SQL函数，也可以呈现数据，就像这些数据来自于某个单一的表一样。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> view_name <span class="keyword">AS</span> <span class="comment">-- 创建 -- </span></span><br><span class="line"><span class="keyword">SELECT</span> column_name(s)    </span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> condition;</span><br></pre></td></tr></table></figure><blockquote><p>视图总是显示最新的数据，每次查询视图时，数据库引擎通过使用视图的SQL语句重建数据。</p></blockquote><h3 id="实例1-创建视图"><a href="#实例1-创建视图" class="headerlink" title="实例1 创建视图"></a>实例1 创建视图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">视图 &quot;Current Product List&quot; 会从 &quot;Products&quot; 表列出所有正在使用的产品</span><br><span class="line"></span><br><span class="line">CREATE VIEW [Current Product List] AS</span><br><span class="line">SELECT ProductID, ProductName</span><br><span class="line">FROM Products</span><br><span class="line">WHERE Discontinued&#x3D;No;</span><br></pre></td></tr></table></figure><h3 id="实例2-查询实例1中的视图"><a href="#实例2-查询实例1中的视图" class="headerlink" title="实例2 查询实例1中的视图"></a>实例2 查询实例1中的视图</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * </span><br><span class="line"><span class="keyword">FROM</span> [<span class="keyword">Current</span> Product <span class="keyword">List</span>];</span><br></pre></td></tr></table></figure><h2 id="更新视图-REPLACE-VIEW"><a href="#更新视图-REPLACE-VIEW" class="headerlink" title="更新视图 REPLACE VIEW"></a>更新视图 REPLACE VIEW</h2><h3 id="语法2"><a href="#语法2" class="headerlink" title="语法2"></a>语法2</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">VIEW</span> view_name <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> condition;</span><br></pre></td></tr></table></figure><h3 id="实例3-1"><a href="#实例3-1" class="headerlink" title="实例3"></a>实例3</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">向 "Current Product List" 视图添加 "Category" 列</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> [<span class="keyword">Current</span> Product <span class="keyword">List</span>] <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> ProductID, ProductName, <span class="keyword">Category</span></span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> Discontinued=<span class="keyword">No</span></span><br></pre></td></tr></table></figure><h2 id="撤销视图-DROP-VIEW"><a href="#撤销视图-DROP-VIEW" class="headerlink" title="撤销视图 DROP VIEW"></a>撤销视图 DROP VIEW</h2><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> view_name</span><br></pre></td></tr></table></figure><h1 id="NULL-值"><a href="#NULL-值" class="headerlink" title="NULL 值"></a>NULL 值</h1><h2 id="介绍-5"><a href="#介绍-5" class="headerlink" title="介绍"></a>介绍</h2><p>NULL值代表遗漏的未知数据。表的列默认是可以存放NULL值的。<br>下面介绍 IS NULL 和 IS NOT NULL 操作符。</p><h2 id="NULL-值-1"><a href="#NULL-值-1" class="headerlink" title="NULL 值"></a>NULL 值</h2><h3 id="介绍-6"><a href="#介绍-6" class="headerlink" title="介绍"></a>介绍</h3><ul><li><p>如果表中的某个列是可选的，那么我们可以在不向该列添加值的情况下，插入新记录或更新已有的记录。这意味着该字段将以 NULL值的形式来保存。</p></li><li><p>NULL 值的处理方式与其他值不同。</p></li><li><p>NULL 用作未知的 或 不适用 的 值 的 占位符。</p></li><li><p>无法比较 NULL 和 0，因为它们不等价。</p></li><li><p>也无法使用比较运算符来测试 NULL 值，比如 =、&lt; 或 &lt;&gt;。</p></li><li><p>必须使用 IS NULL 和 IS NOT NULL 操作符。</p></li></ul><h3 id="实例1-IS-NULL"><a href="#实例1-IS-NULL" class="headerlink" title="实例1 IS NULL"></a>实例1 IS NULL</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> LastName, FirstName, Address <span class="keyword">FROM</span> Persons</span><br><span class="line"><span class="keyword">WHERE</span> Address <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><h3 id="实例2-IS-NOT-NULL"><a href="#实例2-IS-NOT-NULL" class="headerlink" title="实例2 IS NOT NULL"></a>实例2 IS NOT NULL</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> LastName, FirstName, Address <span class="keyword">FROM</span> Persons</span><br><span class="line"><span class="keyword">WHERE</span> Address <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;创建索引&quot;&gt;&lt;a href=&quot;#创建索引&quot; class=&quot;headerlink&quot; title=&quot;创建索引&quot;&gt;&lt;/a&gt;创建索引&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;在不读取整个表的情况下，索引能更加快速地查找数据。用户无法看到索引，他们只能被用来提高查询效率。更新一个带有索引的表比更新一个不带索引的表花费更多时间，这是由于索引本身也需要更新导致的。因此，理想的做法是仅在经常被搜索的表上创建索引。&lt;/p&gt;</summary>
    
    
    
    <category term="SQL" scheme="https://flower48237.com/categories/SQL/"/>
    
    
    <category term="SQL" scheme="https://flower48237.com/tags/SQL/"/>
    
    <category term="基础" scheme="https://flower48237.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>SQL学习：CONSTRAINTS</title>
    <link href="https://flower48237.com/2020/07/30/sql%E5%AD%A6%E4%B9%A00730-Constraints%EF%BC%88%E7%BA%A6%E6%9D%9F%EF%BC%89/"/>
    <id>https://flower48237.com/2020/07/30/sql%E5%AD%A6%E4%B9%A00730-Constraints%EF%BC%88%E7%BA%A6%E6%9D%9F%EF%BC%89/</id>
    <published>2020-07-30T10:02:00.000Z</published>
    <updated>2021-06-02T14:21:47.120Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>SQL 约束用于规定表中的数据规则。</p><p>如果存在违反约束的数据行为，行为会被约束终止。</p><p>约束可以在创建表时规定（通过 CREATE TABLE 语句）；</p><p>或者在表创建之后规定（通过 ALTER TABLE 语句）。</p><h2 id="语法（CREATE-TABLE-CONSTRAINT）"><a href="#语法（CREATE-TABLE-CONSTRAINT）" class="headerlink" title="语法（CREATE TABLE + CONSTRAINT）"></a>语法（CREATE TABLE + CONSTRAINT）</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line">(</span><br><span class="line">column_name1 data_type(<span class="keyword">size</span>) constraint_name,</span><br><span class="line">column_name2 data_type(<span class="keyword">size</span>) constraint_name,</span><br><span class="line">column_name3 data_type(<span class="keyword">size</span>) constraint_name,</span><br><span class="line">....</span><br><span class="line">);</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="在-SQL-中，有以下6个约束："><a href="#在-SQL-中，有以下6个约束：" class="headerlink" title="在 SQL 中，有以下6个约束："></a>在 SQL 中，有以下6个约束：</h2><ul><li>NOT NULL          - 指示某列不能存储 NULL 值。</li><li>UNIQUE            - 保证某列的每行必须有唯一的值，独一无二的值。</li><li>PRIMARY KEY(主键) - NOT NULL和 UNIQUE的结合。确保某列（或两个列多个列的结合）有唯一标识，有助于更容易更快速地找到表中的一个特定的记录。</li><li>FOREIGN KEY(外键) - 保证一个表中的数据匹配另一个表中的值的参照完整性。</li><li>CHECK             - 保证列中的值符合指定的条件。</li><li>DEFAULT           - 规定没有给列赋值时的默认值。</li></ul><h2 id="NOT-NULL-约束"><a href="#NOT-NULL-约束" class="headerlink" title="NOT NULL 约束"></a>NOT NULL 约束</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>在默认的情况下，表的列 是接受 NULL 值的，但NOT NULL约束强制该列不接受 NULL值，强制字段始终包含非空值。如果不向字段添加值，就无法插入或更新记录。</p><h3 id="实例1-创建表时定义not-null约束"><a href="#实例1-创建表时定义not-null约束" class="headerlink" title="实例1 创建表时定义not null约束"></a>实例1 创建表时定义not null约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">下面的 SQL 语句强制 "ID" 列、 "LastName" 列以及 "FirstName" 列不能为NULL。</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons (</span><br><span class="line">    <span class="keyword">ID</span>          <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    LastName    <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    FirstName   <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    Age         <span class="built_in">int</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="实例2-在已经存在的表中添加-NOT-NULL-约束"><a href="#实例2-在已经存在的表中添加-NOT-NULL-约束" class="headerlink" title="实例2 在已经存在的表中添加 NOT NULL 约束"></a>实例2 在已经存在的表中添加 NOT NULL 约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在已创建的Persons表的 "Age" 字段中 添加 NOT NULL 约束</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">MODIFY</span> Age <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><h3 id="实例3-删除-NOT-NULL-约束"><a href="#实例3-删除-NOT-NULL-约束" class="headerlink" title="实例3 删除 NOT NULL 约束"></a>实例3 删除 NOT NULL 约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在一个已创建的表的 "Age" 字段中删除 NOT NULL 约束</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">MODIFY</span> Age <span class="built_in">int</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><h2 id="UNIQUE-约束"><a href="#UNIQUE-约束" class="headerlink" title="UNIQUE 约束"></a>UNIQUE 约束</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><ul><li><p>UNIQUE 约束唯一标识数据库表中的每条记录。</p></li><li><p>UNIQUE 和 PRIMARY KEY 约束均为列或列集合提供了唯一性的保证。</p></li><li><p>PRIMARY KEY 约束拥有自动定义的 UNIQUE 约束。</p></li><li><p>每个表可以有多个 UNIQUE 约束，但是每个表只能有一个 PRIMARY KEY 约束。</p></li></ul><h3 id="实例1-创建表时的UNIQUE约束"><a href="#实例1-创建表时的UNIQUE约束" class="headerlink" title="实例1 创建表时的UNIQUE约束"></a>实例1 创建表时的UNIQUE约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">(</span><br><span class="line">P_Id        <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span>,       <span class="comment">-- 直接说明了是UNIQUE -- </span></span><br><span class="line">LastName    <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">FirstName   <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">Address     <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">City        <span class="built_in">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">命名 UNIQUE 约束，并定义多个列的 UNIQUE 约束</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">(</span><br><span class="line">P_Id        <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">LastName    <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">FirstName   <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">Address     <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">City        <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="keyword">CONSTRAINT</span>  uc_PersonID <span class="keyword">UNIQUE</span> (P_Id, LastName)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="实例2-更改表时的UNIQUE约束"><a href="#实例2-更改表时的UNIQUE约束" class="headerlink" title="实例2 更改表时的UNIQUE约束"></a>实例2 更改表时的UNIQUE约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">表Persons已经存在，需要在P_ID列创建UNIQUE约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> (P_ID);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">表Persons已经存在，需要重命名UNIQE 约束，并定义多个列的约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> uc_PersonID (P_ID, LastName);</span><br></pre></td></tr></table></figure><h3 id="实例3-撤销UNIQUE约束"><a href="#实例3-撤销UNIQUE约束" class="headerlink" title="实例3 撤销UNIQUE约束"></a>实例3 撤销UNIQUE约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> uc_Person_ID;</span><br></pre></td></tr></table></figure><h2 id="PRIMARY-KEY-主键-约束"><a href="#PRIMARY-KEY-主键-约束" class="headerlink" title="PRIMARY KEY (主键) 约束"></a>PRIMARY KEY (主键) 约束</h2><h3 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h3><ul><li>PRIMARY KEY约束 唯一标识数据库表中的每条记录。</li><li>主键必须包含唯一的值。</li><li>主键列不能包含 NULL 值。</li><li>每个表都有且只能有一个主键。</li></ul><h3 id="实例1-创建表时的PRIMARY-约束"><a href="#实例1-创建表时的PRIMARY-约束" class="headerlink" title="实例1 创建表时的PRIMARY 约束"></a>实例1 创建表时的PRIMARY 约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">在 "Persons" 表创建时在 "P_Id" 列上创建 PRIMARY KEY 约束</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons(</span><br><span class="line">P_Id        <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span>,  <span class="comment">-- 主键定义 -- </span></span><br><span class="line">LastName    <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">FirstName   <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">Address     <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">City        <span class="built_in">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">在建表的同时命名 PRIMARY KEY 约束，并定义多个列的 PRIMARY KEY 约束</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">(</span><br><span class="line">P_Id        <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">LastName    <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">FirstName   <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">Address     <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">City        <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="keyword">CONSTRAINT</span>  pk_PersonID PRIMARY <span class="keyword">KEY</span> (P_Id,LastName)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="实例2-更改表时的-PRIMARY-约束"><a href="#实例2-更改表时的-PRIMARY-约束" class="headerlink" title="实例2 更改表时的 PRIMARY 约束"></a>实例2 更改表时的 PRIMARY 约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">表Persons 已经被创建，需在 "P_Id" 列创建 PRIMARY KEY 约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">ADD</span> PRIMARY <span class="keyword">KEY</span> (P_Id);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">需要命名 PRIMARY KEY 约束，并定义多个列的 PRIMARY KEY 约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> pk_PersonID PRIMARY <span class="keyword">KEY</span> (P_Id,LastName);</span><br></pre></td></tr></table></figure><blockquote><p>注意事项：使用 ALTER TABLE 语句添加主键的时候，必须把主键列声明为不包含 NULL 值（在表首次创建时）。</p></blockquote><h3 id="实例3-撤销-PRIMARY-KEY-约束"><a href="#实例3-撤销-PRIMARY-KEY-约束" class="headerlink" title="实例3 撤销 PRIMARY KEY 约束"></a>实例3 撤销 PRIMARY KEY 约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> pk_PersonID;</span><br></pre></td></tr></table></figure><h2 id="FOREIGN-KEY-外键约束"><a href="#FOREIGN-KEY-外键约束" class="headerlink" title="FOREIGN KEY (外键约束)"></a>FOREIGN KEY (外键约束)</h2><h3 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h3><ul><li>一个表中的 FOREIGN KEY 指向另一个表中的 UNIQUE KEY。</li><li>FOREIGN KEY 约束用于预防破坏表之间连接的行为。</li><li>FOREIGN KEY 约束能防止非法数据插入外键列，因为它必须是它指向的那个表中的值之一。</li></ul><h3 id="实例1-创建表时的-FOREIGN-KEY-约束"><a href="#实例1-创建表时的-FOREIGN-KEY-约束" class="headerlink" title="实例1 创建表时的 FOREIGN KEY 约束"></a>实例1 创建表时的 FOREIGN KEY 约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">下面的 SQL 在 "Orders" 表创建时在 "P_Id" 列上创建 FOREIGN KEY 约束</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Orders</span><br><span class="line">(</span><br><span class="line">O_Id    <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">OrderNo <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">P_Id    <span class="built_in">int</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> <span class="keyword">REFERENCES</span> Persons(P_Id) <span class="comment">-- 外键定义 -- </span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">命名 FOREIGN KEY 约束，并定义多个列的 FOREIGN KEY 约束</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Orders</span><br><span class="line">(</span><br><span class="line">O_Id    <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">OrderNo <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">P_Id    <span class="built_in">int</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (O_Id),</span><br><span class="line"><span class="keyword">CONSTRAINT</span> fk_PerOrders <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (P_Id) <span class="keyword">REFERENCES</span> Persons(P_Id) </span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="实例2-修改表时的-FOREIGN-KEY-约束"><a href="#实例2-修改表时的-FOREIGN-KEY-约束" class="headerlink" title="实例2 修改表时的 FOREIGN KEY 约束"></a>实例2 修改表时的 FOREIGN KEY 约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">已经创建"Orders"表，如果需要在 "P_Id" 列创建 FOREIGN KEY 约束</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Orders</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (P_Id) <span class="keyword">REFERENCES</span> Persons(P_Id); <span class="comment">-- 外键定义 --</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">命名 FOREIGN KEY 约束，并定义多个列的 FOREIGN KEY 约束</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Orders</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_PerOrders <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (P_Id) <span class="keyword">REFERENCES</span> Persons(P_Id);</span><br></pre></td></tr></table></figure><h3 id="实例3-撤销-FOREIGN-KEY-约束"><a href="#实例3-撤销-FOREIGN-KEY-约束" class="headerlink" title="实例3 撤销 FOREIGN KEY 约束"></a>实例3 撤销 FOREIGN KEY 约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Orders</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> fk_PerOrders</span><br></pre></td></tr></table></figure><blockquote><p>在创建外键约束时，必须先创建外键约束所依赖的表，并且该列为该表的主键</p></blockquote><h2 id="notes："><a href="#notes：" class="headerlink" title="notes："></a>notes：</h2><ul><li><p>子表：谁创建外键谁就是子表</p></li><li><p>父表：这个外键所依赖的表</p></li></ul><h2 id="CHECK-约束"><a href="#CHECK-约束" class="headerlink" title="CHECK 约束"></a>CHECK 约束</h2><h3 id="介绍-5"><a href="#介绍-5" class="headerlink" title="介绍"></a>介绍</h3><p>CHECK 约束用于限制列中的值的范围。</p><p>如果对单个列定义CHECK约束，那么该列只允许存在特定的值。</p><p>如果对一个表定义CHECK约束，那么此约束会基于行中其他列的值在特定的列中对值进行限制。</p><h3 id="实例1-创建表时的-CHECK-约束"><a href="#实例1-创建表时的-CHECK-约束" class="headerlink" title="实例1 创建表时的 CHECK 约束"></a>实例1 创建表时的 CHECK 约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">要求： 创建"Persons" 时，在 "P_Id" 列上创建 <span class="keyword">CHECK</span> 约束。</span><br><span class="line"><span class="keyword">CHECK</span> 约束规定 <span class="string">"P_Id"</span> 列只能存在大于 <span class="number">0</span> 的整数。</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">(</span><br><span class="line">P_Id        <span class="built_in">int</span>             <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">CHECK</span> (P_Id &gt; <span class="number">0</span>), <span class="comment">-- check定义 --</span></span><br><span class="line">LastName    <span class="built_in">varchar</span>(<span class="number">255</span>)    <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">FirstName   <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">Address     <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">City        <span class="built_in">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">命名 <span class="keyword">CHECK</span> 约束，并定义多个列的 <span class="keyword">CHECK</span> 约束</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">(</span><br><span class="line">P_Id        <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">LastName    <span class="built_in">varchar</span>(<span class="number">255</span>)    <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">FirstName   <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">Address     <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">City        <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="keyword">CONSTRAINT</span>  chk_Person <span class="keyword">CHECK</span> (P_Id &gt; <span class="number">0</span> <span class="keyword">AND</span> City = <span class="string">'QingDao'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="实例2-修改表时的-CHECK-约束"><a href="#实例2-修改表时的-CHECK-约束" class="headerlink" title="实例2 修改表时的 CHECK 约束"></a>实例2 修改表时的 CHECK 约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Person表已创建，在 "P_Id" 列创建 <span class="keyword">CHECK</span> 约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CHECK</span> (P_Id &gt; <span class="number">0</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">命名 <span class="keyword">CHECK</span> 约束，并定义多个列的 <span class="keyword">CHECK</span> 约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CHECK</span> chk_Person <span class="keyword">CHECK</span> (P_Id &gt; <span class="number">0</span> <span class="keyword">AND</span> City = <span class="string">'Sandnes'</span>);</span><br></pre></td></tr></table></figure><h3 id="实例3-撤销-CHECK-约束"><a href="#实例3-撤销-CHECK-约束" class="headerlink" title="实例3 撤销 CHECK 约束"></a>实例3 撤销 CHECK 约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> chk_Person;</span><br></pre></td></tr></table></figure><h2 id="DEFAULT-约束"><a href="#DEFAULT-约束" class="headerlink" title="DEFAULT 约束"></a>DEFAULT 约束</h2><h3 id="介绍-6"><a href="#介绍-6" class="headerlink" title="介绍"></a>介绍</h3><p>DEFAULT 约束用于向列中插入默认值。如果没有规定其他的值，那么会将默认值添加到所有的新记录。</p><h3 id="实例1-创建表时的DEFAULT约束"><a href="#实例1-创建表时的DEFAULT约束" class="headerlink" title="实例1 创建表时的DEFAULT约束"></a>实例1 创建表时的DEFAULT约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">创建"Persons" 表时，在 "City" 列上创建 DEFAULT 约束</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">(</span><br><span class="line">    P_Id        <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    LastName    <span class="built_in">varchar</span>(<span class="number">255</span>)    <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    FirstName   <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    Address     <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    City        <span class="built_in">varchar</span>(<span class="number">255</span>)    <span class="keyword">DEFAULT</span> <span class="string">'QingDao'</span> <span class="comment">-- DEFAULT约束定义 -- </span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="实例2-创建表时的DEFAULT约束"><a href="#实例2-创建表时的DEFAULT约束" class="headerlink" title="实例2 创建表时的DEFAULT约束"></a>实例2 创建表时的DEFAULT约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Persons表已经被创建，在 "City" 列创建 DEFAULT 约束</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Person</span><br><span class="line"><span class="keyword">MODIFY</span> City <span class="keyword">DEFAULT</span> <span class="string">'QingDao'</span>;</span><br></pre></td></tr></table></figure><h3 id="实例3-创建表时的DEFAULT约束"><a href="#实例3-创建表时的DEFAULT约束" class="headerlink" title="实例3 创建表时的DEFAULT约束"></a>实例3 创建表时的DEFAULT约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> City <span class="keyword">DROP</span> <span class="keyword">DEFAULT</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;约束&quot;&gt;&lt;a href=&quot;#约束&quot; class=&quot;headerlink&quot; title=&quot;约束&quot;&gt;&lt;/a&gt;约束&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;SQL 约束用于规定表中的数据规则。&lt;/p&gt;
&lt;p&gt;如果存在违反约束的数据行为，行为会被约束终止。&lt;/p&gt;
&lt;p&gt;约束可以在创建表时规定（通过 CREATE TABLE 语句）；&lt;/p&gt;
&lt;p&gt;或者在表创建之后规定（通过 ALTER TABLE 语句）。&lt;/p&gt;
&lt;h2 id=&quot;语法（CREATE-TABLE-CONSTRAINT）&quot;&gt;&lt;a href=&quot;#语法（CREATE-TABLE-CONSTRAINT）&quot; class=&quot;headerlink&quot; title=&quot;语法（CREATE TABLE + CONSTRAINT）&quot;&gt;&lt;/a&gt;语法（CREATE TABLE + CONSTRAINT）&lt;/h2&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; table_name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;column_name1 data_type(&lt;span class=&quot;keyword&quot;&gt;size&lt;/span&gt;) constraint_name,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;column_name2 data_type(&lt;span class=&quot;keyword&quot;&gt;size&lt;/span&gt;) constraint_name,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;column_name3 data_type(&lt;span class=&quot;keyword&quot;&gt;size&lt;/span&gt;) constraint_name,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;....&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="SQL" scheme="https://flower48237.com/categories/SQL/"/>
    
    
    <category term="SQL" scheme="https://flower48237.com/tags/SQL/"/>
    
    <category term="操作符" scheme="https://flower48237.com/tags/%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>SQL学习：SELECT INTO、INSERT INTO SELECT、CREATE DATABASE、CREATE TABLE</title>
    <link href="https://flower48237.com/2020/07/29/sql%E5%AD%A6%E4%B9%A00729-SELECT%20INTO%E3%80%81INSERT%20INTO%20SELECT%E3%80%81CREATE%20DATABASE%E3%80%81CREATE%20TABLE/"/>
    <id>https://flower48237.com/2020/07/29/sql%E5%AD%A6%E4%B9%A00729-SELECT%20INTO%E3%80%81INSERT%20INTO%20SELECT%E3%80%81CREATE%20DATABASE%E3%80%81CREATE%20TABLE/</id>
    <published>2020-07-29T10:02:00.000Z</published>
    <updated>2021-06-02T14:21:50.387Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SELECT-INTO"><a href="#SELECT-INTO" class="headerlink" title="SELECT INTO"></a>SELECT INTO</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>可以从一个表复制数据，然后把数据插入到另一个新表中。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * </span><br><span class="line"><span class="keyword">INTO</span> table2 [<span class="keyword">IN</span> externable]</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>　column_name(s)</span><br><span class="line"><span class="keyword">INTO</span> table2 [<span class="keyword">IN</span> externaldb]</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="实例1-创建website-表的备份"><a href="#实例1-创建website-表的备份" class="headerlink" title="实例1 创建website 表的备份"></a>实例1 创建website 表的备份</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">INTO</span> WebsitesBackup2020</span><br><span class="line"><span class="keyword">FROM</span> Websites</span><br></pre></td></tr></table></figure><h2 id="实例2-只复制一些列插入到新表中"><a href="#实例2-只复制一些列插入到新表中" class="headerlink" title="实例2 只复制一些列插入到新表中"></a>实例2 只复制一些列插入到新表中</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>, <span class="keyword">url</span></span><br><span class="line"><span class="keyword">INTO</span> WebsitesBackup2020</span><br><span class="line"><span class="keyword">FROM</span> Websites;</span><br></pre></td></tr></table></figure><h2 id="实例3-只复制中国的网站插入到新表中"><a href="#实例3-只复制中国的网站插入到新表中" class="headerlink" title="实例3 只复制中国的网站插入到新表中"></a>实例3 只复制中国的网站插入到新表中</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">INTO</span> WebsitesBackup2020</span><br><span class="line"><span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">WHERE</span> country = <span class="string">'China'</span>;</span><br></pre></td></tr></table></figure><h2 id="实例4-复制多个表中的数据插入到新表中"><a href="#实例4-复制多个表中的数据插入到新表中" class="headerlink" title="实例4 复制多个表中的数据插入到新表中"></a>实例4 复制多个表中的数据插入到新表中</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Websites.name, access_log.count, access_log.date</span><br><span class="line"><span class="keyword">INTO</span> WebsitesBackup2020</span><br><span class="line"><span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> access_log</span><br><span class="line"><span class="keyword">ON</span> Websites.id=access_log.site_id;</span><br></pre></td></tr></table></figure><h1 id="INSERT-INTO-SELECT"><a href="#INSERT-INTO-SELECT" class="headerlink" title="INSERT INTO SELECT"></a>INSERT INTO SELECT</h1><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><p>可以从一个表复制数据，然后把数据插入到一个已存在的表中。目标表中任何已存在的行都不会受影响。</p><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">可以从一个表中复制 所有的列 插入到另一个已存在的表中</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table2</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table1;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">可以从一个表中复制 特定的列 插入到另一个已存在的表中</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table2 (column_name(s))</span><br><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table1;</span><br></pre></td></tr></table></figure><h2 id="实例1-复制APP中的数据插入到Websites中"><a href="#实例1-复制APP中的数据插入到Websites中" class="headerlink" title="实例1 复制APP中的数据插入到Websites中"></a>实例1 复制APP中的数据插入到Websites中</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Websites (<span class="keyword">name</span>, country)</span><br><span class="line"><span class="keyword">SELECT</span> app_name, country <span class="keyword">FROM</span> apps;</span><br></pre></td></tr></table></figure><h2 id="实例2-复制-id-是-1-的-APP-到-“Websites”-中"><a href="#实例2-复制-id-是-1-的-APP-到-“Websites”-中" class="headerlink" title="实例2 复制 id 是 1 的 APP 到 “Websites” 中"></a>实例2 复制 id 是 1 的 APP 到 “Websites” 中</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Websites (<span class="keyword">name</span>, country)</span><br><span class="line"><span class="keyword">SELECT</span> app_name, country <span class="keyword">FROM</span> apps</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="note"><a href="#note" class="headerlink" title="note"></a>note</h2><p>select into from 和 insert into select 都是用来复制表</p><p>两者的主要区别为： </p><ul><li>select into from 要求目标表不存在，因为在插入时会自动创建；</li><li>insert into select from 要求目标表存在。</li></ul><h1 id="Create-Database"><a href="#Create-Database" class="headerlink" title="Create Database"></a>Create Database</h1><h2 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h2><p>创建数据库</p><h2 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h2><p>CREATE DATABASE database_name;</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>CREATE DATABASE Store;</p><h1 id="Create-Table"><a href="#Create-Table" class="headerlink" title="Create Table"></a>Create Table</h1><h2 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h2><p>创建表</p><h2 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line">(</span><br><span class="line">column_name1 data_type(<span class="keyword">size</span>),</span><br><span class="line">column_name2 data_type(<span class="keyword">size</span>),</span><br><span class="line">column_name3 data_type(<span class="keyword">size</span>),</span><br><span class="line">....</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">Store</span></span><br><span class="line">(</span><br><span class="line">gools_id    <span class="built_in">int</span>,</span><br><span class="line">goods_name  <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">goods_country <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">goods_price <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;SELECT-INTO&quot;&gt;&lt;a href=&quot;#SELECT-INTO&quot; class=&quot;headerlink&quot; title=&quot;SELECT INTO&quot;&gt;&lt;/a&gt;SELECT INTO&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;可以从一个表复制数据，然后把数据插入到另一个新表中。&lt;/p&gt;
&lt;h2 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h2&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; * &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;INTO&lt;/span&gt; table2 [&lt;span class=&quot;keyword&quot;&gt;IN&lt;/span&gt; externable]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; table1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;　column_name(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;INTO&lt;/span&gt; table2 [&lt;span class=&quot;keyword&quot;&gt;IN&lt;/span&gt; externaldb]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; table1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="SQL" scheme="https://flower48237.com/categories/SQL/"/>
    
    
    <category term="SQL" scheme="https://flower48237.com/tags/SQL/"/>
    
    <category term="操作符" scheme="https://flower48237.com/tags/%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>SQL学习：增删改查</title>
    <link href="https://flower48237.com/2020/07/29/sql%E5%AD%A6%E4%B9%A00722-%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    <id>https://flower48237.com/2020/07/29/sql%E5%AD%A6%E4%B9%A00722-%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</id>
    <published>2020-07-29T10:02:00.000Z</published>
    <updated>2021-06-02T14:22:01.656Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>SELECT 语句用于从数据库中选取数据。</li><li>结果被存储在一个结果表中，称为结果集。<a id="more"></a><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name,column_name</span><br><span class="line">FROM table_name;</span><br></pre></td></tr></table></figure></li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT name,country FROM Store;</span><br></pre></td></tr></table></figure><h1 id="SELECT-DISTINCT"><a href="#SELECT-DISTINCT" class="headerlink" title="SELECT DISTINCT"></a>SELECT DISTINCT</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><ul><li>在表中，一个列可能会包含多个重复值，有时也许希望仅仅列出不同（distinct）的值。</li><li>DISTINCT 关键词用于返回唯一不同的值。</li></ul><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT column_name,column_name</span><br><span class="line">FROM table_name;</span><br></pre></td></tr></table></figure><h1 id="WHERE"><a href="#WHERE" class="headerlink" title="WHERE"></a>WHERE</h1><ul><li>WHERE 子句用于过滤记录。</li><li>用于提取满足指定条件的记录。</li></ul><h2 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name,column_name</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE column_name operator value;</span><br></pre></td></tr></table></figure><h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Store WHERE country&#x3D;&#39;China&#39;;</span><br></pre></td></tr></table></figure><h2 id="SQL-中的opreator运算符"><a href="#SQL-中的opreator运算符" class="headerlink" title="SQL 中的opreator运算符"></a>SQL 中的opreator运算符</h2><table><thead><tr><th>运算符</th><th>含义</th></tr></thead><tbody><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt; or !=</td><td>不等于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>等于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>is null</td><td>空值</td></tr><tr><td>BETWEEN</td><td>在某个范围内</td></tr><tr><td>LIKE</td><td>搜索某种模式</td></tr><tr><td>IN</td><td>指定针对某个列的多个可能值</td></tr><tr><td><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">examples:</span><br><span class="line"></span><br><span class="line">Select * from emp where comm is null;</span><br><span class="line">Select * from emp where sal between 1500 and 3000;</span><br><span class="line">Select * from emp where sal in (5000,3000,1500);</span><br><span class="line">Select * from emp where ename like &#39;M%&#39;;</span><br><span class="line">查询 EMP 表中 Ename 列中有 M 的值，M 为要查询内容中的模糊信息。</span><br><span class="line">% 表示多个字值，_ 下划线表示一个字符；</span><br><span class="line">M% : 为能配符，正则表达式，表示的意思为模糊查询信息为 M 开头的。</span><br><span class="line">%M% : 表示查询包含M的所有内容。</span><br><span class="line">%M_ : 表示查询以M在倒数第二位的所有内容。</span><br></pre></td></tr></table></figure></td><td></td></tr><tr><td>## 补充</td><td></td></tr><tr><td>+ SQL 使用单引号来环绕文本值。</td><td></td></tr><tr><td>+ 如果是数值字段，不能使用引号。</td><td></td></tr></tbody></table><h1 id="AND-和-OR-运算符"><a href="#AND-和-OR-运算符" class="headerlink" title="AND 和 OR 运算符"></a>AND 和 OR 运算符</h1><h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><p>AND 和 OR 运算符用于基于一个以上条件对记录进行过滤。</p><h2 id="AND"><a href="#AND" class="headerlink" title="AND"></a>AND</h2><p>如果第一个条件和第二个条件都成立，则 AND 运算符显示一条记录。</p><h2 id="OR-运算符"><a href="#OR-运算符" class="headerlink" title="OR 运算符"></a>OR 运算符</h2><p>如果第一个条件和第二个条件中只要有一个成立，则 OR 运算符显示一条记录。</p><h2 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">只用AND：</span><br><span class="line">SELECT * FROM Store</span><br><span class="line">WHERE country&#x3D;&#39;China&#39;</span><br><span class="line">AND price &gt; 50;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">只用OR：</span><br><span class="line">SELECT * FROM Store</span><br><span class="line">WHERE country&#x3D;&#39;China&#39;</span><br><span class="line">OR country&#x3D;&#39;Serbia&#39;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">混合使用AND和OR：</span><br><span class="line">SELECT * FROM Store</span><br><span class="line">WHERE price &gt; 15</span><br><span class="line">AND (country&#x3D;&#39;China&#39; OR country&#x3D;&#39;Serbia&#39;);</span><br></pre></td></tr></table></figure><h1 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h1><h2 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h2><p>用于对结果集按照一个列或者多个列进行排序。<br>默认按照升序，使用DESC关键词可以实现降序。</p><h2 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name,column_name</span><br><span class="line">FROM table_name</span><br><span class="line">ORDER BY column_name1, column_name2 ASC|DESC;</span><br></pre></td></tr></table></figure><p>按照多个列名的顺序来一步步进行排序，如上述例子中，先按照column _ name1进行排序得到若干小组，然后在这些小组中按照column _ name2进行排序。得到最终的结果</p><h1 id="INSERT-INTO"><a href="#INSERT-INTO" class="headerlink" title="INSERT INTO"></a>INSERT INTO</h1><h2 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h2><p>用于向表中插入记录</p><h2 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.不指定要插入数据的列名，只需提供被插入的值即可，此时需要列出新一行的每一列数据：</span><br><span class="line">INSERT INTO table_name</span><br><span class="line">VALUES (value1,value2,value3,...);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2.指定列名及被插入的值：</span><br><span class="line">INSERT INTO table_name (column1,column2,column3,...)</span><br><span class="line">VALUES (value1,value2,value3,...);</span><br></pre></td></tr></table></figure><h2 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO Store (name, url, price, country)</span><br><span class="line">VALUES (&#39;RY&#39;,&#39;https:&#x2F;&#x2F;www.baidu.com&#x2F;&#39;,&#39;520&#39;,&#39;China&#39;);</span><br></pre></td></tr></table></figure><h1 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h1><h2 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h2><p>用于更新表中已经存在的记录</p><h2 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE table_name </span><br><span class="line">SET column1 &#x3D; value1, column2 &#x3D; value2,……</span><br><span class="line">WHERE some_column_name &#x3D; some_concrete_value;</span><br></pre></td></tr></table></figure><h2 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE Store </span><br><span class="line">SET price&#x3D;&#39;500&#39;, country&#x3D;&#39;CHINA&#39; </span><br><span class="line">WHERE name&#x3D;&#39;拓展坞&#39;;</span><br></pre></td></tr></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>慎重执行没有 WHERE 子句的 UPDATE，不然很肯将表中所有数据都按照SET（或其他关键词）的内容给修改掉。</p><h1 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h1><h2 id="简介-6"><a href="#简介-6" class="headerlink" title="简介"></a>简介</h2><p>用于删除表中的行（记录）</p><h2 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM table_name</span><br><span class="line">WHERE some_column_name &#x3D; some_concrete_value;</span><br></pre></td></tr></table></figure><h2 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM Store</span><br><span class="line">WHERE name&#x3D;&#39;笔记本&#39; AND price&#x3D;&#39;4999&#39;;</span><br></pre></td></tr></table></figure><h2 id="补充-1"><a href="#补充-1" class="headerlink" title="补充"></a>补充</h2><p>管理员可以在不删除表的情况下，删除表中所有的行。这意味着表结构、属性、索引将保持不变：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM table_name;</span><br><span class="line">或者</span><br><span class="line">DELETE * FROM table_name;</span><br></pre></td></tr></table></figure><p>但是在删除记录时要小心，因为无法撤销操作。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;SELECT&quot;&gt;&lt;a href=&quot;#SELECT&quot; class=&quot;headerlink&quot; title=&quot;SELECT&quot;&gt;&lt;/a&gt;SELECT&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;SELECT 语句用于从数据库中选取数据。&lt;/li&gt;
&lt;li&gt;结果被存储在一个结果表中，称为结果集。</summary>
    
    
    
    <category term="SQL" scheme="https://flower48237.com/categories/SQL/"/>
    
    
    <category term="SQL" scheme="https://flower48237.com/tags/SQL/"/>
    
    <category term="基础" scheme="https://flower48237.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>SQL学习：JOIN 操作符</title>
    <link href="https://flower48237.com/2020/07/28/sql%E5%AD%A6%E4%B9%A00728-JOIN%EF%BC%88INNER%20JOIN%E3%80%81LEFT%20JOIN%E3%80%81RIGHT%20JOIN%E3%80%81FULL%20OUTER%20JOIN%EF%BC%89/"/>
    <id>https://flower48237.com/2020/07/28/sql%E5%AD%A6%E4%B9%A00728-JOIN%EF%BC%88INNER%20JOIN%E3%80%81LEFT%20JOIN%E3%80%81RIGHT%20JOIN%E3%80%81FULL%20OUTER%20JOIN%EF%BC%89/</id>
    <published>2020-07-28T10:02:00.000Z</published>
    <updated>2021-06-02T14:20:49.334Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JOIN（连接）"><a href="#JOIN（连接）" class="headerlink" title="JOIN（连接）"></a>JOIN（连接）</h1><h2 id="总介绍"><a href="#总介绍" class="headerlink" title="总介绍"></a>总介绍</h2><p>把两个或多个表的行连接起来<br>有左连接，右连接，全连接，内连接，外连接等七个</p><h2 id="不同的-JOIN"><a href="#不同的-JOIN" class="headerlink" title="不同的 JOIN"></a>不同的 JOIN</h2><ul><li>INNER JOIN：如果表中有至少一个匹配，则返回行</li><li>LEFT JOIN：即使右表中没有匹配，也从左表返回所有的行</li><li>RIGHT JOIN：即使左表中没有匹配，也从右表返回所有的行</li><li>FULL JOIN：只要其中一个表中存在匹配，则返回行</li></ul><blockquote><p>连接的结果可以在逻辑上看作是由SELECT语句指定的列组成的新表。</p></blockquote><blockquote><p>左连接与右连接的左右指的是以两张表中的哪一张为基准，它们都是外连接。</p></blockquote><blockquote><p>外连接就好像是为非基准表添加了一行全为空值的万能行，用来与基准表中找不到匹配的行进行匹配。假设两个没有空值的表进行左连接，左表是基准表，左表的所有行都出现在结果中，右表则可能因为无法与基准表匹配而出现是空值的字段。<br>这部分主要涉及的是表连接的逻辑问题。</p></blockquote><a id="more"></a><h2 id="INNER-JOIN（简单的-JOIN）-最常见的-JOIN-类型"><a href="#INNER-JOIN（简单的-JOIN）-最常见的-JOIN-类型" class="headerlink" title="INNER JOIN（简单的 JOIN） 最常见的 JOIN 类型"></a>INNER JOIN（简单的 JOIN） 最常见的 JOIN 类型</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>INNER JOIN 关键字在表中存在至少一个匹配时返回行。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.column_name=table2.column_name;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.column_name=table2.column_name;</span><br></pre></td></tr></table></figure><blockquote><p>note:</p></blockquote><p>INNER JOIN 与 JOIN 是相同的<br>INNER JOIN 关键字在表中存在至少一个匹配时返回行。<br>如果 “table1” 表中的行在 “table2” 中没有匹配，则不会列出这些行。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Websites.name, access_log.count, access_log.date</span><br><span class="line"><span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> access_log</span><br><span class="line"><span class="keyword">ON</span> Websites.id=access_log.site_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> access_log.count;</span><br></pre></td></tr></table></figure><h3 id="在使用-join-时，on-和-where-条件的区别如下："><a href="#在使用-join-时，on-和-where-条件的区别如下：" class="headerlink" title="在使用 join 时，on 和 where 条件的区别如下："></a>在使用 join 时，on 和 where 条件的区别如下：</h3><ul><li>1.on 条件是在生成临时表时使用的条件，它不管 on 中的条件是否为真，都会返回左边表中的记录。</li><li>2.where 条件是在临时表生成好后，再对临时表进行过滤的条件。这时已经没有 left join 的含义（必须返回左边表的记录）了，条件不为真的就全部过滤掉。</li></ul><h2 id="LEFT-JOIN-左连接"><a href="#LEFT-JOIN-左连接" class="headerlink" title="LEFT JOIN(左连接)"></a>LEFT JOIN(左连接)</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>LEFT JOIN 关键字从左表（table1）返回所有的行，即使右表（table2）中没有匹配。如果右表中没有匹配，则结果为 NULL。</p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.column_name=table2.column_name;</span><br></pre></td></tr></table></figure><p>或：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.column_name=table2.column_name;</span><br></pre></td></tr></table></figure><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Websites.name, access_log.count, access_log.date</span><br><span class="line"><span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> access_log</span><br><span class="line"><span class="keyword">ON</span> Websites.id=access_log.site_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> access_log.count <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h2 id="RIGHT-JOIN-右连接"><a href="#RIGHT-JOIN-右连接" class="headerlink" title="RIGHT JOIN(右连接)"></a>RIGHT JOIN(右连接)</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><p>RIGHT JOIN 关键字从右表（table2）返回所有的行，即使左表（table1）中没有匹配。如果左表中没有匹配，则结果为 NULL。</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.column_name=table2.column_name;</span><br></pre></td></tr></table></figure><p>或：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.column_name=table2.column_name;</span><br></pre></td></tr></table></figure><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Websites.name, access_log.count, access_log.date</span><br><span class="line"><span class="keyword">FROM</span> access_log</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> Websites</span><br><span class="line"><span class="keyword">ON</span> access_log.site_id=Websites.id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> access_log.count <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h2 id="FULL-OUTER-JOIN-全外连接"><a href="#FULL-OUTER-JOIN-全外连接" class="headerlink" title="FULL OUTER JOIN(全外连接)"></a>FULL OUTER JOIN(全外连接)</h2><h3 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h3><p>FULL OUTER JOIN 关键字只要左表（table1）和右表（table2）其中一个表中存在匹配，则返回行.<br>简言之：FULL OUTER JOIN 关键字结合了 LEFT JOIN 和 RIGHT JOIN 的结果。</p><h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.column_name=table2.column_name;</span><br></pre></td></tr></table></figure><h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Websites.name, access_log.count, access_log.date</span><br><span class="line"><span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> access_log</span><br><span class="line"><span class="keyword">ON</span> Websites.id=access_log.site_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> access_log.count <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><blockquote><p>note：FULL OUTER JOIN 关键字返回左表（Websites）和右表（access_log）中所有的行。如果 “Websites” 表中的行在 “access_log” 中没有匹配或者 “access_log” 表中的行在 “Websites” 表中没有匹配，也会列出这些行。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;JOIN（连接）&quot;&gt;&lt;a href=&quot;#JOIN（连接）&quot; class=&quot;headerlink&quot; title=&quot;JOIN（连接）&quot;&gt;&lt;/a&gt;JOIN（连接）&lt;/h1&gt;&lt;h2 id=&quot;总介绍&quot;&gt;&lt;a href=&quot;#总介绍&quot; class=&quot;headerlink&quot; title=&quot;总介绍&quot;&gt;&lt;/a&gt;总介绍&lt;/h2&gt;&lt;p&gt;把两个或多个表的行连接起来&lt;br&gt;有左连接，右连接，全连接，内连接，外连接等七个&lt;/p&gt;
&lt;h2 id=&quot;不同的-JOIN&quot;&gt;&lt;a href=&quot;#不同的-JOIN&quot; class=&quot;headerlink&quot; title=&quot;不同的 JOIN&quot;&gt;&lt;/a&gt;不同的 JOIN&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;INNER JOIN：如果表中有至少一个匹配，则返回行&lt;/li&gt;
&lt;li&gt;LEFT JOIN：即使右表中没有匹配，也从左表返回所有的行&lt;/li&gt;
&lt;li&gt;RIGHT JOIN：即使左表中没有匹配，也从右表返回所有的行&lt;/li&gt;
&lt;li&gt;FULL JOIN：只要其中一个表中存在匹配，则返回行&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;连接的结果可以在逻辑上看作是由SELECT语句指定的列组成的新表。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;左连接与右连接的左右指的是以两张表中的哪一张为基准，它们都是外连接。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;外连接就好像是为非基准表添加了一行全为空值的万能行，用来与基准表中找不到匹配的行进行匹配。假设两个没有空值的表进行左连接，左表是基准表，左表的所有行都出现在结果中，右表则可能因为无法与基准表匹配而出现是空值的字段。&lt;br&gt;这部分主要涉及的是表连接的逻辑问题。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="SQL" scheme="https://flower48237.com/categories/SQL/"/>
    
    
    <category term="SQL" scheme="https://flower48237.com/tags/SQL/"/>
    
    <category term="操作符" scheme="https://flower48237.com/tags/%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>SQL学习：BETWEEN、AS、UNION 操作符</title>
    <link href="https://flower48237.com/2020/07/27/sql%E5%AD%A6%E4%B9%A00727-BETWEEN%E3%80%81AS%E3%80%81UNION/"/>
    <id>https://flower48237.com/2020/07/27/sql%E5%AD%A6%E4%B9%A00727-BETWEEN%E3%80%81AS%E3%80%81UNION/</id>
    <published>2020-07-27T10:02:00.000Z</published>
    <updated>2021-06-02T14:20:53.831Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="BETWEEN-操作符"><a href="#BETWEEN-操作符" class="headerlink" title="BETWEEN 操作符"></a>BETWEEN 操作符</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>sql操作符用于选取介于两个值之间的数据范围内的值。<br>这些值可以是数值、文本或者日期。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name </span><br><span class="line"><span class="keyword">WHERE</span> column_name <span class="keyword">BETWEEN</span> value1 <span class="keyword">AND</span> value2;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="实例1-BRTWEEN"><a href="#实例1-BRTWEEN" class="headerlink" title="实例1 BRTWEEN"></a>实例1 BRTWEEN</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">下面的 SQL 语句选取 价格（price） 介于 1 和 20 之间的所有商品</span><br><span class="line"><span class="keyword">SELECT</span> * </span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">Store</span> </span><br><span class="line"><span class="keyword">WHERE</span> price <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">49</span>;</span><br></pre></td></tr></table></figure><h2 id="实例2-NOT-BETWEEN"><a href="#实例2-NOT-BETWEEN" class="headerlink" title="实例2 NOT BETWEEN"></a>实例2 NOT BETWEEN</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">下面的 SQL 语句选取 价格（price） 不在 1 和 20 之间的所有商品</span><br><span class="line"><span class="keyword">SELECT</span> * </span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">Store</span> </span><br><span class="line"><span class="keyword">WHERE</span> price <span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">49</span>;</span><br></pre></td></tr></table></figure><h2 id="实例3-混合使用"><a href="#实例3-混合使用" class="headerlink" title="实例3 混合使用"></a>实例3 混合使用</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">下面的SQL语句选取价格peice在1 和 20 之间并且产地country不是中国也不是印度的所有商品</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">Store</span></span><br><span class="line"><span class="keyword">WHERE</span> (price <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">20</span>)</span><br><span class="line"><span class="keyword">AND</span> country <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">'China'</span>, <span class="string">'India'</span>);</span><br></pre></td></tr></table></figure><h2 id="带有文本值的-BETWEEN-操作符实例"><a href="#带有文本值的-BETWEEN-操作符实例" class="headerlink" title="带有文本值的 BETWEEN 操作符实例"></a>带有文本值的 BETWEEN 操作符实例</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">下面的 SQL 语句选取 name 以介于 'A' 和 'H' 之间字母作为起始字母的所有商品</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">Store</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">name</span> <span class="keyword">BETWEEN</span> <span class="string">'A'</span> <span class="keyword">AND</span> <span class="string">'H'</span>;</span><br></pre></td></tr></table></figure><h2 id="带有日期值的-BETWEEN-操作符实例"><a href="#带有日期值的-BETWEEN-操作符实例" class="headerlink" title="带有日期值的 BETWEEN 操作符实例"></a>带有日期值的 BETWEEN 操作符实例</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">下面的 SQL 语句选取 入库日期 介于 '2020-07-08' 和 '2020-07-27' 之间的所有商品</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">Store</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="built_in">date</span> <span class="keyword">BETWEEN</span> <span class="string">'2020-07-08'</span> <span class="keyword">AND</span> <span class="string">'2020-07-27'</span>;</span><br></pre></td></tr></table></figure><h1 id="AS（别名）"><a href="#AS（别名）" class="headerlink" title="AS（别名）"></a>AS（别名）</h1><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><p>通过使用AS，可以为表名称或列名称指定别名。使用别名是为了增强列名的可读性。</p><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><h3 id="表名："><a href="#表名：" class="headerlink" title="表名："></a>表名：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name <span class="keyword">AS</span> alias_name;</span><br></pre></td></tr></table></figure><h3 id="列名"><a href="#列名" class="headerlink" title="列名"></a>列名</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name <span class="keyword">AS</span> alias_name</span><br><span class="line"><span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure><blockquote><p>note:如果列名称包含空格，要求使用双引号或方括号</p></blockquote><h2 id="表的别名实例1"><a href="#表的别名实例1" class="headerlink" title="表的别名实例1"></a>表的别名实例1</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">下面的 SQL 语句选取 "电子商城" 的所访问记录。我们使用 "Store" 和 "access_log" 表，并分别为它们指定表别名 "s" 和 "a"</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> s.name, s.url, a.count, a.date</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">Store</span> <span class="keyword">AS</span> s, access_log <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">WHERE</span> a.site_id=s.id <span class="keyword">and</span> s.name=<span class="string">"牛轧糖"</span>;</span><br><span class="line"></span><br><span class="line">通过使用别名，可以使 SQL 语句更简短</span><br><span class="line"></span><br><span class="line">对比：</span><br><span class="line">不带别名的相同的 SQL 语句</span><br><span class="line"><span class="keyword">SELECT</span> Websites.name, Websites.url, access_log.count, access_log.date</span><br><span class="line"><span class="keyword">FROM</span> Websites, access_log</span><br><span class="line"><span class="keyword">WHERE</span> Websites.id=access_log.site_id <span class="keyword">and</span> Websites.name=<span class="string">"牛轧糖"</span>;</span><br></pre></td></tr></table></figure><h2 id="列的别名实例1"><a href="#列的别名实例1" class="headerlink" title="列的别名实例1"></a>列的别名实例1</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">下面的 SQL 语句指定了两个别名，一个是 name 列的别名 n，一个是 proce 列的别名p</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">AS</span> n, price <span class="keyword">AS</span> p</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">store</span>;</span><br></pre></td></tr></table></figure><h2 id="列的别名实例2"><a href="#列的别名实例2" class="headerlink" title="列的别名实例2"></a>列的别名实例2</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在下面的 SQL 语句中，把三个列（购买链接url、价格price 和 产地country）结合在一起，并创建一个名为 "gools_info" 的别名</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>, <span class="keyword">CONCAT</span>(<span class="keyword">url</span>, <span class="string">', '</span>, price, <span class="string">', '</span>, country) <span class="keyword">AS</span> site_info</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">Store</span>;</span><br></pre></td></tr></table></figure><h2 id="在下面的情况下，使用别名很有用："><a href="#在下面的情况下，使用别名很有用：" class="headerlink" title="在下面的情况下，使用别名很有用："></a>在下面的情况下，使用别名很有用：</h2><ul><li>在查询中涉及超过一个表</li><li>在查询中使用了函数</li><li>列名称很长或者可读性差</li><li>需要把两个列或者多个列结合在一起</li></ul><h1 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a>UNION</h1><h2 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h2><p>用于合并两个或多个SELECT 语句的结果集。</p><p>UNION 内部的每个 SELECT语句必须拥有相同数量的列。<br>列也必须拥有相似的数据类型。<br>同时，每个 SELECT 语句中的列的顺序必须相同。</p><h2 id="语法-UNION"><a href="#语法-UNION" class="headerlink" title="语法(UNION)"></a>语法(UNION)</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s) <span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> column_name(s) <span class="keyword">FROM</span> table2;</span><br></pre></td></tr></table></figure><p>注释：UNION 操作符默认选取不同的值。如果允许重复的值，需要使用 UNION ALL。</p><h2 id="语法-UNION-ALL"><a href="#语法-UNION-ALL" class="headerlink" title="语法(UNION ALL)"></a>语法(UNION ALL)</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s) <span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> column_name(s) <span class="keyword">FROM</span> table2;</span><br><span class="line">注释：UNION 结果集中的列名总是等于 UNION 中第一个 <span class="keyword">SELECT</span> 语句中的列名。</span><br></pre></td></tr></table></figure><h2 id="实例-UNION"><a href="#实例-UNION" class="headerlink" title="实例(UNION)"></a>实例(UNION)</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> country <span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> country <span class="keyword">FROM</span> apps</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> country;</span><br></pre></td></tr></table></figure><h2 id="实例-UNION-ALL"><a href="#实例-UNION-ALL" class="headerlink" title="实例(UNION ALL)"></a>实例(UNION ALL)</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> country <span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> country <span class="keyword">FROM</span> apps</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> country;</span><br><span class="line">注释：UNION ALL可以筛选出重复的值</span><br></pre></td></tr></table></figure><h2 id="实例-带有-WHERE-的-SQL-UNION-ALL"><a href="#实例-带有-WHERE-的-SQL-UNION-ALL" class="headerlink" title="实例(带有 WHERE 的 SQL UNION ALL)"></a>实例(带有 WHERE 的 SQL UNION ALL)</h2><p>下面的 SQL 语句使用 UNION ALL 从 “Websites” 和 “apps” 表中选取所有的中国(CN)的数据（包含重复的值）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> country, <span class="keyword">name</span> <span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">WHERE</span> country=<span class="string">'China'</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> country, app_name <span class="keyword">FROM</span> apps</span><br><span class="line"><span class="keyword">WHERE</span> country=<span class="string">'China'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> country;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;BETWEEN-操作符&quot;&gt;&lt;a href=&quot;#BETWEEN-操作符&quot; class=&quot;headerlink&quot; title=&quot;BETWEEN 操作符&quot;&gt;&lt;/a&gt;BETWEEN 操作符&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;sql操作符用于选取介于两个值之间的数据范围内的值。&lt;br&gt;这些值可以是数值、文本或者日期。&lt;/p&gt;
&lt;h2 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h2&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; column_name(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; table_name &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; column_name &lt;span class=&quot;keyword&quot;&gt;BETWEEN&lt;/span&gt; value1 &lt;span class=&quot;keyword&quot;&gt;AND&lt;/span&gt; value2;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="SQL" scheme="https://flower48237.com/categories/SQL/"/>
    
    
    <category term="SQL" scheme="https://flower48237.com/tags/SQL/"/>
    
    <category term="操作符" scheme="https://flower48237.com/tags/%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>SQL学习：SELECT TOP, LIMIT, ROWNUM 子句、LIKE、IN</title>
    <link href="https://flower48237.com/2020/07/24/sql%E5%AD%A6%E4%B9%A00724-SELECT%20TOP,%20LIMIT,%20ROWNUM%20%E5%AD%90%E5%8F%A5%E3%80%81LIKE%E3%80%81IN/"/>
    <id>https://flower48237.com/2020/07/24/sql%E5%AD%A6%E4%B9%A00724-SELECT%20TOP,%20LIMIT,%20ROWNUM%20%E5%AD%90%E5%8F%A5%E3%80%81LIKE%E3%80%81IN/</id>
    <published>2020-07-24T10:02:00.000Z</published>
    <updated>2021-06-02T14:23:37.429Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SELECT-TOP-LIMIT-ROWNUM-子句"><a href="#SELECT-TOP-LIMIT-ROWNUM-子句" class="headerlink" title="SELECT TOP, LIMIT, ROWNUM 子句"></a>SELECT TOP, LIMIT, ROWNUM 子句</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>SELECT TOP 子句用于规定要返回的记录的数目。</p><p>SELECT TOP 子句对于拥有数千条记录的大型表来说，是非常有用的。<br>** notes **:<br>不是所有的数据库系统都支持 SELECT TOP 语句。<br>MySQL 支持 LIMIT 语句来选取指定的条数数据， Oracle 可以使用 ROWNUM 来选取。</p><a id="more"></a><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">ROWNUM</span> &lt;= <span class="built_in">number</span>;</span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * </span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">Store</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">ROWNUM</span> &lt;= <span class="number">5</span>;</span><br></pre></td></tr></table></figure><h1 id="SQL-通配符"><a href="#SQL-通配符" class="headerlink" title="SQL 通配符"></a>SQL 通配符</h1><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><p>通配符可以用于替代字符串中的任何其他字符。</p><p>在SQL中，通配符与SQL LIKE操作符一起使用。<br>SQL通配符用于搜索表中的数据</p><h2 id="在SQL中，可以使用以下通配符"><a href="#在SQL中，可以使用以下通配符" class="headerlink" title="在SQL中，可以使用以下通配符"></a>在SQL中，可以使用以下通配符</h2><table><thead><tr><th>通配符</th><th>含义</th></tr></thead><tbody><tr><td>%</td><td>替代0个或者多个字符</td></tr><tr><td>_</td><td>替代一个字符</td></tr><tr><td>[charlist]</td><td>字符中的任何单一字符</td></tr><tr><td>[^charlist] 或 [!charlist]</td><td>不在字符列中的任何单一字符</td></tr></tbody></table><h2 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">Store</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">url</span> <span class="keyword">LIKE</span> <span class="string">'https%'</span></span><br><span class="line">该<span class="keyword">SQL</span> 语句选取 <span class="keyword">url</span> 以字母 <span class="string">"https"</span> 开始的所有商品。</span><br></pre></td></tr></table></figure><h2 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%</span><br><span class="line">SELECT * FROM Store</span><br><span class="line">WHERE url LIKE &#39;%oo%&#39;</span><br><span class="line">该SQL 语句选取 url 包含模式 &quot;oo&quot; 的所有商品。</span><br></pre></td></tr></table></figure><h2 id="实例3"><a href="#实例3" class="headerlink" title="实例3"></a>实例3</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">Store</span></span><br><span class="line"><span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">name</span> <span class="keyword">LIKE</span> <span class="string">'_gle'</span>;</span><br><span class="line">该SQL 语句选取 name 以一个任意字符开始，然后是 "gle" 的所有商品。</span><br></pre></td></tr></table></figure><h2 id="实例4"><a href="#实例4" class="headerlink" title="实例4"></a>实例4</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">Store</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">name</span> <span class="keyword">LIKE</span> <span class="string">'G_o_le'</span>;</span><br><span class="line">该 SQL 语句选取 name 以 "G" 开始，然后是一个任意字符，然后是 "o"，然后是一个任意字符，然后是 "le" 的所有商品。</span><br></pre></td></tr></table></figure><h2 id="实例5"><a href="#实例5" class="headerlink" title="实例5"></a>实例5</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[charlist] </span><br><span class="line">MySQL 中使用 REGEXP 或 NOT REGEXP 运算符 (或 RLIKE 和 NOT RLIKE) 来操作正则表达式。</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">Store</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">name</span> REGEXP <span class="string">'^[GFs]'</span>;</span><br><span class="line">该 SQL 语句选取 name 以 "G"、"F" 或 "s" 为开头的所有商品：</span><br></pre></td></tr></table></figure><h2 id="实例6"><a href="#实例6" class="headerlink" title="实例6"></a>实例6</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[charlist]</span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">Store</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">name</span> REGEXP <span class="string">'^[A-H]'</span>;</span><br><span class="line">该SQL语句选取name以A到H字母开头的所有商品。</span><br></pre></td></tr></table></figure><h2 id="实例7"><a href="#实例7" class="headerlink" title="实例7"></a>实例7</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[^charlist]</span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">Store</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">name</span> REGEXP <span class="string">'^[A-H]'</span>;</span><br><span class="line">该SQL语句选取name以A到H字母开头的所有商品。</span><br></pre></td></tr></table></figure><h1 id="LIKE-操作符"><a href="#LIKE-操作符" class="headerlink" title="LIKE 操作符"></a>LIKE 操作符</h1><h2 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h2><p>LIKE 操作符用于在 WHERE 子句中 搜索 列中的 指定模式。</p><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> column_name <span class="keyword">LIKE</span> pattern;</span><br></pre></td></tr></table></figure><h2 id="实例1-1"><a href="#实例1-1" class="headerlink" title="实例1"></a>实例1</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * </span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">Store</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">name</span> <span class="keyword">LIKE</span> <span class="string">'S%'</span>;</span><br><span class="line"></span><br><span class="line">该SQL 语句选取 name 以字母 "S" 开头的所有客户</span><br></pre></td></tr></table></figure><h2 id="实例2-1"><a href="#实例2-1" class="headerlink" title="实例2"></a>实例2</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * </span><br><span class="line"><span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">name</span> <span class="keyword">LIKE</span> <span class="string">'%k'</span>;</span><br><span class="line"></span><br><span class="line">该SQL 语句选取 name 以字母 "k" 结尾的所有客户</span><br></pre></td></tr></table></figure><h2 id="实例3-1"><a href="#实例3-1" class="headerlink" title="实例3"></a>实例3</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">Store</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">name</span> <span class="keyword">LIKE</span> %ry%;</span><br><span class="line"></span><br><span class="line">该SQL 语句选取 name 包含模式 "ry" 的所有客户：</span><br></pre></td></tr></table></figure><h2 id="note"><a href="#note" class="headerlink" title="note"></a>note</h2><p>通过使用 NOT 关键字，您可以选取不匹配模式的记录。</p><h2 id="实例4-1"><a href="#实例4-1" class="headerlink" title="实例4"></a>实例4</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">Store</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">name</span> <span class="keyword">NOT</span> <span class="keyword">LIKE</span> %ry%;</span><br></pre></td></tr></table></figure><h1 id="IN-操作符"><a href="#IN-操作符" class="headerlink" title="IN 操作符"></a>IN 操作符</h1><h2 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h2><p>IN 操纵符允许在WHERE子句中规定多个值</p><h2 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> column_name <span class="keyword">IN</span> (value1,value2,...);</span><br></pre></td></tr></table></figure><h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">Store</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">name</span> <span class="keyword">IN</span> (<span class="string">'西瓜'</span>,<span class="string">'苹果'</span>);</span><br><span class="line"></span><br><span class="line">该 SQL 语句选取 name 为 "西瓜" 或 "苹果" 的所有网站</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;SELECT-TOP-LIMIT-ROWNUM-子句&quot;&gt;&lt;a href=&quot;#SELECT-TOP-LIMIT-ROWNUM-子句&quot; class=&quot;headerlink&quot; title=&quot;SELECT TOP, LIMIT, ROWNUM 子句&quot;&gt;&lt;/a&gt;SELECT TOP, LIMIT, ROWNUM 子句&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;SELECT TOP 子句用于规定要返回的记录的数目。&lt;/p&gt;
&lt;p&gt;SELECT TOP 子句对于拥有数千条记录的大型表来说，是非常有用的。&lt;br&gt;** notes **:&lt;br&gt;不是所有的数据库系统都支持 SELECT TOP 语句。&lt;br&gt;MySQL 支持 LIMIT 语句来选取指定的条数数据， Oracle 可以使用 ROWNUM 来选取。&lt;/p&gt;</summary>
    
    
    
    <category term="SQL" scheme="https://flower48237.com/categories/SQL/"/>
    
    
    <category term="SQL" scheme="https://flower48237.com/tags/SQL/"/>
    
    <category term="基础" scheme="https://flower48237.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题26.删除排序数组中的重复项</title>
    <link href="https://flower48237.com/2020/05/25/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%9826.%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/"/>
    <id>https://flower48237.com/2020/05/25/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%9826.%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/</id>
    <published>2020-05-25T11:41:00.000Z</published>
    <updated>2020-07-06T10:57:15.120Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个排序数组，你需要在 原地 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。<br>不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">example1:</span><br><span class="line">input  : [1,1,2] </span><br><span class="line">output : [1,2]</span><br><span class="line">note   : 函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">example2:</span><br><span class="line">input  : [0,0,1,1,1,2,2,3,3,4]</span><br><span class="line">output : [0,1,2,3,4]</span><br><span class="line">note   : 函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路</strong><br>双指针遍历，一个指针i用于遍历数组，另一个指针len用于修改数组。<br>当前元素的值num[i]与其前一个元素的值num[i-1]不相等的时候，num[len]的值更新为num[i]，以此实现对数组的修改。</p><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++)&#123; <span class="comment">// 下标从1开始是为了访问i-1时防止出现溢出。</span></span><br><span class="line">            <span class="keyword">if</span> (nums[i] != nums[i-<span class="number">1</span>])&#123;</span><br><span class="line">                nums[len ++] = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;给定一个排序数组，你需要在 原地 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。&lt;br&gt;不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;example1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : [1,1,2] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : [1,2]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;note   : 函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;example2:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : [0,0,1,1,1,2,2,3,3,4]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : [0,1,2,3,4]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;note   : 函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="遍历" scheme="https://flower48237.com/tags/%E9%81%8D%E5%8E%86/"/>
    
    <category term="数组" scheme="https://flower48237.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题53.最大子序和</title>
    <link href="https://flower48237.com/2020/05/24/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%9853.%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/"/>
    <id>https://flower48237.com/2020/05/24/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%9853.%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/</id>
    <published>2020-05-24T10:02:00.000Z</published>
    <updated>2020-07-06T10:57:25.949Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">example:</span><br><span class="line">input : -2,1,-3,4,-1,2,1,-5,4</span><br><span class="line">output: 6</span><br><span class="line">note  : 连续子数组 [4,-1,2,1] 的和最大，为 6</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路1</strong></p><p>动态规划 – 时间复杂度O(N), 空间复杂度O(1)</p><ul><li>（1）从下标1开始遍历数组，当前元素item的前一个元素pre若大于0，则item更新为item+pre，否则继续遍历。</li><li>（2）在遍历过程中比使用Math.max(max, item)函数对比当前最大值和item值的大小以确定最终的最大和。</li></ul><p><strong>思路2</strong></p><p>贪心算法 – 时间复杂度O(N), 空间复杂度O(1)</p><ul><li>若当前元素之前的元素序列之和小于0，则舍弃这个“和”</li><li>定义temp用于比较“当前元素”与“当前元素之前的元素序列之和”谁更大</li></ul><p><strong>思路3</strong></p><p>分治法 – 时间复杂度O(N), 空间复杂度O(logN)<br>这个思路是查看官方题解才了解的，并不是最优的算法，最优算法依然是动态规划，但是并没有理解透彻，所以就不在这里做不准确的解释了。详细内容请到<a href="https://leetcode-cn.com/problems/maximum-subarray/solution/zui-da-zi-xu-he-by-leetcode-solution/" target="_blank" rel="noopener">Leetcode官方题解</a>中学习。</p><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i-<span class="number">1</span>] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                nums[i] += nums[i-<span class="number">1</span>];       <span class="comment">// 当前元素item[i]的前驱元素item[i-1]&gt;0,更新当前元素的值</span></span><br><span class="line">            &#125;</span><br><span class="line">            max = Math.max(nums[i], max);   <span class="comment">// 确定目前为止的最大值</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路2代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> max = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            temp = Math.max(nums[i], temp + nums[i]); <span class="comment">// 等价于比较“当前元素”与“当前元素之前的元素序列之和”谁更大</span></span><br><span class="line">                                                      <span class="comment">// temp = Math.max(0, temp);</span></span><br><span class="line">            max = Math.max(temp, max);                <span class="comment">// 确定临时最大值</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;example:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input : -2,1,-3,4,-1,2,1,-5,4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output: 6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;note  : 连续子数组 [4,-1,2,1] 的和最大，为 6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="动态规划" scheme="https://flower48237.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="贪心算法" scheme="https://flower48237.com/tags/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题38.外观数列</title>
    <link href="https://flower48237.com/2020/03/27/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%9838.%E5%A4%96%E8%A7%82%E6%95%B0%E5%88%97/"/>
    <id>https://flower48237.com/2020/03/27/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%9838.%E5%A4%96%E8%A7%82%E6%95%B0%E5%88%97/</id>
    <published>2020-03-27T06:54:51.000Z</published>
    <updated>2020-03-27T06:55:16.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>「外观数列」是一个整数序列，从数字 1 开始，序列中的每一项都是对前一项的描述。前五项如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.   1</span><br><span class="line">2.   11</span><br><span class="line">3.   21</span><br><span class="line">4.   1211</span><br><span class="line">5.   111221</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1  被读作  <span class="string">"one 1"</span>  (<span class="string">"一个一"</span>) , 即 11。</span><br><span class="line">11 被读作 <span class="string">"two 1s"</span> (<span class="string">"两个一"</span>）, 即 21。</span><br><span class="line">21 被读作 <span class="string">"one 2"</span>,  <span class="string">"one 1"</span> （<span class="string">"一个二"</span> ,  <span class="string">"一个一"</span>) , 即 1211。</span><br><span class="line">给定一个正整数 n（1 ≤ n ≤ 30），输出外观数列的第 n 项。</span><br><span class="line">注意：整数序列中的每一项将表示为一个字符串。</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">输入: 1</span><br><span class="line">输出: <span class="string">"1"</span></span><br><span class="line">解释：这是一个基本样例。</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: 4</span><br><span class="line">输出: <span class="string">"1211"</span></span><br><span class="line">解释：当 n = 3 时，序列是 <span class="string">"21"</span>，其中我们有 <span class="string">"2"</span> 和 <span class="string">"1"</span> 两组，<span class="string">"2"</span> 可以读作 <span class="string">"12"</span>，也就是出现频次 = 1 而 值 = 2；类似 <span class="string">"1"</span> 可以读作 <span class="string">"11"</span>。所以答案是 <span class="string">"12"</span> 和 <span class="string">"11"</span> 组合在一起，也就是 <span class="string">"1211"</span>。</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>借助StringBuilder ，方便在循环中进行拼接操作，初始化一个StringBuilder类型的对象为 “ 1 “；</li><li>当输入的整数n &gt; 1 时，进行第一层循环，次数为 n - 1 次，每次循环得到的StringBuilder类型的临时结果，即对上一层数字解释；</li><li>嵌套的第二层循环需要完成对上一层数值的统计工作<ul><li>初始化获取当前字符串的首字符 ch，向后遍历，相等则计数器count + 1 ， 不相等则将计数器count 和 字符 ch 追加到临时StringBuilder对象temp中，然后 ch 更新为当前字符，计数器count 重置为1；</li><li>每次内层循环结束时，计数器 count 和 字符 ch 追加到临时StringBuilder对象temp中，然后将temp赋值给初始的str；</li></ul></li><li>最后返回的str.toString()就是想要的结果。<h3 id="代码实现（Java）"><a href="#代码实现（Java）" class="headerlink" title="代码实现（Java）"></a>代码实现（Java）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : flower48237</span></span><br><span class="line"><span class="comment"> * @2020/3/25 21:20</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> : LeetCode精选TOP面试题38.外观数列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">countAndSay</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        StringBuilder str = <span class="keyword">new</span> StringBuilder(<span class="string">"1"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i ++)&#123;</span><br><span class="line">            StringBuilder temp = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">char</span> ch = str.charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; str.length(); j ++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (str.charAt(j) == ch) &#123;</span><br><span class="line">                    count++;<span class="comment">// 计数器加一</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    temp.append(<span class="string">""</span> + count + ch);<span class="comment">// 追加对上一串数值的部分描述</span></span><br><span class="line">                    ch = str.charAt(j);<span class="comment">// 更新ch</span></span><br><span class="line">                    count = <span class="number">1</span>;<span class="comment">// 重制计数器count 为 1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            temp.append(<span class="string">""</span> + count + ch);<span class="comment">// 追加对上一串数值的最后一部分描述</span></span><br><span class="line">            str = temp;<span class="comment">// 将每次的描述结果赋值给str</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;「外观数列」是一个整数序列，从数字 1 开始，序列中的每一项都是对前一项的描述。前五项如下：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1.   1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.   11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.   21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4.   1211&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5.   111221&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1  被读作  &lt;span class=&quot;string&quot;&gt;&quot;one 1&quot;&lt;/span&gt;  (&lt;span class=&quot;string&quot;&gt;&quot;一个一&quot;&lt;/span&gt;) , 即 11。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11 被读作 &lt;span class=&quot;string&quot;&gt;&quot;two 1s&quot;&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&quot;两个一&quot;&lt;/span&gt;）, 即 21。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21 被读作 &lt;span class=&quot;string&quot;&gt;&quot;one 2&quot;&lt;/span&gt;,  &lt;span class=&quot;string&quot;&gt;&quot;one 1&quot;&lt;/span&gt; （&lt;span class=&quot;string&quot;&gt;&quot;一个二&quot;&lt;/span&gt; ,  &lt;span class=&quot;string&quot;&gt;&quot;一个一&quot;&lt;/span&gt;) , 即 1211。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;给定一个正整数 n（1 ≤ n ≤ 30），输出外观数列的第 n 项。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;注意：整数序列中的每一项将表示为一个字符串。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="字符串" scheme="https://flower48237.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="数据结构" scheme="https://flower48237.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题160.相交链表</title>
    <link href="https://flower48237.com/2020/03/27/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98160.%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/"/>
    <id>https://flower48237.com/2020/03/27/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98160.%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/</id>
    <published>2020-03-27T05:53:22.000Z</published>
    <updated>2020-03-27T05:56:12.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>编写一个程序，找到两个单链表相交的起始节点。返回值是ListNode类型。<br>示例 1：<img src="https://img-blog.csdnimg.cn/20200327134233744.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zsb3dlcl80ODIzNw==,size_16,color_FFFFFF,t_70" alt="示例1"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], </span><br><span class="line"> skipA = 2, skipB = 3</span><br><span class="line">输出：Reference of the node with value = 8</span><br><span class="line">输入解释：相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。</span><br><span class="line">从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。</span><br><span class="line">在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。</span><br></pre></td></tr></table></figure><a id="more"></a><p>示例 2：<br><img src="https://img-blog.csdnimg.cn/20200327134449514.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zsb3dlcl80ODIzNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], </span><br><span class="line"> skipA = 3, skipB = 1</span><br><span class="line">输出：Reference of the node with value = 2</span><br><span class="line">输入解释：相交节点的值为 2 （注意，如果两个列表相交则不能为 0）。</span><br><span class="line">从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。</span><br><span class="line">在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。</span><br></pre></td></tr></table></figure><p>示例 3：<br><img src="https://img-blog.csdnimg.cn/20200327134459471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zsb3dlcl80ODIzNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2</span><br><span class="line">输出：null</span><br><span class="line">输入解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。</span><br><span class="line">由于这两个链表不相交，所以 intersectVal 必须为 0，</span><br><span class="line">而 skipA 和 skipB 可以是任意值。</span><br><span class="line">解释：这两个链表不相交，因此返回 null。</span><br></pre></td></tr></table></figure><p>要求：</p><ul><li>如果两个链表没有交点，返回 null.</li><li>在返回结果后，两个链表仍须保持原有的结构。</li><li>可假定整个链表结构中没有循环。</li><li>程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。</li></ul><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>分别遍历两个链表，统计两个链表各自的长度lenA和lenB；</li><li>先对较长的链表进行遍历，向前遍历 <strong>| lenA - lenB |</strong> 次；</li><li>然后利用while循环同时遍历两个链表：<pre><code>+ 如果遍历过程中找到两个链表的结点完全相等，那么返回这个结点；+ 如果遍历结束依然没有返回某个结点，那么就说明这两个链表不相交，返回null。</code></pre></li></ul><p>时间复杂度 O(m + n)<br>空间复杂度 O(1)</p><h3 id="代码实现（Java）"><a href="#代码实现（Java）" class="headerlink" title="代码实现（Java）"></a>代码实现（Java）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> it160.getIntersectionNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.nio.cs.ext.MacArabic;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : flower48237</span></span><br><span class="line"><span class="comment"> * @2020/3/27 9:52</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> : LeetCode精选TOP面试题160.相交链表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输入示例</span></span><br><span class="line"><span class="comment"> * 8</span></span><br><span class="line"><span class="comment"> *   [4,1,8,4,5]</span></span><br><span class="line"><span class="comment"> * [5,0,1,8,4,5]</span></span><br><span class="line"><span class="comment"> * 2</span></span><br><span class="line"><span class="comment"> * 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lenA = <span class="number">0</span>, lenB = <span class="number">0</span>; <span class="comment">// 用来记录两个链表的长度</span></span><br><span class="line">        ListNode p = headA;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>)&#123;</span><br><span class="line">            lenA ++;<span class="comment">// 得到链表A的长度</span></span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        p = headB;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>)&#123;</span><br><span class="line">            lenB++;<span class="comment">// 得到链表B的长度</span></span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (lenA &lt; lenB)&#123;<span class="comment">// B 更长</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lenB - lenA; i ++)&#123;</span><br><span class="line">            <span class="comment">// 先对长的链表B遍历 lenB - lenA 次</span></span><br><span class="line">                headB = headB.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (headA != <span class="keyword">null</span> &amp;&amp; headB != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (headA == headB)&#123;</span><br><span class="line">                <span class="comment">// 找到两个链表中完全相同的结点并返回</span></span><br><span class="line">                    <span class="keyword">return</span> headA;</span><br><span class="line">                &#125;</span><br><span class="line">                headA = headA.next;</span><br><span class="line">                headB = headB.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;<span class="comment">// A 更长 或者 A 与 B 等长</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lenA - lenB; i ++)&#123;</span><br><span class="line">            <span class="comment">// 先对长的链表B遍历 lenA - lenB 次</span></span><br><span class="line">                headA = headA.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (headA != <span class="keyword">null</span> &amp;&amp; headB != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (headA == headB)&#123;</span><br><span class="line">                <span class="comment">// 找到两个链表中完全相同的结点并返回</span></span><br><span class="line">                    <span class="keyword">return</span> headA;</span><br><span class="line">                &#125;</span><br><span class="line">                headA = headA.next;</span><br><span class="line">                headB = headB.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// 不想交</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;编写一个程序，找到两个单链表相交的起始节点。返回值是ListNode类型。&lt;br&gt;示例 1：&lt;img src=&quot;https://img-blog.csdnimg.cn/20200327134233744.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zsb3dlcl80ODIzNw==,size_16,color_FFFFFF,t_70&quot; alt=&quot;示例1&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 skipA = 2, skipB = 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：Reference of the node with value = 8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输入解释：相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="链表" scheme="https://flower48237.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="数据结构" scheme="https://flower48237.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题268.缺失数字</title>
    <link href="https://flower48237.com/2020/03/23/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98268.%E7%BC%BA%E5%A4%B1%E6%95%B0%E5%AD%97/"/>
    <id>https://flower48237.com/2020/03/23/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98268.%E7%BC%BA%E5%A4%B1%E6%95%B0%E5%AD%97/</id>
    <published>2020-03-23T14:00:03.000Z</published>
    <updated>2020-03-23T14:55:36.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目回忆"><a href="#题目回忆" class="headerlink" title="题目回忆"></a>题目回忆</h3><p>给定一个包含 0, 1, 2, …, n 中 n 个数的序列，找出 0 .. n 中没有出现在序列中的那个数。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>:</span><br><span class="line">输入: [<span class="number">3</span>,<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">输出: <span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">2</span>:</span><br><span class="line">输入: [<span class="number">9</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">输出: <span class="number">8</span></span><br></pre></td></tr></table></figure><p>算法应具有线性时间复杂度。考虑只使用额外常数空间来实现。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>思路1：数学方法，简单粗暴<br>找缺失的数，那我把<strong>1，2，3，···，n</strong>的累加和求出来，再把数组的累加和求出来，做个差就好了；</li><li>思路2：关系判断<br>判断下标1~n的元素是否等于其<strong>前一个元素值+1</strong>，不是就说明缺失了前一个元素值+1所代表的这个数字；</li><li>思路3：借助哈希Set<br>先把数组中的元素存入HashSet中，再遍历整数序列<strong>0，1，2，···，n</strong>，当存在某个元素item不被HashSet包含时，就返回这个元素item。<h3 id="代码实现（Java）"><a href="#代码实现（Java）" class="headerlink" title="代码实现（Java）"></a>代码实现（Java）</h3></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : flower48237</span></span><br><span class="line"><span class="comment"> * @2020/3/18 21:41</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> : LeetCode精选TOP面试题268.缺失数字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">missingNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 法 1</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> stdsum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            sum += nums[i];</span><br><span class="line">            stdsum += i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stdsum - sum;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 法 2</span></span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="comment">// 判断 n 是否出现在末位</span></span><br><span class="line">        <span class="keyword">if</span> (nums[nums.length-<span class="number">1</span>] != nums.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums.length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断 0 是否出现在首位</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[<span class="number">0</span>] != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 此时缺失的数字一定在 (0, n) 中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != nums[i-<span class="number">1</span>] + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> nums[i-<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 未缺失任何数字（保证函数有返回值）</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 法 3</span></span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n : nums)&#123;</span><br><span class="line">            set.add(n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (!set.contains(i))&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目回忆&quot;&gt;&lt;a href=&quot;#题目回忆&quot; class=&quot;headerlink&quot; title=&quot;题目回忆&quot;&gt;&lt;/a&gt;题目回忆&lt;/h3&gt;&lt;p&gt;给定一个包含 0, 1, 2, …, n 中 n 个数的序列，找出 0 .. n 中没有出现在序列中的那个数。&lt;/p&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="遍历" scheme="https://flower48237.com/tags/%E9%81%8D%E5%8E%86/"/>
    
    <category term="数组" scheme="https://flower48237.com/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="数值计算" scheme="https://flower48237.com/tags/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题190.颠倒二进制位</title>
    <link href="https://flower48237.com/2020/03/23/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98190.%E9%A2%A0%E5%80%92%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D/"/>
    <id>https://flower48237.com/2020/03/23/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98190.%E9%A2%A0%E5%80%92%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D/</id>
    <published>2020-03-23T12:30:47.000Z</published>
    <updated>2020-03-23T14:53:48.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>颠倒给定的 32 位无符号整数的二进制位。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line">输入: <span class="number">00000010100101000001111010011100</span></span><br><span class="line">输出: <span class="number">00111001011110000010100101000000</span></span><br><span class="line">解释: 输入的二进制串 <span class="number">00000010100101000001111010011100</span> 表示无符号整数 <span class="number">43261596</span>，</span><br><span class="line">      因此返回 <span class="number">964176192</span>，其二进制表示形式为 <span class="number">00111001011110000010100101000000</span>。</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：<span class="number">11111111111111111111111111111101</span></span><br><span class="line">输出：<span class="number">10111111111111111111111111111111</span></span><br><span class="line">解释：输入的二进制串 <span class="number">11111111111111111111111111111101</span> 表示无符号整数 <span class="number">4294967293</span>，</span><br><span class="line">      因此返回 <span class="number">3221225471</span> 其二进制表示形式为 <span class="number">10101111110010110010011101101001</span>。</span><br></pre></td></tr></table></figure><blockquote><p>在 Java中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响算法的实现，在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的示例 2 中，输入表示有符号整数 -3，输出表示有符号整数 -1073741825。</p></blockquote><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>思路1 ：接口实现，一行代码，不香，没有手动实现的乐趣；</li><li>思路2 ：位运算实现，真香，参考<a href="https://leetcode-cn.com/problems/reverse-bits/solution/li-yong-wei-cao-zuo-jie-ti-qian-xian-yi-dong-by-li/" target="_blank" rel="noopener">大佬分析的思路叭</a>。</li></ul><h3 id="代码实现（Java）"><a href="#代码实现（Java）" class="headerlink" title="代码实现（Java）"></a>代码实现（Java）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : flower48237</span></span><br><span class="line"><span class="comment"> * @2020/3/18 21:25</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> : LeetCode精选TOP面试题190.颠倒二进制位</span></span><br><span class="line"><span class="comment"> * 思路1：接口实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// you need treat n as an unsigned value</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverseBits</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.reverse(n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : flower48237</span></span><br><span class="line"><span class="comment"> * @2020/3/18 21:25</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> : LeetCode精选TOP面试题190.颠倒二进制位</span></span><br><span class="line"><span class="comment"> * 思路2：位运算实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// you need treat n as an unsigned value</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverseBits</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> bitsSize = <span class="number">31</span>; n != <span class="number">0</span>; n = n &gt;&gt;&gt; <span class="number">1</span>, bitsSize--) &#123;</span><br><span class="line">            res += (n &amp; <span class="number">1</span>) &lt;&lt; bitsSize;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;颠倒给定的 32 位无符号整数的二进制位。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;示例 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输入: &lt;span class=&quot;number&quot;&gt;00000010100101000001111010011100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: &lt;span class=&quot;number&quot;&gt;00111001011110000010100101000000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释: 输入的二进制串 &lt;span class=&quot;number&quot;&gt;00000010100101000001111010011100&lt;/span&gt; 表示无符号整数 &lt;span class=&quot;number&quot;&gt;43261596&lt;/span&gt;，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      因此返回 &lt;span class=&quot;number&quot;&gt;964176192&lt;/span&gt;，其二进制表示形式为 &lt;span class=&quot;number&quot;&gt;00111001011110000010100101000000&lt;/span&gt;。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="遍历" scheme="https://flower48237.com/tags/%E9%81%8D%E5%8E%86/"/>
    
    <category term="位运算" scheme="https://flower48237.com/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题121.买卖股票的最佳时机</title>
    <link href="https://flower48237.com/2020/03/23/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98121.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/"/>
    <id>https://flower48237.com/2020/03/23/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98121.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/</id>
    <published>2020-03-23T12:24:21.000Z</published>
    <updated>2020-03-23T14:54:06.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。<br>如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。<br>!!! 不能在买入股票前卖出股票 !!!</p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>思路1：一次遍历 O(N)</p><ul><li><p>1.维护两个整数，maxnum和minnum，用来记录区间最大值和最小值；</p></li><li><p>2.遍历数组：</p><ul><li>当元素item 大于 maxnum 时，最大值mannum更新为item，此时比较<strong>最大值和最小值的差值 sub **与</strong>当前记录的临时最大利润profit**的大小关系，如果sub &gt; profit，就更新profit，小于则不更新；</li><li>当元素item 小于 minnum 时，最小值minnum和最大值maxnum都更新为item；</li></ul></li><li><p>3.遍历结束后直接返回profit。<br>思路2：两层遍历，暴力求解 O(N²)<br>两层遍历的过程中不断比较两数之差与profit的大小关系，更新找到最大利润，思路比较通俗易懂，但是时间复杂度高。</p></li></ul><h3 id="代码实现（Java）"><a href="#代码实现（Java）" class="headerlink" title="代码实现（Java）"></a>代码实现（Java）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : flower48237</span></span><br><span class="line"><span class="comment"> * @2020/3/23 16:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span> : LeetCode精选TOP面试题121.买卖股票的最佳时机</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (prices.length == <span class="number">0</span> || prices.length == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 法 1 ，一次遍历</span></span><br><span class="line">        <span class="keyword">int</span> maxnum = prices[<span class="number">0</span>], minnum = prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> profit= <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (prices[i] &gt; maxnum)&#123;</span><br><span class="line">                maxnum = prices[i];</span><br><span class="line">                <span class="keyword">if</span> (maxnum - minnum &gt; profit)&#123;</span><br><span class="line">                    profit= maxnum - minnum;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (prices[i] &lt; minnum)&#123;</span><br><span class="line">                minnum = prices[i];</span><br><span class="line">                maxnum = prices[i];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> profit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 法 2 暴力求解</span></span><br><span class="line"><span class="comment">        int maxprofit = 0;</span></span><br><span class="line"><span class="comment">        for (int i = 0; i &lt; prices.length - 1; i++) &#123;</span></span><br><span class="line"><span class="comment">            for (int j = i + 1; j &lt; prices.length; j++) &#123;</span></span><br><span class="line"><span class="comment">                int profit = prices[j] - prices[i];</span></span><br><span class="line"><span class="comment">                if (profit &gt; maxprofit)</span></span><br><span class="line"><span class="comment">                    maxprofit = profit;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        return maxprofit;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>做完题之后膜拜大佬的解题思路，果然我是白痴级别，大佬的解题思路实在是太强了。<br><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/solution/yi-ge-fang-fa-tuan-mie-6-dao-gu-piao-wen-ti-by-l-3/" target="_blank" rel="noopener">labuladong大佬的文章：一个方法团灭 6 道股票问题</a><br><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/solution/121-mai-mai-gu-piao-de-zui-jia-shi-ji-dp-7-xing-ji/" target="_blank" rel="noopener">ivan_allen大佬的文章：dp 7 行简约风格</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。&lt;br&gt;如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。&lt;br&gt;!!! 不能在买入股票前卖出股票 !!!&lt;/p&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="遍历" scheme="https://flower48237.com/tags/%E9%81%8D%E5%8E%86/"/>
    
    <category term="数组" scheme="https://flower48237.com/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="动态规划" scheme="https://flower48237.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题202.快乐数</title>
    <link href="https://flower48237.com/2020/03/17/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98202.%E5%BF%AB%E4%B9%90%E6%95%B0/"/>
    <id>https://flower48237.com/2020/03/17/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98202.%E5%BF%AB%E4%B9%90%E6%95%B0/</id>
    <published>2020-03-17T03:14:50.000Z</published>
    <updated>2020-03-23T14:49:16.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>编写一个算法来判断一个数是不是“快乐数”。<br>题目来源：<a href="https://leetcode-cn.com/problems/happy-number" target="_blank" rel="noopener">LeetCode</a><br>一个“快乐数”定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是无限循环但始终变不到 1。如果可以变为 1，那么这个数就是快乐数。</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">示例: </span><br><span class="line">输入: 19</span><br><span class="line">输出: <span class="literal">true</span></span><br><span class="line">解释: </span><br><span class="line">12 + 92 = 82</span><br><span class="line">82 + 22 = 68</span><br><span class="line">62 + 82 = 100</span><br><span class="line">12 + 02 + 02 = 1</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>这是一个在编程的时候会出现死循环的问题，个人认为重点工作其实倒不是怎么判断是不是快乐数，而是找到打破循环的方法或者条件。</p><ul><li>思路1 ：快慢指针<br>慢指针slower每次前进一步（进行一次平方计算），快指针faster每次前进两步（进行两次平方计算），当slower和faster不相等的时候，就一直循环。那为啥还说能打破循环呢？<br>这是因为当快慢指针相等的时候会停止循环，相等的有两种情况：<ul><li>当慢指针和快指针都通过计算变成了1；</li><li>当慢指针走过一圈之后，快指针肯定恰好走过了两圈，如果不是快乐数，快慢指针的值肯定是相同的；<blockquote><p>之所以选择快指针走两步而不是三步四步，是因为1，2公倍数最小，公约数最多，这样最节省空间和时间</p></blockquote></li></ul></li><li>思路2 ：借助HashSet<br>哈希Set特点就是不允许重复，那只要每次求和之后，判断当前的值n是否已经存在于hashset中就好啦，存在就不是快乐数，直接return false，不存在就添加进hashset，直到n 变成1跳出循环，或者返回false。</li><li>思路3 ：投机取巧<br>小于10的数中，只有1和7是快乐数，借鉴<a href="https://leetcode-cn.com/problems/happy-number/solution/cyu-yan-by-hui-fei-de-xiao-hou/" target="_blank" rel="noopener">leetcode上大神的思路</a>，所以，投机取巧就很简单了:<ul><li>只要每次计算得到的n大于10，那么就继续计算;</li><li>每次计算得到的n小于10，如果等于1或者7，就是快乐数，不等就不是。</li></ul></li></ul><h3 id="代码实现-Java"><a href="#代码实现-Java" class="headerlink" title="代码实现(Java)"></a>代码实现(Java)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : flower48237</span></span><br><span class="line"><span class="comment"> * @2020/3/16 20:38</span></span><br><span class="line"><span class="comment"> * title : LeetCode精选TOP面试题202.快乐数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHappy</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 法 1 -- 快慢指针</span></span><br><span class="line">        <span class="keyword">int</span> slower = n;</span><br><span class="line">        <span class="keyword">int</span> faster = n;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            slower = getSqrtSum(slower);</span><br><span class="line">            faster = getSqrtSum(faster);</span><br><span class="line">            faster = getSqrtSum(faster);</span><br><span class="line">        &#125;<span class="keyword">while</span> (slower != faster);</span><br><span class="line">        <span class="keyword">return</span> slower == <span class="number">1</span>;<span class="comment">// 返回slower和1是否相等的判定值</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 法 2 -- 借助HashSet</span></span><br><span class="line">        HashSet&lt;Integer&gt; hashset = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        hashset.add(n);</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">1</span>)&#123;</span><br><span class="line">            n = getSqrtSum(n);</span><br><span class="line">            <span class="keyword">if</span> (hashset.contains(n))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            hashset.add(n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 法 3 -- 投机取巧</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (n &lt; <span class="number">10</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">7</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            n = getSqrtSum(n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 三个方法都会用到的计算平方的步骤</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSqrtSum</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> item = num % <span class="number">10</span>;</span><br><span class="line">            sum += item * item;</span><br><span class="line">            num /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;编写一个算法来判断一个数是不是“快乐数”。&lt;br&gt;题目来源：&lt;a href=&quot;https://leetcode-cn.com/problems/happy-number&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt;&lt;br&gt;一个“快乐数”定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是无限循环但始终变不到 1。如果可以变为 1，那么这个数就是快乐数。&lt;/p&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="数值计算" scheme="https://flower48237.com/tags/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题122.买卖股票的最佳时机II</title>
    <link href="https://flower48237.com/2020/03/17/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98122.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAII/"/>
    <id>https://flower48237.com/2020/03/17/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98122.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAII/</id>
    <published>2020-03-17T02:55:26.000Z</published>
    <updated>2020-03-23T14:51:58.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。<br>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。<br>不能同时参与多笔交易（必须在再次购买前出售掉之前的股票）。</p><a id="more"></a><p>示例 1:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: [7,1,5,3,6,4]</span><br><span class="line">输出: 7</span><br><span class="line">解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。</span><br><span class="line">     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">示例 2:</span><br><span class="line">输入: [1,2,3,4,5]</span><br><span class="line">输出: 4</span><br><span class="line">解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。</span><br><span class="line">     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。</span><br><span class="line">     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">示例 3:</span><br><span class="line"></span><br><span class="line">输入: [7,6,4,3,1]</span><br><span class="line">输出: 0</span><br><span class="line">解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>思路1 ：一步一计算<br>定义入手价格变量 in ，遍历数组，判断当前元素item与in的大小关系，如果item &gt; in， 那么直接卖出，利润累加；如果item &lt; in， 更新in为item，表示可以用比之前更低的价格买入。<br>考虑以下两种情况：<br>股票一路走低，那就直接不用买了，只更新in，但是利润不要累加；<br>股票一路走高，那就每次都第二天先卖出赚利润后再买入，利润不断累加，符合题意，并可以引出<strong>思路2</strong>。</li><li>思路2：只计算上升曲线，<br>啥意思呢？<br>就是只考虑思路1的第二步，当今天的股价比前一天高，就把差价累加到利润中，很明显，当股票走低转折的时候，作为买家我是不会在前一天购买的，这其实并不合理，因为股价很难预测，但是题目要求是根据给定数组推算利润，所以这是可行的。<h3 id="代码实现（Java）"><a href="#代码实现（Java）" class="headerlink" title="代码实现（Java）"></a>代码实现（Java）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : flower48237</span></span><br><span class="line"><span class="comment"> * @2020/3/16 17:23</span></span><br><span class="line"><span class="comment"> * title : LeetCode精选TOP面试题122.买卖股票的最佳时机II</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (prices.length == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">// 判断数组是否为空</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> interest = <span class="number">0</span>; <span class="comment">// 利润初始化为0</span></span><br><span class="line">        <span class="comment">// 法1</span></span><br><span class="line">        <span class="keyword">int</span> in = prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (prices[i] &gt; in)&#123;</span><br><span class="line">            <span class="comment">// 那么直接卖出，利润累加</span></span><br><span class="line">                interest += prices[i] - in;</span><br><span class="line">                <span class="comment">// 更新入手价in</span></span><br><span class="line">                in = prices[i];</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (prices[i] &lt; in)&#123;</span><br><span class="line">            <span class="comment">// 更新入手价in</span></span><br><span class="line">                in = prices[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 法 2</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (prices[i] &gt; prices[i - <span class="number">1</span>])&#123;</span><br><span class="line">            <span class="comment">// 只计算上升曲线，差价累加</span></span><br><span class="line">            <span class="comment">// 很容易考虑如果在曲线图内，连续的差值实际上就等于</span></span><br><span class="line">            <span class="comment">// 波峰-波谷 = 极高价卖出 - 极低价买入</span></span><br><span class="line">                interest += prices[i] - prices[i - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> interest;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其实就是贪心算法的思路</p></blockquote></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。&lt;br&gt;设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。&lt;br&gt;不能同时参与多笔交易（必须在再次购买前出售掉之前的股票）。&lt;/p&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="遍历" scheme="https://flower48237.com/tags/%E9%81%8D%E5%8E%86/"/>
    
    <category term="数组" scheme="https://flower48237.com/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="动态规划" scheme="https://flower48237.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>笔试题6-数值统计</title>
    <link href="https://flower48237.com/2020/03/11/%E7%AC%94%E8%AF%95%E9%A2%986-%E6%95%B0%E5%80%BC%E7%BB%9F%E8%AE%A1/"/>
    <id>https://flower48237.com/2020/03/11/%E7%AC%94%E8%AF%95%E9%A2%986-%E6%95%B0%E5%80%BC%E7%BB%9F%E8%AE%A1/</id>
    <published>2020-03-11T15:18:00.000Z</published>
    <updated>2020-03-11T15:34:32.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目回顾"><a href="#题目回顾" class="headerlink" title="题目回顾"></a>题目回顾</h3><p>一串数字，逗号分割输入，排序，统计出最大值max、最大值出现的次数count、平均数avg，并输出排序后的数组和三个统计得到的值。<br>样例：<br>输入：93,90,94,94,94<br>输出：90 93 94 94 94 ,max:94,count:3,avg:93</p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>不需要思路，遍历数组，统计就完事了，借用Java现成的接口它不香么。</p><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@author</span> : flower48237</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@version</span>: 2020年3月11日 下午9:12:24 </span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@note</span> : 统计</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Scanner in = <span class="keyword">new</span> Scanner (System.in);</span><br><span class="line">String str = in.next();</span><br><span class="line">String [] arr = str.split(<span class="string">","</span>); <span class="comment">// 分割，获取数字</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">1</span>;<span class="comment">// 计数器</span></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;<span class="comment">// 累加和</span></span><br><span class="line">Arrays.sort(arr); <span class="comment">// 使用sort接口排序</span></span><br><span class="line">String max = arr[<span class="number">0</span>];<span class="comment">// 初始化最大值为首元素</span></span><br><span class="line"><span class="keyword">for</span> (String ch : arr) &#123;</span><br><span class="line">System.out.print(ch + <span class="string">" "</span>);</span><br><span class="line"><span class="keyword">if</span> (Integer.parseInt(ch) == Integer.parseInt(max)) &#123;</span><br><span class="line"><span class="comment">// 最大值出现的次数计数</span></span><br><span class="line">count ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Integer.parseInt(ch) &gt; Integer.parseInt(max)) &#123;</span><br><span class="line"><span class="comment">// 当有新的最大值时，更新最大值max，重制计数器为1</span></span><br><span class="line">max = ch;</span><br><span class="line">count = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">sum += Integer.parseInt(ch);<span class="comment">// 求累加和</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 按要求输出</span></span><br><span class="line">System.out.print(<span class="string">",max:"</span> + max);</span><br><span class="line">System.out.print(<span class="string">",count:"</span> + count);</span><br><span class="line">System.out.print(<span class="string">",avg:"</span> + sum / arr.length);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>联通软件研究院2020春招面试题之一，依然是考基础。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目回顾&quot;&gt;&lt;a href=&quot;#题目回顾&quot; class=&quot;headerlink&quot; title=&quot;题目回顾&quot;&gt;&lt;/a&gt;题目回顾&lt;/h3&gt;&lt;p&gt;一串数字，逗号分割输入，排序，统计出最大值max、最大值出现的次数count、平均数avg，并输出排序后的数组和三个统计得到的值。&lt;br&gt;样例：&lt;br&gt;输入：93,90,94,94,94&lt;br&gt;输出：90 93 94 94 94 ,max:94,count:3,avg:93&lt;/p&gt;</summary>
    
    
    
    <category term="笔试题" scheme="https://flower48237.com/categories/%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="Java" scheme="https://flower48237.com/tags/Java/"/>
    
    <category term="数值计算" scheme="https://flower48237.com/tags/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    
    <category term="字符串" scheme="https://flower48237.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
</feed>
