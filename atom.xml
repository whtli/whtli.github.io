<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>鸡排大仙儿的个人博客</title>
  
  <subtitle>记录学习过程</subtitle>
  <link href="https://hexo.flower48237.com/atom.xml" rel="self"/>
  
  <link href="https://hexo.flower48237.com/"/>
  <updated>2021-11-17T12:21:01.264Z</updated>
  <id>https://hexo.flower48237.com/</id>
  
  <author>
    <name>鸡排大仙儿</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode精选TOP面试题048.旋转图像.md</title>
    <link href="https://hexo.flower48237.com/2021/11/17/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98048.%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F/"/>
    <id>https://hexo.flower48237.com/2021/11/17/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98048.%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F/</id>
    <published>2021-11-17T12:21:18.644Z</published>
    <updated>2021-11-17T12:21:01.264Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定一个 n × n 的二维矩阵 matrix 表示一个图像。</li><li>将图像顺时针旋转 90 度。</li><li>必须在 原地 旋转图像，这意味着需要直接修改输入的二维矩阵。</li><li>不能使用另一个矩阵来旋转图像。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">example</span><br><span class="line">input  : matrix = &#123;&#123;1,2,3],[4,5,6],[7,8,9&#125;&#125;</span><br><span class="line">output : matrix = &#123;&#123;7,4,1],[8,5,2],[9,6,3&#125;&#125;</span><br><span class="line">input  : matrix = &#123;&#123;5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16&#125;&#125;</span><br><span class="line">output : matrix = &#123;&#123;15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11&#125;&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路1 两次翻转</strong></p><ul><li>按照n×n数组的翻转规律</li><li>先按照主对角线镜像翻转，再按照水平反转（或者先水平后镜像也可以）</li><li>翻转两次后就是目标数组</li></ul><p><strong>思路2 原地旋转</strong></p><ul><li>每个数组元素，在该数组中会有另外三个元素与其对应，组成一个圈</li><li>若把所有的四个数字组成的圈，都完成90°旋转，就可以形成整个数组的旋转</li><li>遍历二维数组，按照数组元素排列规律，对同一个圈内的四个元素按照顺时针顺序进行数值覆盖，即完成了一个圈的旋转</li><li>遍历结束后即可完成整个数组的顺时针90°旋转</li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> length = matrix.length;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查看原数组</span></span><br><span class="line">        <span class="comment">/*for (int i = 0; i &lt; length; i++) &#123;</span></span><br><span class="line"><span class="comment">            for (int j = 0; j &lt; length; j++) &#123;</span></span><br><span class="line"><span class="comment">                System.out.print(matrix[i][j] + "\t");</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            System.out.println();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        System.out.println();*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主对角线翻转</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = matrix[i][j];</span><br><span class="line">                matrix[i][j] = matrix[j][i];</span><br><span class="line">                matrix[j][i] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 查看主对角线翻转后的数组</span></span><br><span class="line">        <span class="comment">/*for (int i = 0; i &lt; length; i++) &#123;</span></span><br><span class="line"><span class="comment">            for (int j = 0; j &lt; length; j++) &#123;</span></span><br><span class="line"><span class="comment">                System.out.print(matrix[i][j] + "\t");</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            System.out.println();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        System.out.println();*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 水平翻转</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length / <span class="number">2</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = matrix[i][j];</span><br><span class="line">                matrix[i][j] = matrix[i][length - j - <span class="number">1</span>];</span><br><span class="line">                matrix[i][length - j - <span class="number">1</span>] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查看结果数组</span></span><br><span class="line">        <span class="comment">/*for (int i = 0; i &lt; length; i++) &#123;</span></span><br><span class="line"><span class="comment">            for (int j = 0; j &lt; length; j++) &#123;</span></span><br><span class="line"><span class="comment">                System.out.print(matrix[i][j] + "\t");</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            System.out.println();</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路2代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = matrix.length;</span><br><span class="line">        <span class="comment">// 查看原数组</span></span><br><span class="line">        <span class="comment">/*for (int i = 0; i &lt; length; i++) &#123;</span></span><br><span class="line"><span class="comment">            for (int j = 0; j &lt; length; j++) &#123;</span></span><br><span class="line"><span class="comment">                System.out.print(matrix[i][j] + "\t");</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            System.out.println();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        System.out.println();*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转圈赋值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; (length + <span class="number">1</span>) / <span class="number">2</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = matrix[i][j];</span><br><span class="line">                matrix[i][j] = matrix[length - j - <span class="number">1</span>][i];</span><br><span class="line">                matrix[length - j - <span class="number">1</span>][i] = matrix[length - i - <span class="number">1</span>][length - j - <span class="number">1</span>];</span><br><span class="line">                matrix[length - i - <span class="number">1</span>][length - j - <span class="number">1</span>] = matrix[j][length - i - <span class="number">1</span>];</span><br><span class="line">                matrix[j][length - i - <span class="number">1</span>] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查看结果数组</span></span><br><span class="line">        <span class="comment">/*for (int i = 0; i &lt; length; i++) &#123;</span></span><br><span class="line"><span class="comment">            for (int j = 0; j &lt; length; j++) &#123;</span></span><br><span class="line"><span class="comment">                System.out.print(matrix[i][j] + "\t");</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            System.out.println();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        System.out.println();*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定一个 n × n 的二维矩阵 matrix 表示一个图像。&lt;/li&gt;
&lt;li&gt;将图像顺时针旋转 90 度。&lt;/li&gt;
&lt;li&gt;必须在 原地 旋转图像，这意味着需要直接修改输入的二维矩阵。&lt;/li&gt;
&lt;li&gt;不能使用另一个矩阵来旋转图像。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;example&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : matrix = &amp;#123;&amp;#123;1,2,3],[4,5,6],[7,8,9&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : matrix = &amp;#123;&amp;#123;7,4,1],[8,5,2],[9,6,3&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : matrix = &amp;#123;&amp;#123;5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : matrix = &amp;#123;&amp;#123;15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://hexo.flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="数组" scheme="https://hexo.flower48237.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题075.颜色分类</title>
    <link href="https://hexo.flower48237.com/2021/11/15/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98075.%E9%A2%9C%E8%89%B2%E5%88%86%E7%B1%BB/"/>
    <id>https://hexo.flower48237.com/2021/11/15/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98075.%E9%A2%9C%E8%89%B2%E5%88%86%E7%B1%BB/</id>
    <published>2021-11-15T15:21:40.271Z</published>
    <updated>2021-11-15T12:46:36.120Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li><p>给定一个包含红色、白色和蓝色，一共 n 个元素的数组。</p></li><li><p>原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。</p></li><li><p>此题中使用整数 0、 1 和 2 分别表示红色、白色和蓝色。</p></li><li><p>进阶：</p><ul><li>可以不使用代码库中的排序函数来解题吗？</li><li>有仅使用常数空间的一趟扫描算法吗？</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">example</span><br><span class="line">input  : nums = &#123;2, 0, 2, 1, 1, 0&#125;</span><br><span class="line">output : nums = &#123;0, 0, 1, 1, 2, 2&#125;</span><br><span class="line">input  : nums = &#123;2, 0, 1&#125;</span><br><span class="line">output : nums = &#123;0, 1, 2&#125;</span><br><span class="line">input  : nums = &#123;0&#125;</span><br><span class="line">output : nums = &#123;0&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路1</strong></p><p><a href="https://leetcode-cn.com/problems/sort-colors/solution/kuai-su-pai-xu-partition-guo-cheng-she-ji-xun-huan/" target="_blank" rel="noopener">参考自大佬的题解</a>。</p><ul><li>“进阶”要求考察的是“快速排序”的子过程 partition，即：通过一次遍历，把数组分成三个部分。<ul><li>初始化index = 0，zero = 0，two = nums.length</li><li>index作为遍历的访问下标，zero作为0元素子集右侧边界，two作为2元素子集左侧边界，</li><li>当访问元素为2时，向后与 <strong>two先向左移动一次之后</strong> 的位置的元素交换（因为two初始化为nums.length为越界状态，故先使其不越界），i不前进，因为交换来的元素很可能也是2，此时若前进会把交换到i下标位置的2忽略，导致排序失败，故原地等待，继续循环；</li><li>当访问元素为1时，不交换，因为1本来就需要在中间，i不前进，zero和two也移动</li><li>当访问元素为0时，向前与zero位置的元素交换 ，i前进，zero向右移动。</li></ul></li><li>时间复杂度：O(N) </li><li>空间复杂度：O(1) </li></ul><p><strong>思路2</strong></p><ul><li>调用Java中Arrays.sort()方法</li><li>时间复杂度：O(N logN) </li><li>空间复杂度：O(1) </li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* public void sortColors(int[] nums) &#123;</span></span><br><span class="line"><span class="comment">        int length = nums.length;</span></span><br><span class="line"><span class="comment">        int zero = 0, two = length - 1;</span></span><br><span class="line"><span class="comment">        int i = 0;</span></span><br><span class="line"><span class="comment">        while (i &lt;= two) &#123;</span></span><br><span class="line"><span class="comment">            if (nums[i] == 0) &#123;</span></span><br><span class="line"><span class="comment">                nums[i] = nums[zero];</span></span><br><span class="line"><span class="comment">                nums[zero++] = 0;</span></span><br><span class="line"><span class="comment">                i++;</span></span><br><span class="line"><span class="comment">            &#125; else if (nums[i] == 2) &#123;</span></span><br><span class="line"><span class="comment">                nums[i] = nums[two];</span></span><br><span class="line"><span class="comment">                nums[two--] = 2;</span></span><br><span class="line"><span class="comment">            &#125; else &#123;</span></span><br><span class="line"><span class="comment">                i++;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125; */</span></span><br><span class="line">    <span class="comment">// 基于上方注释内容，抽出交换数据的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sortColors</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = nums.length;</span><br><span class="line">        <span class="comment">// i作为遍历的访问下标，zero作为0元素子集右侧边界，two作为2元素子集左侧边界；</span></span><br><span class="line">        <span class="keyword">int</span> zero = <span class="number">0</span>, two = length;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 循环终止条件是 i == two，那么循环可以继续的条件是 i &lt; two</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; two) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 当访问元素为0时，向前与zero位置的元素交换 ，i前进，zero向右移动。</span></span><br><span class="line">                swap(nums, i, zero++);</span><br><span class="line">                i++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="comment">// 向后与 two先向左移动一次之后 的位置的元素交换（因为two初始化为nums.length为越界状态，故先使其不越界），i不前进，因为交换来的元素很可能也是2，此时若前进会把交换到i下标位置的2忽略，导致排序失败，故原地等待，继续循环；</span></span><br><span class="line">                swap(nums, i, --two);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 当访问元素为1时，不交换，因为1本来就需要在中间，i不前进，zero和two也移动；</span></span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> index1, <span class="keyword">int</span> index2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = nums[index1];</span><br><span class="line">        nums[index1] = nums[index2];</span><br><span class="line">        nums[index2] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路2代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sortColors</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;给定一个包含红色、白色和蓝色，一共 n 个元素的数组。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;此题中使用整数 0、 1 和 2 分别表示红色、白色和蓝色。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;进阶：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以不使用代码库中的排序函数来解题吗？&lt;/li&gt;
&lt;li&gt;有仅使用常数空间的一趟扫描算法吗？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;example&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : nums = &amp;#123;2, 0, 2, 1, 1, 0&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : nums = &amp;#123;0, 0, 1, 1, 2, 2&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : nums = &amp;#123;2, 0, 1&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : nums = &amp;#123;0, 1, 2&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : nums = &amp;#123;0&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : nums = &amp;#123;0&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://hexo.flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="数组" scheme="https://hexo.flower48237.com/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="排序" scheme="https://hexo.flower48237.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题056.合并区间</title>
    <link href="https://hexo.flower48237.com/2021/11/12/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98056.%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4/"/>
    <id>https://hexo.flower48237.com/2021/11/12/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98056.%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4/</id>
    <published>2021-11-12T15:37:33.333Z</published>
    <updated>2021-11-12T15:38:25.392Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>以数组 intervals 表示若干个区间的集合，其中单个区间为 intervals[i] = [starti, endi] 。</li><li>合并所有重叠的区间，并返回一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">example</span><br><span class="line">input  : intervals = &#123;&#123;1, 3&#125;, &#123;2, 6&#125;, &#123;8, 10&#125;, &#123;15, 18&#125;&#125;</span><br><span class="line">output : &#123;1, 6&#125;, &#123;8, 10&#125;, &#123;15, 18&#125;</span><br><span class="line">input  : intervals = &#123;&#123;1, 4&#125;, &#123;4, 18&#125;&#125;</span><br><span class="line">output : &#123;1, 18&#125;</span><br><span class="line">input  : intervals = &#123;1, 4&#125;, &#123;0, 4&#125;</span><br><span class="line">output : &#123;0, 4&#125;</span><br><span class="line">input  : intervals = &#123;1, 4&#125;, &#123;2, 3&#125;</span><br><span class="line">output : &#123;1, 4&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><strong>思路1 排序+两层循环遍历</strong></li></ul><ul><li>借助Arrays.sort()对原数组进行排序</li><li>遍历数组，外层循环<ul><li>内层循环，对前一个数组元素[left1, right1]的右区间值right1和后一个数组元素[left2, right2]的左区间值left2作比较，若right1 &gt;= left2，则令left1 = right1和right2中值较大的，继续内层循环</li><li>每次内层循环结束，将最终的[leftx, rightx]作为新元素赋值到结果数组中</li></ul></li></ul><p><strong>思路2 排序+一层循环遍历</strong></p><ul><li>借助Arrays.sort()对原数组进行排序</li><li>遍历数组，记当前遍历到的数组元素为array<ul><li>当result数组为空（下标记录为-1），或者当array的左侧区间值大于result数组最后一个元素的右侧区间值，即两个区间无重合时，将array添加进result</li><li>当array的左侧区间值不大于result数组最后一个元素的右侧区间值，即两个区间有重合时，更新result数组最后一个元素的右侧区间值</li></ul></li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>代码1</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] merge(<span class="keyword">int</span>[][] intervals) &#123;</span><br><span class="line">        <span class="comment">// 排序</span></span><br><span class="line">        Arrays.sort(intervals, <span class="keyword">new</span> Comparator&lt;<span class="keyword">int</span>[]&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span>[] interval1, <span class="keyword">int</span>[] interval2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> interval1[<span class="number">0</span>] - interval2[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> length = intervals.length;</span><br><span class="line">        <span class="keyword">int</span>[][] result = <span class="keyword">new</span> <span class="keyword">int</span>[length][<span class="number">2</span>];        </span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">1</span>; i &lt; length &amp;&amp; j &lt;= length; i = j, j = i + <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &lt; length &amp;&amp; intervals[i][<span class="number">1</span>] &gt;= intervals[j][<span class="number">0</span>]) &#123;</span><br><span class="line">                intervals[i][<span class="number">1</span>] = Math.max(intervals[j][<span class="number">1</span>] , intervals[i][<span class="number">1</span>]);</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            result[count] = intervals[i];</span><br><span class="line">            <span class="comment">// System.out.println("current:  i = " + i + " , j = " + j);</span></span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// System.out.println("count : " + count);</span></span><br><span class="line">        <span class="keyword">return</span> Arrays.copyOf(result, count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代码2</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] merge(<span class="keyword">int</span>[][] intervals) &#123;</span><br><span class="line">        <span class="comment">// 排序</span></span><br><span class="line">        Arrays.sort(intervals, <span class="keyword">new</span> Comparator&lt;<span class="keyword">int</span>[]&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span>[] interval1, <span class="keyword">int</span>[] interval2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> interval1[<span class="number">0</span>] - interval2[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> length = intervals.length;</span><br><span class="line">        <span class="keyword">int</span>[][] result = <span class="keyword">new</span> <span class="keyword">int</span>[length][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">int</span> count = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] array : intervals) &#123;</span><br><span class="line">            <span class="keyword">if</span> (count == -<span class="number">1</span> || array[<span class="number">0</span>] &gt; result[count][<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="comment">// 记当前遍历到的数组元素为array</span></span><br><span class="line">                <span class="comment">// 当result数组为空，将array添加进result</span></span><br><span class="line">                <span class="comment">// 或者</span></span><br><span class="line">                <span class="comment">// 当array的左侧区间值大于result数组最后一个元素的右侧区间值，即两个区间无重合时，将array添加进result</span></span><br><span class="line">                result[++count] = array;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 当array的左侧区间值不大于result数组最后一个元素的右侧区间值，即两个区间有重合时，更新result数组最后一个元素的右侧区间值</span></span><br><span class="line">                result[count][<span class="number">1</span>] = Math.max(array[<span class="number">1</span>] , result[count][<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// System.out.println("count : " + (count+1));</span></span><br><span class="line">        <span class="keyword">return</span> Arrays.copyOf(result, count + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;以数组 intervals 表示若干个区间的集合，其中单个区间为 intervals[i] = [starti, endi] 。&lt;/li&gt;
&lt;li&gt;合并所有重叠的区间，并返回一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间。&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;example&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : intervals = &amp;#123;&amp;#123;1, 3&amp;#125;, &amp;#123;2, 6&amp;#125;, &amp;#123;8, 10&amp;#125;, &amp;#123;15, 18&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : &amp;#123;1, 6&amp;#125;, &amp;#123;8, 10&amp;#125;, &amp;#123;15, 18&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : intervals = &amp;#123;&amp;#123;1, 4&amp;#125;, &amp;#123;4, 18&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : &amp;#123;1, 18&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : intervals = &amp;#123;1, 4&amp;#125;, &amp;#123;0, 4&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : &amp;#123;0, 4&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : intervals = &amp;#123;1, 4&amp;#125;, &amp;#123;2, 3&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : &amp;#123;1, 4&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
    <category term="数组" scheme="https://hexo.flower48237.com/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="排序" scheme="https://hexo.flower48237.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
    <category term="列表" scheme="https://hexo.flower48237.com/tags/%E5%88%97%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题008.字符串转换整数 (atoi)</title>
    <link href="https://hexo.flower48237.com/2021/11/08/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98008.%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%95%B4%E6%95%B0%20(atoi)/"/>
    <id>https://hexo.flower48237.com/2021/11/08/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98008.%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%95%B4%E6%95%B0%20(atoi)/</id>
    <published>2021-11-08T15:45:40.711Z</published>
    <updated>2021-11-08T15:42:21.394Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 atoi 函数）。</li><li>函数 myAtoi(string s) 的算法如下：</li><li>1、读入字符串并丢弃无用的前导空格</li><li>2、检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。</li><li>3、读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。</li><li>4、将前面步骤读入的这些数字转换为整数（即，”123” -&gt; 123， “0032” -&gt; 32）。如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。</li><li>5、如果整数数超过 32 位有符号整数范围 [−231,  231 − 1] ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 −231 的整数应该被固定为 −231 ，大于 231 − 1 的整数应该被固定为 231 − 1 。</li><li>6、返回整数作为最终结果。</li><li>本题中的空白字符只包括空格字符 ‘ ‘ 。</li><li>除前导空格或数字后的其余字符串外，请勿忽略 任何其他字符。</li><li>0 &lt;= s.length &lt;= 200</li><li>s 由英文字母（大写和小写）、数字（0-9）、’ ‘、’+’、’-‘ 和 ‘.’ 组成</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">example</span><br><span class="line">input  : s = <span class="string">"42"</span></span><br><span class="line">output : 42</span><br><span class="line">note   : 加粗的字符串为已经读入的字符，插入符号是当前读取的字符。</span><br><span class="line">         第 1 步：<span class="string">"42"</span>（当前没有读入字符，因为没有前导空格）</span><br><span class="line">                  ^</span><br><span class="line">         第 2 步：<span class="string">"42"</span>（当前没有读入字符，因为这里不存在 <span class="string">'-'</span> 或者 <span class="string">'+'</span>）</span><br><span class="line">                  ^</span><br><span class="line">         第 3 步：<span class="string">"42"</span>（读入 <span class="string">"42"</span>）</span><br><span class="line">                    ^</span><br><span class="line">         解析得到整数 42 。</span><br><span class="line">         由于 <span class="string">"42"</span> 在范围 [-231, 231 - 1] 内，最终结果为 42 。</span><br><span class="line">input  : s = <span class="string">"   -42"</span></span><br><span class="line">output : -42</span><br><span class="line">note   : 第 1 步：<span class="string">"   -42"</span>（读入前导空格，但忽视掉）</span><br><span class="line">                     ^</span><br><span class="line">         第 2 步：<span class="string">"   -42"</span>（读入 <span class="string">'-'</span> 字符，所以结果应该是负数）</span><br><span class="line">                      ^</span><br><span class="line">         第 3 步：<span class="string">"   -42"</span>（读入 <span class="string">"42"</span>）</span><br><span class="line">                        ^</span><br><span class="line">         解析得到整数 -42 。</span><br><span class="line">         由于 <span class="string">"-42"</span> 在范围 [-231, 231 - 1] 内，最终结果为 -42 。</span><br><span class="line">input  : s = <span class="string">"4193 with words"</span></span><br><span class="line">output : 4193</span><br><span class="line">note   : 第 1 步：<span class="string">"4193 with words"</span>（当前没有读入字符，因为没有前导空格）</span><br><span class="line">                  ^</span><br><span class="line">         第 2 步：<span class="string">"4193 with words"</span>（当前没有读入字符，因为这里不存在 <span class="string">'-'</span> 或者 <span class="string">'+'</span>）</span><br><span class="line">                  ^</span><br><span class="line">         第 3 步：<span class="string">"4193 with words"</span>（读入 <span class="string">"4193"</span>；由于下一个字符不是一个数字，所以读入停止）</span><br><span class="line">                      ^</span><br><span class="line">         解析得到整数 4193 。</span><br><span class="line">         由于 <span class="string">"4193"</span> 在范围 [-231, 231 - 1] 内，最终结果为 4193 。</span><br><span class="line">input  : s = <span class="string">"words and 987"</span></span><br><span class="line">output : 0</span><br><span class="line">note   : 第 1 步：<span class="string">"words and 987"</span>（当前没有读入字符，因为没有前导空格）</span><br><span class="line">                  ^</span><br><span class="line">         第 2 步：<span class="string">"words and 987"</span>（当前没有读入字符，因为这里不存在 <span class="string">'-'</span> 或者 <span class="string">'+'</span>）</span><br><span class="line">                  ^</span><br><span class="line">         第 3 步：<span class="string">"words and 987"</span>（由于当前字符 <span class="string">'w'</span> 不是一个数字，所以读入停止）</span><br><span class="line">                  ^</span><br><span class="line">         解析得到整数 0 ，因为没有读入任何数字。</span><br><span class="line">         由于 0 在范围 [-231, 231 - 1] 内，最终结果为 0 。</span><br><span class="line">input  : s = <span class="string">"-91283472332"</span></span><br><span class="line">output : -2147483648</span><br><span class="line">note   : 第 1 步：<span class="string">"-91283472332"</span>（当前没有读入字符，因为没有前导空格）</span><br><span class="line">                  ^</span><br><span class="line">         第 2 步：<span class="string">"-91283472332"</span>（读入 <span class="string">'-'</span> 字符，所以结果应该是负数）</span><br><span class="line">                   ^</span><br><span class="line">         第 3 步：<span class="string">"-91283472332"</span>（读入 <span class="string">"91283472332"</span>）</span><br><span class="line">                              ^</span><br><span class="line">         解析得到整数 -91283472332 。</span><br><span class="line">         由于 -91283472332 小于范围 [-231, 231 - 1] 的下界，最终结果被截断为 -231 = -2147483648 。</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路1 借助Long</strong></p><ul><li>1、去空格</li><li>2、获取正负号</li><li>3、借助stringBuilder获取数字字符</li><li>4、删除前缀0</li><li>5、长度判断，过长则截取</li><li>6、判断是否越界</li><li>7、返回结果</li></ul><p><strong>思路2 借助字符串</strong></p><ul><li>1、去空格</li><li>2、获取正负号</li><li>3、借助stringBuilder获取数字字符</li><li>4、删除前缀0</li><li>5、借助字符串和int类型整数进行数值转换，提前进行越界判断，对界值进行缩小来和当前值比较，而不是放大当前值去和界值比较，因为会越界。</li><li>6、返回结果</li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 去空格</span></span><br><span class="line">        String string = s.trim();</span><br><span class="line">        <span class="keyword">if</span> (string.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> length = string.length();</span><br><span class="line">        <span class="comment">// 获取正负号</span></span><br><span class="line">        <span class="keyword">int</span> symbol = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (string.charAt(<span class="number">0</span>) == <span class="string">'-'</span>) &#123;</span><br><span class="line">            symbol = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (symbol == -<span class="number">1</span> || string.charAt(<span class="number">0</span>) == <span class="string">'+'</span>) &#123;</span><br><span class="line">            index = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取数字字符</span></span><br><span class="line">        <span class="keyword">while</span> (index &lt; length &amp;&amp; string.charAt(index) &gt;= <span class="string">'0'</span> &amp;&amp; string.charAt(index) &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">            stringBuilder.append(string.charAt(index));</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (stringBuilder.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 删除前缀0</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; stringBuilder.length() &amp;&amp; stringBuilder.charAt(i++) == <span class="string">'0'</span>) ;</span><br><span class="line">        String input = stringBuilder.toString().substring(i - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 长度判断，过长则截取</span></span><br><span class="line">        <span class="keyword">long</span> number;</span><br><span class="line">        <span class="keyword">if</span> (input.length() &gt; <span class="number">10</span>) &#123;</span><br><span class="line">            number = Long.parseLong(input.substring(<span class="number">0</span>, <span class="number">11</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            number = Long.parseLong(input);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断是否越界</span></span><br><span class="line">        <span class="keyword">if</span> (symbol == <span class="number">1</span> &amp;&amp; number &gt; ((<span class="keyword">int</span>) (Math.pow(<span class="number">2</span>, <span class="number">31</span>)) - <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2147483647</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (symbol == -<span class="number">1</span> &amp;&amp; -number &lt; -((<span class="keyword">int</span>) (Math.pow(<span class="number">2</span>, <span class="number">31</span>)) + <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">2147483648</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) (symbol * number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路2代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 去空格</span></span><br><span class="line">        String string = s.trim();</span><br><span class="line">        <span class="keyword">if</span> (string.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取正负号</span></span><br><span class="line">        <span class="keyword">int</span> symbol = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (string.charAt(<span class="number">0</span>) == <span class="string">'-'</span>) &#123;</span><br><span class="line">            symbol = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (symbol == -<span class="number">1</span> || string.charAt(<span class="number">0</span>) == <span class="string">'+'</span>) &#123;</span><br><span class="line">            index = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> length = string.length();</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span> (index &lt; length &amp;&amp; string.charAt(index) &gt;= <span class="string">'0'</span> &amp;&amp; string.charAt(index) &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">            stringBuilder.append(string.charAt(index));</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (stringBuilder.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 去除前导0</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; stringBuilder.length() &amp;&amp; stringBuilder.charAt(i++) == <span class="string">'0'</span>) ;</span><br><span class="line">        String input = stringBuilder.toString().substring(i - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 有效数值转换</span></span><br><span class="line">        <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; input.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (symbol == <span class="number">1</span> &amp;&amp; (number &gt; Integer.MAX_VALUE / <span class="number">10</span></span><br><span class="line">                    || (number == Integer.MAX_VALUE / <span class="number">10</span> &amp;&amp; (input.charAt(i) - <span class="string">'0'</span>) &gt; Integer.MAX_VALUE % <span class="number">10</span>))) &#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (symbol == -<span class="number">1</span> &amp;&amp; (number &gt; Integer.MIN_VALUE / (-<span class="number">10</span>)</span><br><span class="line">                    || (number == Integer.MIN_VALUE / (-<span class="number">10</span>) &amp;&amp; (input.charAt(i) - <span class="string">'0'</span>) &gt; -(Integer.MIN_VALUE % <span class="number">10</span>)))) &#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.MIN_VALUE;</span><br><span class="line">            &#125;</span><br><span class="line">            number = number * <span class="number">10</span> + (input.charAt(i) - <span class="string">'0'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> symbol * number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 atoi 函数）。&lt;/li&gt;
&lt;li&gt;函数 myAtoi(string s) 的算法如下：&lt;/li&gt;
&lt;li&gt;1、读入字符串并丢弃无用的前导空格&lt;/li&gt;
&lt;li&gt;2、检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。&lt;/li&gt;
&lt;li&gt;3、读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。&lt;/li&gt;
&lt;li&gt;4、将前面步骤读入的这些数字转换为整数（即，”123” -&amp;gt; 123， “0032” -&amp;gt; 32）。如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。&lt;/li&gt;
&lt;li&gt;5、如果整数数超过 32 位有符号整数范围 [−231,  231 − 1] ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 −231 的整数应该被固定为 −231 ，大于 231 − 1 的整数应该被固定为 231 − 1 。&lt;/li&gt;
&lt;li&gt;6、返回整数作为最终结果。&lt;/li&gt;
&lt;li&gt;本题中的空白字符只包括空格字符 ‘ ‘ 。&lt;/li&gt;
&lt;li&gt;除前导空格或数字后的其余字符串外，请勿忽略 任何其他字符。&lt;/li&gt;
&lt;li&gt;0 &amp;lt;= s.length &amp;lt;= 200&lt;/li&gt;
&lt;li&gt;s 由英文字母（大写和小写）、数字（0-9）、’ ‘、’+’、’-‘ 和 ‘.’ 组成&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;example&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : s = &lt;span class=&quot;string&quot;&gt;&quot;42&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : 42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;note   : 加粗的字符串为已经读入的字符，插入符号是当前读取的字符。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         第 1 步：&lt;span class=&quot;string&quot;&gt;&quot;42&quot;&lt;/span&gt;（当前没有读入字符，因为没有前导空格）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         第 2 步：&lt;span class=&quot;string&quot;&gt;&quot;42&quot;&lt;/span&gt;（当前没有读入字符，因为这里不存在 &lt;span class=&quot;string&quot;&gt;&#39;-&#39;&lt;/span&gt; 或者 &lt;span class=&quot;string&quot;&gt;&#39;+&#39;&lt;/span&gt;）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         第 3 步：&lt;span class=&quot;string&quot;&gt;&quot;42&quot;&lt;/span&gt;（读入 &lt;span class=&quot;string&quot;&gt;&quot;42&quot;&lt;/span&gt;）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         解析得到整数 42 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         由于 &lt;span class=&quot;string&quot;&gt;&quot;42&quot;&lt;/span&gt; 在范围 [-231, 231 - 1] 内，最终结果为 42 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : s = &lt;span class=&quot;string&quot;&gt;&quot;   -42&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : -42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;note   : 第 1 步：&lt;span class=&quot;string&quot;&gt;&quot;   -42&quot;&lt;/span&gt;（读入前导空格，但忽视掉）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         第 2 步：&lt;span class=&quot;string&quot;&gt;&quot;   -42&quot;&lt;/span&gt;（读入 &lt;span class=&quot;string&quot;&gt;&#39;-&#39;&lt;/span&gt; 字符，所以结果应该是负数）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         第 3 步：&lt;span class=&quot;string&quot;&gt;&quot;   -42&quot;&lt;/span&gt;（读入 &lt;span class=&quot;string&quot;&gt;&quot;42&quot;&lt;/span&gt;）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         解析得到整数 -42 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         由于 &lt;span class=&quot;string&quot;&gt;&quot;-42&quot;&lt;/span&gt; 在范围 [-231, 231 - 1] 内，最终结果为 -42 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : s = &lt;span class=&quot;string&quot;&gt;&quot;4193 with words&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : 4193&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;note   : 第 1 步：&lt;span class=&quot;string&quot;&gt;&quot;4193 with words&quot;&lt;/span&gt;（当前没有读入字符，因为没有前导空格）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         第 2 步：&lt;span class=&quot;string&quot;&gt;&quot;4193 with words&quot;&lt;/span&gt;（当前没有读入字符，因为这里不存在 &lt;span class=&quot;string&quot;&gt;&#39;-&#39;&lt;/span&gt; 或者 &lt;span class=&quot;string&quot;&gt;&#39;+&#39;&lt;/span&gt;）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         第 3 步：&lt;span class=&quot;string&quot;&gt;&quot;4193 with words&quot;&lt;/span&gt;（读入 &lt;span class=&quot;string&quot;&gt;&quot;4193&quot;&lt;/span&gt;；由于下一个字符不是一个数字，所以读入停止）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         解析得到整数 4193 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         由于 &lt;span class=&quot;string&quot;&gt;&quot;4193&quot;&lt;/span&gt; 在范围 [-231, 231 - 1] 内，最终结果为 4193 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : s = &lt;span class=&quot;string&quot;&gt;&quot;words and 987&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;note   : 第 1 步：&lt;span class=&quot;string&quot;&gt;&quot;words and 987&quot;&lt;/span&gt;（当前没有读入字符，因为没有前导空格）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         第 2 步：&lt;span class=&quot;string&quot;&gt;&quot;words and 987&quot;&lt;/span&gt;（当前没有读入字符，因为这里不存在 &lt;span class=&quot;string&quot;&gt;&#39;-&#39;&lt;/span&gt; 或者 &lt;span class=&quot;string&quot;&gt;&#39;+&#39;&lt;/span&gt;）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         第 3 步：&lt;span class=&quot;string&quot;&gt;&quot;words and 987&quot;&lt;/span&gt;（由于当前字符 &lt;span class=&quot;string&quot;&gt;&#39;w&#39;&lt;/span&gt; 不是一个数字，所以读入停止）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         解析得到整数 0 ，因为没有读入任何数字。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         由于 0 在范围 [-231, 231 - 1] 内，最终结果为 0 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : s = &lt;span class=&quot;string&quot;&gt;&quot;-91283472332&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : -2147483648&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;note   : 第 1 步：&lt;span class=&quot;string&quot;&gt;&quot;-91283472332&quot;&lt;/span&gt;（当前没有读入字符，因为没有前导空格）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         第 2 步：&lt;span class=&quot;string&quot;&gt;&quot;-91283472332&quot;&lt;/span&gt;（读入 &lt;span class=&quot;string&quot;&gt;&#39;-&#39;&lt;/span&gt; 字符，所以结果应该是负数）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         第 3 步：&lt;span class=&quot;string&quot;&gt;&quot;-91283472332&quot;&lt;/span&gt;（读入 &lt;span class=&quot;string&quot;&gt;&quot;91283472332&quot;&lt;/span&gt;）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         解析得到整数 -91283472332 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         由于 -91283472332 小于范围 [-231, 231 - 1] 的下界，最终结果被截断为 -231 = -2147483648 。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://hexo.flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="字符串" scheme="https://hexo.flower48237.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题162.寻找峰值</title>
    <link href="https://hexo.flower48237.com/2021/11/01/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98162.%E5%AF%BB%E6%89%BE%E5%B3%B0%E5%80%BC/"/>
    <id>https://hexo.flower48237.com/2021/11/01/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98162.%E5%AF%BB%E6%89%BE%E5%B3%B0%E5%80%BC/</id>
    <published>2021-11-01T13:45:18.397Z</published>
    <updated>2021-11-01T13:43:53.544Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>峰值元素是指其值严格大于左右相邻值的元素。</li><li>给你一个整数数组 nums，找到峰值元素并返回其索引。数组可能包含多个峰值，在这种情况下，返回 任何一个峰值 所在位置即可。</li><li>可以假设 nums[-1] = nums[n] = -∞ 。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">example</span><br><span class="line">input  : nums = &#123;1,2,3,1&#125;</span><br><span class="line">output : 2</span><br><span class="line">input  : nums = &#123;1,2,1,3,5,6,4&#125;</span><br><span class="line">output : 1 (或 5， 都对输出一个即可)</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路1 顺序遍历</strong></p><ul><li>找到第一个大于其后相邻元素值的元素返回下标即可</li><li>若遍历结束没有找到，则直接返回 nums.length - 1，即数组的最后一个元素即是一个峰值，只不过没有右邻元素做比较</li><li>因为元素值各不相等，所以找到第一个大于其后相邻元素值的元素（A）的时候，隐含的信息是A一定大于其前的所有元素</li><li>如果在A之前，有B大于A，不管B是不是A的左邻元素 【 如 ： 1，4（B），2，3（A），0；或者 1，4（B），3（A），0】，B的下标肯定早就因为大于B的值右邻元素值被返回了</li><li>时间复杂度O(n)</li></ul><p><strong>思路 二分查找</strong></p><ul><li>评论区大佬们把这方法叫做爬坡法</li><li>使用二分查找的方式，比较 nums[middle] 和  nums[middle + 1] 的大小</li><li>若 nums[middle] &gt; nums[middle + 1] 说明坡在左边，right 置为 middle</li><li>若 nums[middle] &lt;= nums[middle + 1] 说明坡在右边，left 置为 middle + 1</li><li>等号在哪侧都可以</li><li>时间复杂度O(log n)</li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findPeakElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums.length - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路2代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findPeakElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">int</span> middle = (right + left) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">// System.out.println(left + " , " + middle + " , "+ right);</span></span><br><span class="line">            <span class="keyword">if</span> (nums[middle] &gt; nums[middle + <span class="number">1</span>]) &#123;</span><br><span class="line">                right = middle;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[middle] &lt;= nums[middle + <span class="number">1</span>]) &#123;</span><br><span class="line">                left = middle + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;峰值元素是指其值严格大于左右相邻值的元素。&lt;/li&gt;
&lt;li&gt;给你一个整数数组 nums，找到峰值元素并返回其索引。数组可能包含多个峰值，在这种情况下，返回 任何一个峰值 所在位置即可。&lt;/li&gt;
&lt;li&gt;可以假设 nums[-1] = nums[n] = -∞ 。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;example&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : nums = &amp;#123;1,2,3,1&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : nums = &amp;#123;1,2,1,3,5,6,4&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : 1 (或 5， 都对输出一个即可)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://hexo.flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="数组" scheme="https://hexo.flower48237.com/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="二分查找" scheme="https://hexo.flower48237.com/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题034.在排序数组中查找元素的第一个和最后一个位置</title>
    <link href="https://hexo.flower48237.com/2021/10/31/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98034.%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE/"/>
    <id>https://hexo.flower48237.com/2021/10/31/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98034.%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE/</id>
    <published>2021-10-31T14:23:18.079Z</published>
    <updated>2021-10-31T14:21:06.185Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。</li><li>如果数组中不存在目标值 target，返回 [-1, -1]。</li><li>可以设计并实现时间复杂度为 O(log n) 的算法解决此问题吗？<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">example</span><br><span class="line">input  : nums = &#123;5,7,7,8,8,10&#125;, target = 8</span><br><span class="line">output : &#123;3,4&#125;</span><br><span class="line">input  : nums = &#123;5,7,7,8,8,10&#125;, target = 6</span><br><span class="line">output : &#123;-1,-1&#125;</span><br><span class="line">input  : nums = &#123;&#125;, target = 0</span><br><span class="line">output : &#123;-1,-1&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3></li></ul><p><strong>思路1 二分查找</strong></p><ul><li>第一个位置是找nums[i] &gt;= target</li><li>最后一个位置是找nums[i] &gt; target</li><li>时间复杂度O(log n)</li></ul><p><strong>思路2 双指针</strong></p><ul><li>双向遍历，向中间收缩</li><li>第一个位置找第一个不小于 target 的元素下标</li><li>最后一个位置找第一个不大于 target 的元素下标</li><li>时间复杂度O(n)</li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] searchRange(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span> || target &lt; nums[<span class="number">0</span>] || target &gt; nums[nums.length - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left = findIndex(nums, target);</span><br><span class="line">        <span class="keyword">int</span> right = findIndex(nums, target + <span class="number">1</span>) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (left &gt; right) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;left, right&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">findIndex</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="comment">// System.out.println(left + " , " + right);</span></span><br><span class="line">            <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt;= target) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路2代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] searchRange(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] result = &#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> length = nums.length;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span> || target &lt; nums[<span class="number">0</span>] || target &gt; nums[length - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (nums[left] &lt; target) &#123;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums[left] == target) &#123;</span><br><span class="line">            result[<span class="number">0</span>] = left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (nums[right] &gt; target) &#123;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums[right] == target) &#123;</span><br><span class="line">            result[<span class="number">1</span>] = right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 执行到此处，若left为-1，说明数组中没有target元素，则right一定为-1，不需要额外的判断了。</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。&lt;/li&gt;
&lt;li&gt;如果数组中不存在目标值 target，返回 [-1, -1]。&lt;/li&gt;
&lt;li&gt;可以设计并实现时间复杂度为 O(log n) 的算法解决此问题吗？&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;example&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : nums = &amp;#123;5,7,7,8,8,10&amp;#125;, target = 8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : &amp;#123;3,4&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : nums = &amp;#123;5,7,7,8,8,10&amp;#125;, target = 6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : &amp;#123;-1,-1&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : nums = &amp;#123;&amp;#125;, target = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : &amp;#123;-1,-1&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题033.搜索旋转排序数组</title>
    <link href="https://hexo.flower48237.com/2021/10/30/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98033.%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/"/>
    <id>https://hexo.flower48237.com/2021/10/30/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98033.%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/</id>
    <published>2021-10-30T13:24:35.287Z</published>
    <updated>2021-10-30T13:24:16.473Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>整数数组 nums 按升序排列，数组中的值 互不相同 。<br>在传递给函数之前，nums 在预先未知的某个下标 k（0 &lt;= k &lt; nums.length）上进行了 旋转，使数组变为 [nums[k], nums[k+1], …, nums[n-1], nums[0], nums[1], …, nums[k-1]]（下标 从 0 开始 计数）。例如， [0,1,2,4,5,6,7] 在下标 3 处经旋转后可能变为 [4,5,6,7,0,1,2] 。</p><p>给定 旋转后 的数组 nums 和一个整数 target ，如果 nums 中存在这个目标值 target ，则返回它的下标，否则返回 -1 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">example</span><br><span class="line">input  : nums = &#123;4,5,6,7,0,1,2&#125;, target = 0</span><br><span class="line">output : 4</span><br><span class="line">input  : nums = &#123;4,5,6,7,0,1,2&#125;, target = 3</span><br><span class="line">output : -1</span><br><span class="line">input  : nums = &#123;3,1&#125;, target = 1</span><br><span class="line">output : 1</span><br><span class="line">input  : nums = &#123;1&#125;, target = 0</span><br><span class="line">output : -1</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路 二分查找</strong></p><ul><li>先找到数组旋转后的分界线，即前后两个有序数组的分界线</li><li>根据 target 的大小，决定在左侧有序数组还是右侧有序数组进行二分查找</li><li>执行二分查找确定目标位置</li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> div = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                div = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// System.out.println(div);</span></span><br><span class="line">        <span class="comment">// 二分查找</span></span><br><span class="line">        <span class="keyword">int</span> left, right;</span><br><span class="line">        <span class="keyword">int</span> length = nums.length;</span><br><span class="line">        <span class="keyword">if</span> (nums[div] &gt;= target &amp;&amp; nums[<span class="number">0</span>] &lt;= target) &#123;</span><br><span class="line">            left = <span class="number">0</span>;</span><br><span class="line">            right = div;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[length - <span class="number">1</span>] &gt;= target) &#123;</span><br><span class="line">            left = div + <span class="number">1</span>;</span><br><span class="line">            right = length - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// System.out.println(left + "," + right);</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="comment">// 防止溢出，通常可写作 middle = (right + left) / 2</span></span><br><span class="line">            <span class="keyword">int</span> middle = (right - left) / <span class="number">2</span> + left;</span><br><span class="line">            <span class="keyword">if</span> (target == nums[middle] &amp;&amp; left &lt;= right) &#123;</span><br><span class="line">                <span class="keyword">return</span> middle;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (target &gt; nums[middle] &amp;&amp; left &lt;= right) &#123;</span><br><span class="line">                left = middle + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target &lt; nums[middle] &amp;&amp; left &lt;= right) &#123;</span><br><span class="line">                right = middle - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;整数数组 nums 按升序排列，数组中的值 互不相同 。&lt;br&gt;在传递给函数之前，nums 在预先未知的某个下标 k（0 &amp;lt;= k &amp;lt; nums.length）上进行了 旋转，使数组变为 [nums[k], nums[k+1], …, nums[n-1], nums[0], nums[1], …, nums[k-1]]（下标 从 0 开始 计数）。例如， [0,1,2,4,5,6,7] 在下标 3 处经旋转后可能变为 [4,5,6,7,0,1,2] 。&lt;/p&gt;
&lt;p&gt;给定 旋转后 的数组 nums 和一个整数 target ，如果 nums 中存在这个目标值 target ，则返回它的下标，否则返回 -1 。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;example&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : nums = &amp;#123;4,5,6,7,0,1,2&amp;#125;, target = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : nums = &amp;#123;4,5,6,7,0,1,2&amp;#125;, target = 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : -1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : nums = &amp;#123;3,1&amp;#125;, target = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : nums = &amp;#123;1&amp;#125;, target = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : -1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://hexo.flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="数组" scheme="https://hexo.flower48237.com/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="二分查找" scheme="https://hexo.flower48237.com/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题94.二叉树的中序遍历</title>
    <link href="https://hexo.flower48237.com/2021/10/28/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98094.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <id>https://hexo.flower48237.com/2021/10/28/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98094.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/</id>
    <published>2021-10-28T14:47:43.035Z</published>
    <updated>2021-10-28T14:47:21.515Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个二叉树的根节点 root ，返回它的 中序 遍历。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">example</span><br><span class="line">input  : root = [1,null,2,3]</span><br><span class="line">output : [1,3,2]</span><br><span class="line">input  : root = []</span><br><span class="line">output : []</span><br><span class="line">input  : root = [1]</span><br><span class="line">output : [1]</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路1 递归</strong><br>典型的递归遍历树结构。</p><p><strong>思路2 迭代</strong><br>通过栈模拟递归的实现过程。<br>递归的时候隐式地维护了一个栈，而我们在迭代的时候需要显式地将这个栈模拟出来。</p><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        middleReader(root, list);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">middleReader</span><span class="params">(TreeNode root, List&lt;Integer&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        middleReader(root.left, list);</span><br><span class="line">        list.add(root.val);</span><br><span class="line">        middleReader(root.right, list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路2代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (root != <span class="keyword">null</span> || !stack.empty()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stack.push(root);</span><br><span class="line">                root = root.left;</span><br><span class="line">            &#125;</span><br><span class="line">            root = stack.pop();</span><br><span class="line">            list.add(root.val);</span><br><span class="line">            root = root.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;给定一个二叉树的根节点 root ，返回它的 中序 遍历。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;example&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : root = [1,null,2,3]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : [1,3,2]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : root = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : root = [1]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : [1]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://hexo.flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="遍历" scheme="https://hexo.flower48237.com/tags/%E9%81%8D%E5%8E%86/"/>
    
    <category term="列表" scheme="https://hexo.flower48237.com/tags/%E5%88%97%E8%A1%A8/"/>
    
    <category term="树" scheme="https://hexo.flower48237.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题125.验证回文串</title>
    <link href="https://hexo.flower48237.com/2021/10/27/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98125.%E9%AA%8C%E8%AF%81%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
    <id>https://hexo.flower48237.com/2021/10/27/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98125.%E9%AA%8C%E8%AF%81%E5%9B%9E%E6%96%87%E4%B8%B2/</id>
    <published>2021-10-27T15:53:54.622Z</published>
    <updated>2021-10-27T15:53:35.513Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。</li><li>将空字符串定义为有效的回文串。</li><li>1 &lt;= s.length &lt;= 2 * 10^5</li><li>字符串 s 由 ASCII 字符组成<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">example</span><br><span class="line">input  : <span class="string">"A man, a plan, a canal: Pana</span></span><br><span class="line"><span class="string">output : true</span></span><br><span class="line"><span class="string">input  : "</span>race a car<span class="string">"</span></span><br><span class="line"><span class="string">output : false</span></span><br><span class="line"><span class="string">input  : "</span>0p<span class="string">"</span></span><br><span class="line"><span class="string">output : false</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>首先对字符串进行大小写转换，全部转成小写toLowerCase（也可以是大写toUpperCase），然后使用trim去掉空格，得到string。</li></ul></li></ul><p><strong>思路1 for 循环</strong><br>从0到string.length/2循环，比较下标 i 和对应下标 string.length - 1 - i 处元素是否相同。若否则直接return false，是则继续循环。<br><strong>思路2 while 循环 原理同1</strong><br>设置left = 0， right = string.length - 1, left 不断向右加1，right 不断向左减1，比较对应元素是否相同。若否则返回false，是则继续循环。<br><strong>思路3 借助Java中字符串的reserve()方法</strong><br>创建一个新的字符串 newString 为 string的反转串，此处借助reserve()方法。直接返回newString.equals(string)的判断结果。</p><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        s = s.toLowerCase().trim();</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> ch = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (ch &gt;= <span class="string">'a'</span> &amp;&amp; ch &lt;= <span class="string">'z'</span>) &#123;</span><br><span class="line">                stringBuilder.append(ch);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">                stringBuilder.append(ch);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> length = stringBuilder.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (stringBuilder.charAt(i) != stringBuilder.charAt(length - <span class="number">1</span> - i)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路2代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        String str = s;</span><br><span class="line">        str = str.toLowerCase().trim();</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> ch = str.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (ch &gt;= <span class="string">'a'</span> &amp;&amp; ch &lt;= <span class="string">'z'</span>) &#123;</span><br><span class="line">                stringBuilder.append(ch);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">                stringBuilder.append(ch);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = stringBuilder.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (stringBuilder.charAt(left++) != stringBuilder.charAt(right--)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路3代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        s = s.toLowerCase().trim();</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> ch = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (ch &gt;= <span class="string">'a'</span> &amp;&amp; ch &lt;= <span class="string">'z'</span>) &#123;</span><br><span class="line">                stringBuilder.append(ch);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">                stringBuilder.append(ch);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder reserve = <span class="keyword">new</span> StringBuilder(stringBuilder).reverse();</span><br><span class="line">        <span class="keyword">return</span> reserve.toString().equals(stringBuilder.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。&lt;/li&gt;
&lt;li&gt;将空字符串定义为有效的回文串。&lt;/li&gt;
&lt;li&gt;1 &amp;lt;= s.length &amp;lt;= 2 * 10^5&lt;/li&gt;
&lt;li&gt;字符串 s 由 ASCII 字符组成&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;example&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : &lt;span class=&quot;string&quot;&gt;&quot;A man, a plan, a canal: Pana&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;output : true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;input  : &quot;&lt;/span&gt;race a car&lt;span class=&quot;string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;output : false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;input  : &quot;&lt;/span&gt;0p&lt;span class=&quot;string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;output : false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://hexo.flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="字符串" scheme="https://hexo.flower48237.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题88.合并两个有序数组</title>
    <link href="https://hexo.flower48237.com/2021/10/25/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98088.%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/"/>
    <id>https://hexo.flower48237.com/2021/10/25/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98088.%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/</id>
    <published>2021-10-25T12:08:07.995Z</published>
    <updated>2021-10-25T12:06:25.561Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定两个 非递减顺序 排列的整数数组 nums1 和 nums2，另有两个整数m和n，分别表示nums1和nums2中的元素数目。</li><li>合并nums2到nums1中，使合并后的数组同样按 非递减顺序 排列。最终合并后数组不应由函数返回，而是存储在数组 nums1 中。</li><li>为了应对这种情况，nums1 的初始长度为 m + n，其中前 m 个元素表示应合并的元素，后 n 个元素为 0 ，应忽略。nums2 的长度为 n 。</li><li>nums1.length == m + n; </li><li>nums2.length == n</li><li>0 &lt;= m, n &lt;= 200</li><li>1 &lt;= m + n &lt;= 200</li><li>-109 &lt;= nums1[i], nums2[j] &lt;= 109</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">example</span><br><span class="line">input  : nums1 = &#123;1,2,3,0,0,0&#125;, m = 3, nums2 = &#123;2,5,6&#125;, n = 3</span><br><span class="line">output : &#123;1,2,2,3,5,6&#125;</span><br><span class="line">input  : nums1 = &#123;1&#125;, m = 1, nums2 = &#123;&#125;, n = 0</span><br><span class="line">output : &#123;1&#125;</span><br><span class="line">input  : nums1 = &#123;0&#125;, m = 0, nums2 = &#123;2&#125;, n = 1</span><br><span class="line">output : &#123;2&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="关键点：两个数组都是有序数组"><a href="#关键点：两个数组都是有序数组" class="headerlink" title="关键点：两个数组都是有序数组"></a>关键点：两个数组都是有序数组</h4><p><strong>思路1 逆序双指针</strong></p><ul><li>因为nums1的后几位是与nums2等长的0元素，所以逆序用双指针分别指向两个数组末尾，找到最大元素，将其值赋给nums1尾部，依次循环向前</li><li>当某个指针遍历结束时停止第一轮遍历，此时肯定有一个数组已经被完全纳入到nums1尾部</li><li>且此时并不会对nums1和nums2这两个数组的未排序元素造成影响</li><li>之后，若nums1未被全部遍历，则不需要继续处理，因为此时数组必定已经有序；若nums2未被全部遍历，则需继续逆序遍历nums2，将其元素值依次赋值到nums1中</li></ul><p><strong>思路2 合并数组后排序</strong></p><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> m, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> length = m + n;</span><br><span class="line">        <span class="keyword">int</span> i = m - <span class="number">1</span>, j = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            nums1[--length] = nums1[i] &gt; nums2[j] ? nums1[i--] : nums2[j--];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            nums1[--length] = nums1[i--];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            nums1[--length] = nums2[j--];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路2代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> m, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            nums1[i + m] = nums2[i];</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(nums1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定两个 非递减顺序 排列的整数数组 nums1 和 nums2，另有两个整数m和n，分别表示nums1和nums2中的元素数目。&lt;/li&gt;
&lt;li&gt;合并nums2到nums1中，使合并后的数组同样按 非递减顺序 排列。最终合并后数组不应由函数返回，而是存储在数组 nums1 中。&lt;/li&gt;
&lt;li&gt;为了应对这种情况，nums1 的初始长度为 m + n，其中前 m 个元素表示应合并的元素，后 n 个元素为 0 ，应忽略。nums2 的长度为 n 。&lt;/li&gt;
&lt;li&gt;nums1.length == m + n; &lt;/li&gt;
&lt;li&gt;nums2.length == n&lt;/li&gt;
&lt;li&gt;0 &amp;lt;= m, n &amp;lt;= 200&lt;/li&gt;
&lt;li&gt;1 &amp;lt;= m + n &amp;lt;= 200&lt;/li&gt;
&lt;li&gt;-109 &amp;lt;= nums1[i], nums2[j] &amp;lt;= 109&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;example&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : nums1 = &amp;#123;1,2,3,0,0,0&amp;#125;, m = 3, nums2 = &amp;#123;2,5,6&amp;#125;, n = 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : &amp;#123;1,2,2,3,5,6&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : nums1 = &amp;#123;1&amp;#125;, m = 1, nums2 = &amp;#123;&amp;#125;, n = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : &amp;#123;1&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : nums1 = &amp;#123;0&amp;#125;, m = 0, nums2 = &amp;#123;2&amp;#125;, n = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : &amp;#123;2&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://hexo.flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="数组" scheme="https://hexo.flower48237.com/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="排序" scheme="https://hexo.flower48237.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题20.有效的括号</title>
    <link href="https://hexo.flower48237.com/2021/10/23/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98020.%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/"/>
    <id>https://hexo.flower48237.com/2021/10/23/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98020.%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</id>
    <published>2021-10-23T13:18:20.201Z</published>
    <updated>2021-10-23T13:17:56.306Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。</li><li>有效字符串需满足：</li><li>①左括号必须用相同类型的右括号闭合。</li><li>②左括号必须以正确的顺序闭合。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">example</span><br><span class="line">input  : s = <span class="string">"()"</span></span><br><span class="line">output : <span class="literal">true</span></span><br><span class="line">input  : s = <span class="string">"()[]&#123;&#125;"</span></span><br><span class="line">output : <span class="literal">true</span></span><br><span class="line">input  : s = <span class="string">"([)]"</span></span><br><span class="line">output : <span class="literal">false</span></span><br><span class="line">input  : s = <span class="string">"(]"</span></span><br><span class="line">output : <span class="literal">false</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><strong>借助栈</strong><ul><li>遍历字符串数组</li><li>遇到左括号直接入栈</li><li>遇到右括号<ul><li>若栈为空：直接返回false</li><li>若栈不为空：获取栈顶元素是否为与其配对的左括号<ul><li>若匹配则栈顶元素出栈，继续循环</li><li>若不匹配则返回false<h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == <span class="string">'('</span> || s.charAt(i) == <span class="string">'['</span> || s.charAt(i) == <span class="string">'&#123;'</span>) &#123;</span><br><span class="line">                stack.push(s.charAt(i));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == <span class="string">')'</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (stack.empty() || stack.peek() != <span class="string">'('</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    stack.pop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.charAt(i) == <span class="string">']'</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (stack.empty() || stack.peek() != <span class="string">'['</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    stack.pop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.charAt(i) == <span class="string">'&#125;'</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (stack.empty() || stack.peek() != <span class="string">'&#123;'</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    stack.pop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!stack.empty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。&lt;/li&gt;
&lt;li&gt;有效字符串需满足：&lt;/li&gt;
&lt;li&gt;①左括号必须用相同类型的右括号闭合。&lt;/li&gt;
&lt;li&gt;②左括号必须以正确的顺序闭合。&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;example&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : s = &lt;span class=&quot;string&quot;&gt;&quot;()&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : s = &lt;span class=&quot;string&quot;&gt;&quot;()[]&amp;#123;&amp;#125;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : s = &lt;span class=&quot;string&quot;&gt;&quot;([)]&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : s = &lt;span class=&quot;string&quot;&gt;&quot;(]&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://hexo.flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="字符串" scheme="https://hexo.flower48237.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="字符匹配" scheme="https://hexo.flower48237.com/tags/%E5%AD%97%E7%AC%A6%E5%8C%B9%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题69.Sqrt(x)</title>
    <link href="https://hexo.flower48237.com/2021/10/22/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98069.Sqrt(x)/"/>
    <id>https://hexo.flower48237.com/2021/10/22/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98069.Sqrt(x)/</id>
    <published>2021-10-22T06:54:24.951Z</published>
    <updated>2021-10-22T07:02:41.590Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个非负整数 x ，计算并返回 x 的 算术平方根 。<br>由于返回类型是整数，结果只保留 整数部分 ，小数部分将被舍去 。<br>不允许使用任何内置指数函数和算符，例如 pow(x, 0.5) 或者 x ** 0.5 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">example</span><br><span class="line">input  : x = 4</span><br><span class="line">output : 2</span><br><span class="line">input  : x = 8</span><br><span class="line">output : 2</span><br><span class="line">note   : 8 的算术平方根是 2.82842..., 由于返回类型是整数，小数部分将被舍去。</span><br><span class="line">input  : x = 2147483647</span><br><span class="line">output : 46340</span><br><span class="line">note   : 可能会存在溢出情况的计算边界，需要注意</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路1 直接比较</strong></p><ul><li>从1遍历到x的一半，遍历过程中不断比较，效率较低</li><li>时间复杂度O(n)</li><li>空间复杂度O(1)</li></ul><p><strong>思路2 二分查找</strong><br>使用二分查找并做比较，效率比思路1高</p><ul><li>时间复杂度O(log n)</li><li>空间复杂度O(1)</li></ul><p><strong>思路3 牛顿迭代法</strong><br>递归使用<a href="https://leetcode-cn.com/problems/sqrtx/solution/niu-dun-die-dai-fa-by-loafer/" target="_blank" rel="noopener">牛顿迭代法</a>，该方法为二次收敛，效率比思路2略高</p><ul><li>时间复杂度O(log n)</li><li>空间复杂度O(1)<h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3></li></ul><p><strong>思路1代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mySqrt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> y = x;</span><br><span class="line">        <span class="keyword">long</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> middle = x / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (result = <span class="number">1</span>; result &lt;= middle; result++) &#123;</span><br><span class="line">            <span class="keyword">long</span> compare = result * result;</span><br><span class="line">            <span class="keyword">if</span> (compare &gt; y) &#123;</span><br><span class="line">                <span class="keyword">return</span> (<span class="keyword">int</span>)result - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (compare == y) &#123;</span><br><span class="line">                <span class="keyword">return</span> (<span class="keyword">int</span>)result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路2代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mySqrt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = x;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">int</span> middle = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="keyword">long</span>) middle * middle &lt;= x) &#123;</span><br><span class="line">                left = middle + <span class="number">1</span>;</span><br><span class="line">                result = middle;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = middle - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mySqrt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> c = x;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) sqrt(x, c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">sqrt</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> result = (x + c / x) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (result == x) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> sqrt(result, c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;给定一个非负整数 x ，计算并返回 x 的 算术平方根 。&lt;br&gt;由于返回类型是整数，结果只保留 整数部分 ，小数部分将被舍去 。&lt;br&gt;不允许使用任何内置指数函数和算符，例如 pow(x, 0.5) 或者 x ** 0.5 。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;example&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : x = 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : x = 8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;note   : 8 的算术平方根是 2.82842..., 由于返回类型是整数，小数部分将被舍去。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : x = 2147483647&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : 46340&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;note   : 可能会存在溢出情况的计算边界，需要注意&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://hexo.flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="数值计算" scheme="https://hexo.flower48237.com/tags/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    
    <category term="二分查找" scheme="https://hexo.flower48237.com/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
    <category term="迭代" scheme="https://hexo.flower48237.com/tags/%E8%BF%AD%E4%BB%A3/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题66.加一</title>
    <link href="https://hexo.flower48237.com/2021/10/21/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98066.%E5%8A%A0%E4%B8%80/"/>
    <id>https://hexo.flower48237.com/2021/10/21/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98066.%E5%8A%A0%E4%B8%80/</id>
    <published>2021-10-21T12:55:58.020Z</published>
    <updated>2021-10-21T12:55:14.037Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。<br>最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。<br>假设除了整数 0 之外，这个整数不会以零开头</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">example</span><br><span class="line">input  : &#123;0&#125;</span><br><span class="line">output : &#123;1&#125;</span><br><span class="line">input  : &#123;1,9&#125;</span><br><span class="line">output : &#123;2,0&#125;</span><br><span class="line">input  : &#123;9,9,9&#125;</span><br><span class="line">output : &#123;1,0,0,0&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路1 借助大数BigDecimal</strong></p><ul><li>先将数组转换为StringBuilder sb</li><li>再借助sb生成大数bd，使用大数的运算规则做加一</li><li>将大数bd转换为字符串s，再将s转换为数组</li><li>时间复杂度O(n)</li><li>空间复杂度O(n)</li></ul><p><strong>思路2 逆序遍历做加法</strong></p><ul><li>按照最基本的想法，做逆向遍历，做加法</li><li>若最后一位加1后等于10则置0并进位，进入循环计算，直至某次计算不需要进位，或者进位到数组开头（此时需要扩展数组长度都+1，并将首位置1，后续全为0）</li><li>若最后一位加1后不为10则直接为其赋新值并返回数组</li><li>时间复杂度O(n)</li><li>空间复杂度O(n)</li></ul><p><strong>思路3 逆向遍历找最长的后缀“9……9”串</strong></p><ul><li>逆向遍历，找最长的连续“999……9”串string，直至找到第一个不为9的数值（记录位置index），或者全部为9逆向遍历到数组开头</li><li>若string的长度不等于数组长度，则使index位置的数值加1，并置其后续所有数组元素为0</li><li>若string的长度等于数组长度，则扩展数组长度+1，置首位为1，后续全为0</li><li>时间复杂度O(n)</li><li>空间复杂度O(n)<h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3></li></ul><p><strong>思路1代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] plusOne(<span class="keyword">int</span>[] digits) &#123;</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; digits.length; i++) &#123;</span><br><span class="line">            stringBuilder.append(digits[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        BigDecimal bigDecimal = <span class="keyword">new</span> BigDecimal(stringBuilder.toString());</span><br><span class="line">        bigDecimal = bigDecimal.add(<span class="keyword">new</span> BigDecimal(<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">"big decimal:"</span> + bigDecimal);</span><br><span class="line">        String string = bigDecimal.toString();</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[string.length()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; string.length(); i++) &#123;</span><br><span class="line">            result[i] = string.charAt(i) - <span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路2代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] plusOne(<span class="keyword">int</span>[] digits) &#123;</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; digits.length; i ++) &#123;</span><br><span class="line">            stringBuilder.append(digits[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> add = stringBuilder.charAt(stringBuilder.length() - <span class="number">1</span>) - <span class="string">'0'</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (add != <span class="number">10</span>) &#123;</span><br><span class="line">            stringBuilder.setCharAt(stringBuilder.length() - <span class="number">1</span>,String.valueOf(add).charAt(<span class="number">0</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (stringBuilder.length() == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span>[] result = &#123;<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stringBuilder.length() &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">                stringBuilder.setCharAt(stringBuilder.length() - <span class="number">1</span>,<span class="string">'0'</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = stringBuilder.length() - <span class="number">2</span>; j &gt;= <span class="number">0</span>; j --) &#123;</span><br><span class="line">                    add = stringBuilder.charAt(j) - <span class="string">'0'</span> + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (add == <span class="number">10</span>) &#123;</span><br><span class="line">                        stringBuilder.setCharAt(j, <span class="string">'0'</span>);</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        stringBuilder.setCharAt(j, String.valueOf(add).charAt(<span class="number">0</span>));</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(add == <span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[stringBuilder.length() + <span class="number">1</span>];</span><br><span class="line">            result[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; result.length; k ++) &#123;</span><br><span class="line">                result[k] = stringBuilder.charAt(k - <span class="number">1</span>) - <span class="string">'0'</span>;</span><br><span class="line">                System.out.print(result[k]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[stringBuilder.length()];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; result.length; k ++) &#123;</span><br><span class="line">                result[k] = stringBuilder.charAt(k) - <span class="string">'0'</span>;</span><br><span class="line">                System.out.print(result[k]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路3代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] plusOne(<span class="keyword">int</span>[] digits) &#123;</span><br><span class="line">        <span class="keyword">int</span> length = digits.length;</span><br><span class="line">        <span class="keyword">int</span> last = length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (last &gt;= <span class="number">0</span> &amp;&amp; digits[last] == <span class="number">9</span>) &#123;</span><br><span class="line">            last--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (last + <span class="number">1</span> != length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (last == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[digits.length + <span class="number">1</span>];</span><br><span class="line">                result[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (last != -<span class="number">1</span>) &#123;</span><br><span class="line">                digits[last]++;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = last + <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">                    digits[i] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> digits;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (last + <span class="number">1</span> == length) &#123;</span><br><span class="line">            digits[length - <span class="number">1</span>]++;</span><br><span class="line">            <span class="keyword">return</span> digits;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> digits;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。&lt;br&gt;最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。&lt;br&gt;假设除了整数 0 之外，这个整数不会以零开头&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;example&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : &amp;#123;0&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : &amp;#123;1&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : &amp;#123;1,9&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : &amp;#123;2,0&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : &amp;#123;9,9,9&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : &amp;#123;1,0,0,0&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://hexo.flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="数值计算" scheme="https://hexo.flower48237.com/tags/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    
    <category term="数组" scheme="https://hexo.flower48237.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选面试题326.3的幂</title>
    <link href="https://hexo.flower48237.com/2021/10/20/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98326.3%E7%9A%84%E5%B9%82/"/>
    <id>https://hexo.flower48237.com/2021/10/20/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98326.3%E7%9A%84%E5%B9%82/</id>
    <published>2021-10-20T12:16:14.687Z</published>
    <updated>2021-10-20T12:13:45.046Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个整数，写一个函数来判断它是否是 3 的幂次方。若是，返回 true ；否则，返回 false 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">example</span><br><span class="line">input  : n = 0</span><br><span class="line">output : <span class="literal">false</span></span><br><span class="line">input  : n = 9</span><br><span class="line">output : <span class="literal">true</span></span><br><span class="line">input  : n = 45</span><br><span class="line">output : <span class="literal">false</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路1</strong><br>从n往1做除法<br><strong>思路2</strong><br>从1往n做乘法</p><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">0</span> &amp;&amp; n % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            n /= <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路2代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">3</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 防止超时，先做一次判断，把不能整除3的都筛除，对3取余是0的数值包含了3的幂次方</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">            i *= <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n == i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;给定一个整数，写一个函数来判断它是否是 3 的幂次方。若是，返回 true ；否则，返回 false 。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;example&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : n = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : n = 9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : n = 45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://hexo.flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="数值计算" scheme="https://hexo.flower48237.com/tags/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题234.回文链表</title>
    <link href="https://hexo.flower48237.com/2021/10/19/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98234.%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/"/>
    <id>https://hexo.flower48237.com/2021/10/19/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98234.%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/</id>
    <published>2021-10-19T14:41:51.052Z</published>
    <updated>2021-10-21T12:59:12.680Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个单链表的头节点 head ，判断该链表是否为回文链表。若是，返回 true ；否则，返回 false 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">example</span><br><span class="line">input  : head = 1-&gt;2-&gt;2-&gt;1</span><br><span class="line">output : <span class="literal">true</span></span><br><span class="line">input  : head = 1-&gt;2</span><br><span class="line">output : <span class="literal">false</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路1</strong></p><ul><li>头插法改变后半部分链表</li><li>时间复杂度O(n)</li><li>空间复杂度O(n)</li></ul><p><strong>思路2</strong></p><ul><li>头插法改变前半部分链表</li><li>时间复杂度O(n)</li><li>空间复杂度O(n)</li></ul><p><strong>思路3</strong></p><ul><li>借助栈，不改变链表结构，只对比节点数值。</li><li>时间复杂度O(n)</li><li>空间复杂度O(n)<h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3></li></ul><p><strong>思路1代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 改变后半部分节点，头插法</span></span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">        ListNode p = head;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            length++;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        p = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (length % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode q = p;</span><br><span class="line">        ListNode newHead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        newHead.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length / <span class="number">2</span> &amp;&amp; p != <span class="keyword">null</span>; i++) &#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">            q.next = newHead;</span><br><span class="line">            newHead = q;</span><br><span class="line">            q = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length / <span class="number">2</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (newHead.val != head.val) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            head = head.next;</span><br><span class="line">            newHead = newHead.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路2代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 改变前半部分节点，头插法</span></span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">        ListNode p = head;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            length++;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        p = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode newList = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        newList.next = <span class="keyword">null</span>;</span><br><span class="line">        p = head;</span><br><span class="line">        ListNode q = p;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">            q.next = newList.next;</span><br><span class="line">            newList.next = q;</span><br><span class="line">            q = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (length % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        q = newList.next;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length / <span class="number">2</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (q.val != p.val) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p.next;</span><br><span class="line">            q = q.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路2代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">        ListNode p = head;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            length++;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        p = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            stack.push(p.val);</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (length % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length / <span class="number">2</span> &amp;&amp; p != <span class="keyword">null</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (stack.pop() != p.val) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>链表类定义</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode next;</span><br><span class="line"></span><br><span class="line">    ListNode() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ListNode(<span class="keyword">int</span> val) &#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ListNode(<span class="keyword">int</span> val, ListNode next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>** Main函数 **</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ListNode head = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        head.next = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        head.next.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        head.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        head.next.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        head.next.next.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        ListNode p = head;</span><br><span class="line"></span><br><span class="line">        p = head.next;</span><br><span class="line">        <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(p.val + <span class="string">"-&gt;"</span>);</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(p.val);</span><br><span class="line">        System.out.println(<span class="string">"solution3 and solution2 will not change the structure of list, solution1 will change it.\n"</span>);</span><br><span class="line">        System.out.println(<span class="string">"==solution3============="</span>);</span><br><span class="line">        Solution3 solution3 = <span class="keyword">new</span> Solution3();</span><br><span class="line">        <span class="keyword">boolean</span> result3 = solution3.isPalindrome(head.next);</span><br><span class="line">        System.out.println(<span class="string">"result3 : "</span> + result3);</span><br><span class="line">        System.out.println(<span class="string">"==after solution3======="</span>);</span><br><span class="line">        p = head.next;</span><br><span class="line">        <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(p.val + <span class="string">"-&gt;"</span>);</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(p.val);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * solution 2 和 solution 3 不能同时调用</span></span><br><span class="line"><span class="comment">         * 因为使用其中一个后会改变链表结构。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">"\n==solution2============="</span>);</span><br><span class="line">        Solution2 solution2 = <span class="keyword">new</span> Solution2();</span><br><span class="line">        <span class="keyword">boolean</span> result2 = solution2.isPalindrome(head.next);</span><br><span class="line">        System.out.println(<span class="string">"result2 : "</span> + result2);</span><br><span class="line">        System.out.println(<span class="string">"==after solution2======="</span>);</span><br><span class="line">        p = head.next;</span><br><span class="line">        <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(p.val + <span class="string">"-&gt;"</span>);</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(p.val);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"\n==solution1============="</span>);</span><br><span class="line">        Solution1 solution1 = <span class="keyword">new</span> Solution1();</span><br><span class="line">        <span class="keyword">boolean</span> result1 = solution1.isPalindrome(head.next);</span><br><span class="line">        System.out.println(<span class="string">"result1 : "</span> + result1);</span><br><span class="line">        System.out.println(<span class="string">"==after solution1======="</span>);</span><br><span class="line">        p = head.next;</span><br><span class="line">        <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(p.val + <span class="string">"-&gt;"</span>);</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(p.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;给定一个单链表的头节点 head ，判断该链表是否为回文链表。若是，返回 true ；否则，返回 false 。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;example&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : head = 1-&amp;gt;2-&amp;gt;2-&amp;gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : head = 1-&amp;gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://hexo.flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="链表" scheme="https://hexo.flower48237.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选面试题14.最长公共前缀</title>
    <link href="https://hexo.flower48237.com/2021/10/18/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98014.%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/"/>
    <id>https://hexo.flower48237.com/2021/10/18/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98014.%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/</id>
    <published>2021-10-18T13:59:36.286Z</published>
    <updated>2021-10-18T14:05:22.705Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>编写一个函数来查找字符串数组中的最长公共前缀。如果不存在公共前缀，返回空字符串 “”。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">example</span><br><span class="line">input  : str1 = &#123;<span class="string">"flower"</span>,<span class="string">"flow"</span>,<span class="string">"flight"</span>&#125;</span><br><span class="line">output : <span class="string">"fl"</span></span><br><span class="line">input  : str2 = &#123;<span class="string">"dog"</span>,<span class="string">"race"</span>,<span class="string">"car"</span>&#125;</span><br><span class="line">output : <span class="string">""</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路1</strong></p><ul><li>纵向扫描，直接遍历对比。从前向后遍历所有字符串的每一列，比较相同列上的字符是否相同。<br>如果相同则继续对下一列进行比较，如果不相同则当前列不再属于公共前缀，当前列之前的部分就是最长公共前缀。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1   2   3   4   5   6</span><br><span class="line">---------------------</span><br><span class="line">f   l   o   w   e   r</span><br><span class="line"></span><br><span class="line">f   l   o   w</span><br><span class="line"></span><br><span class="line">f   l   i   g   h   t</span><br></pre></td></tr></table></figure></li><li>时间复杂度：O(mn)，m是数组中的字符串的平均长度，n是字符串数量。最坏情况下数组中每个字符串的每个字符都会被比较一次。</li><li>空间复杂度：O(1)。使用的额外空间复杂度为常数。</li></ul><p><strong>思路2</strong></p><ul><li><p>分治策略</p></li><li><p>最长公共前缀（LCP）的计算满足结合律</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LCP(S1,……,Sn) = LCP(LCP(S1,……,Sk),LCP(Sk+1,……,Sn))</span><br></pre></td></tr></table></figure></li><li><p>时间复杂度：O(mn)，m是数组中的字符串的平均长度，n是字符串数量。<br>递推公式：T(n) = 2 × T(n/2)+O(m) =&gt; T(n)=O(mn)</p></li><li><p>空间复杂度：O(m × log n)，其中m是字符串数组中的字符串的平均长度，n是字符串的数量。<br>空间复杂度主要取决于递归调用的层数，层数最大为log n，每层需要m的空间存储返回结果。</p><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3></li></ul><p><strong>思路1代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (strs == <span class="keyword">null</span> || strs.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// solution1</span></span><br><span class="line">        <span class="keyword">int</span> length = strs[<span class="number">0</span>].length();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; length; k ++)&#123;</span><br><span class="line">            <span class="keyword">char</span> ch = strs[<span class="number">0</span>].charAt(k);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(k == strs[i].length() || strs[i].charAt(k) != ch)&#123;</span><br><span class="line">                    <span class="keyword">return</span> strs[<span class="number">0</span>].substring(<span class="number">0</span>, k);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> strs[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路2代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (strs == <span class="keyword">null</span> || strs.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * solution2 divide and conquer</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> divideAndConquer(strs, <span class="number">0</span>, strs.length - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">divideAndConquer</span><span class="params">(String[] strings, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start == end) &#123;</span><br><span class="line">            <span class="keyword">return</span> strings[start];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 防止加法溢出</span></span><br><span class="line">            <span class="keyword">int</span> middle = (end - start) / <span class="number">2</span> + start;</span><br><span class="line">            String lcpLeft = divideAndConquer(strings, start, middle);</span><br><span class="line">            String lcpRight = divideAndConquer(strings, middle + <span class="number">1</span>, end);</span><br><span class="line">            <span class="keyword">return</span> commonPrefix(lcpLeft, lcpRight);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">commonPrefix</span><span class="params">(String lcpLeft, String lcpRight)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> minLength = Math.min(lcpLeft.length(), lcpRight.length());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; minLength; index++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (lcpLeft.charAt(index) != lcpRight.charAt(index)) &#123;</span><br><span class="line">                <span class="keyword">return</span> lcpLeft.substring(<span class="number">0</span>, index);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lcpLeft.substring(<span class="number">0</span>, minLength);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Main代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] strings = &#123;<span class="string">"abc"</span>,<span class="string">"ab"</span>, <span class="string">"abd"</span>&#125;;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> Solution();</span><br><span class="line">        String result = solution.longestCommonPrefix(strings);</span><br><span class="line">        System.out.println(<span class="string">"result: "</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;编写一个函数来查找字符串数组中的最长公共前缀。如果不存在公共前缀，返回空字符串 “”。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;example&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : str1 = &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;flower&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;flow&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;flight&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : &lt;span class=&quot;string&quot;&gt;&quot;fl&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : str2 = &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;dog&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;race&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;car&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://hexo.flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="字符串" scheme="https://hexo.flower48237.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="分治" scheme="https://hexo.flower48237.com/tags/%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>《The Book of Why》 — Chapter10</title>
    <link href="https://hexo.flower48237.com/2021/10/01/The%20Book%20of%20Why%20-%20Chapter%20(10)/"/>
    <id>https://hexo.flower48237.com/2021/10/01/The%20Book%20of%20Why%20-%20Chapter%20(10)/</id>
    <published>2021-10-01T08:45:00.000Z</published>
    <updated>2021-10-01T08:45:30.566Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="第十章-大数据，人工智能和大问题"><a href="#第十章-大数据，人工智能和大问题" class="headerlink" title="第十章 大数据，人工智能和大问题"></a>第十章 大数据，人工智能和大问题</h3><blockquote><p>CHAPTER 10 Big Data, Artificial Intelligence, and the  Big Questions</p></blockquote><a id="more"></a><ul><li>借助贝叶斯网络，教会了机器在灰色地带进行思考，这是贝叶斯网络迈向强人工智能的重要一步。但目前仍无法教会机器理解事情的前因后果。（323）</li><li>因果革命的星火逐渐覆盖包括流行病学、心理学、遗传学、生态学、地质学、气候科学等在内的多个专业领域。（324）</li></ul><h4 id="因果模型与大数据"><a href="#因果模型与大数据" class="headerlink" title="因果模型与大数据"></a>因果模型与大数据</h4><ul><li><p>因果问题从来不能单靠数据来回答，他要求我们构建关于数据生成过程的模型，或者至少要构建关于该过程的某些方面的模型。（325）</p></li><li><p>解释数据就意味着做出一种假设，这种假设建基于事物在现实世界中的运作方式。（326）</p></li><li><p>当变量较多时，统计估计这一步的难度不容小觑，只有借助大数据和现代机器学习技术，才有可能真正应对维度灾难。（326）</p></li><li><p>因果推断能屏蔽不相关的特征，也能从不同的研究中把这些在关键方面相似的个体聚集起来，而大数据则能让我们收集到的关于这些个体的充分信息。（326）</p></li><li><p>在一些案例中，无法将任何一项以往的相关研究所得出的效应迁移出去，但可以从这些效应的某种形式的组合中估计出目标总体的效应。（329）</p></li><li><p>do演算提供了一种确定可迁移性的一般标准：如果可以执行一系列的有效do演算，将目标效应的表达式转换为一个新的表达式，其中任何涉及S的因子都不包含do算子，则这一估计值就是可迁移的。</p><p>其遵循的逻辑很简单：任何此类因子都可以从现有数据中估计出来，且不受差异因子S的影响。（329）</p></li></ul><h4 id="强人工智能和自由意志"><a href="#强人工智能和自由意志" class="headerlink" title="强人工智能和自由意志"></a>强人工智能和自由意志</h4><ul><li>在贝叶斯网络中，信息被有意地设计为在因果和诊断两个方向上来回流动。事实上，贝叶斯网络甚至无法解释因果方向是什么。（332）</li><li>因果不对称在某些学科领域的重要性。（332）</li><li>深度学习最主要地局限体现在其无法超越因果关系之梯地第一层级（335）</li><li>谈论强人工智能时，因果模型就从奢侈品变成了必需品，强人工智能应该是能反思其行为，并能从过去的错误中吸取教训的机器，它应该能够理解“我本应该采取不同的行为”这句话，无论这句话是由人类告诉它的还是由它自己分析得出的。（336）</li><li>理解自己的意图，并用它作为因果推断的证据，具备这一能力就说明行为主体的智能已经达到了自我察觉的水平。（336）</li><li>在涉及高度自动化的人工智能系统时，应当确保其目标和行为在整个运行过程中与人类价值观保持一致。（342）</li></ul><blockquote><p>《THE BOOK OF WHY: THE NEW SCIENCE OF CAUSE AND EFFECT》</p><p>——JUDEA PEARL AND DANA MACKENZIE</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;第十章-大数据，人工智能和大问题&quot;&gt;&lt;a href=&quot;#第十章-大数据，人工智能和大问题&quot; class=&quot;headerlink&quot; title=&quot;第十章 大数据，人工智能和大问题&quot;&gt;&lt;/a&gt;第十章 大数据，人工智能和大问题&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;CHAPTER 10 Big Data, Artificial Intelligence, and the  Big Questions&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Causality" scheme="https://hexo.flower48237.com/categories/Causality/"/>
    
    
    <category term="Causality" scheme="https://hexo.flower48237.com/tags/Causality/"/>
    
    <category term="因果推断" scheme="https://hexo.flower48237.com/tags/%E5%9B%A0%E6%9E%9C%E6%8E%A8%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title>《The Book of Why》 — Chapter9</title>
    <link href="https://hexo.flower48237.com/2021/10/01/The%20Book%20of%20Why%20-%20Chapter%20(9)/"/>
    <id>https://hexo.flower48237.com/2021/10/01/The%20Book%20of%20Why%20-%20Chapter%20(9)/</id>
    <published>2021-10-01T08:45:00.000Z</published>
    <updated>2021-10-01T08:45:13.177Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="第九章-中介：寻找蕴藏的作用机制"><a href="#第九章-中介：寻找蕴藏的作用机制" class="headerlink" title="第九章 中介：寻找蕴藏的作用机制"></a>第九章 中介：寻找蕴藏的作用机制</h3><blockquote><p>CHAPTER 9 — Mediation: The Search for a Mechanism</p></blockquote><a id="more"></a><ul><li>关于中介物，一个典型的问题是：他是否可以解释全部结果？（276）</li><li>总效应、直接效应（不通过中介物）、间接效应（通过中介物）（276）</li><li>“中介”使我们能够（更经常地从匮乏的数据中）量化由任何期望路径介导的效应的比例。（276）</li><li>因果革命提供了一套明确而简单的规则，用以量化一个给定效应中直接效应和间接效应所占的比例。（277）</li></ul><h4 id="坏血病：错误的中介物"><a href="#坏血病：错误的中介物" class="headerlink" title="坏血病：错误的中介物"></a>坏血病：错误的中介物</h4><ul><li>中介分析绝不仅仅是一个抽象的数学联系。（280）</li></ul><h4 id="先天因素与后天培养：巴巴拉·伯克斯的悲剧"><a href="#先天因素与后天培养：巴巴拉·伯克斯的悲剧" class="headerlink" title="先天因素与后天培养：巴巴拉·伯克斯的悲剧"></a>先天因素与后天培养：巴巴拉·伯克斯的悲剧</h4><h4 id="寻找一种语言（伯克利大学招生悖论）"><a href="#寻找一种语言（伯克利大学招生悖论）" class="headerlink" title="寻找一种语言（伯克利大学招生悖论）"></a>寻找一种语言（伯克利大学招生悖论）</h4><ul><li><p>悖论的正确解决很大程度上取决于要回答的问题是什么。（285）</p></li><li><p>偏倚是一个不稳定的统计概念，如果采用不同的方法切分数据，偏倚就会消失。而作为一种因果概念，其实反映的是事实，因而必须保持稳定。（290）</p></li><li><p>中介谬误：以中介物为条件（对中介物进行变量控制）而不是保持中介物恒定（设其为常量）。（290）</p><p>若中介物和结果之间没有混杂，则这一错误无实际危害；</p><p>若中介物和结果之间有混杂，则这一错误完全可以反转分析结果。</p></li><li><p>总体的直接效应根据其定义就应取决于子总体直接效应的总和。</p><p>简言之，每个局部的公平就意味着总体的公平！（291）</p></li></ul><h4 id="黛西、小猫和间接效应"><a href="#黛西、小猫和间接效应" class="headerlink" title="黛西、小猫和间接效应"></a>黛西、小猫和间接效应</h4><ul><li><p>受控直接效应CDE（controlled direct effect）</p><p>CDE(0) = P(Y=1|do(X=1), do(M=0))- P(Y=1|do(X=0),do(M=0))</p><p>CDE(1) = P(Y=1|do(X=1), do(M=1)) - P(Y=1|do(X=0),do(M=1))  (9.1)</p></li><li><p>自然直接效应NDE（natural direct effect）</p><p>NDE = P(Y<del>M=M0</del>=1|do(X=1)) - P(Y<del>M=M0</del>=1|do(X=0))  (9.2)</p></li><li><p>自然间接效应NIE（natural indirect effect），指的是结果的预期变化。</p><p>NIE = P(Y<del>M=M1</del>=1|do(X=0)) - P(Y<del>M=M0</del>=1|do(X=0))  (9.3)</p></li><li><p>中介公式使NDE成为一种真正实用的工具。实现了从观测到的数据中将其直接估算出来的目标。（293-294）</p></li><li><p>SCM中的方程具有确定性性质（296）</p></li></ul><h4 id="线性“仙境”中的中介"><a href="#线性“仙境”中的中介" class="headerlink" title="线性“仙境”中的中介"></a>线性“仙境”中的中介</h4><ul><li><p>对于线性模型：总效应 = 直接效应 + 间接效应   (9.4)（297）</p></li><li><p>线性模型的中介分析十分简单的首要原因：直接效应CDE不取决于中介物的水平，即CDE(m)对于所有m值来说都是相同的。（297-298）</p></li><li><p>中介效应可以通过纯粹的统计学方法来定义和计算。（299）</p></li><li><p>相加性原则的“自然效应”版本（其实是相减性原则）可在非线性函数中成立：</p><p>总效应(X=0 —&gt; X=1)  = NDE(X=0 —&gt; X=1)   - NIE(X=0 —&gt; X=1)  </p></li><li><p>在线性模型之外，间接效应对回归分析来说就不再有意义了，其仅剩的意义就是代数步骤的结果（“路径系数的乘积”）。</p></li></ul><h4 id="拥抱假如世界"><a href="#拥抱假如世界" class="headerlink" title="拥抱假如世界"></a>拥抱假如世界</h4><ul><li><p>两个行动有时比一个行动更容易分析，因为行动对应于删除图上的某些箭头，两个行动可以让图示变得更稀疏，更简单。（304）</p></li><li><p>每一种直接效应和间接效应都可以转化为反事实表达式。（306）</p></li><li><p>中介公式，实际上包含了两个公式，分别用于计算自然直接效应和自然间接效应。当其满足因果图所明确、透明地显示出的假设时，就能展示如何根据数据估算出两个效应的值。</p></li><li><p>下图适用的中介公式（306）：</p><p>NIE = Σ<del>m</del>[P(M=m|X=1)-P(M=m|X=0)] × P(Y=1|X=0,M=m)   (9.5)</p><p>中括号内的表达式代表X对M的影响，乘号后的表达式代表了M对Y的影响（当X=0时）。由此就揭示了系数乘积规则的起源，并展示了两个非线性效应的乘积具体应当如何计算。与方程(9.3)不同，方程 (9.5)没有下标和do算子，因此其结果可以直接根据第一层的数据估计出来。</p><img src="C:\Users\Q\AppData\Roaming\Typora\typora-user-images\image-20210920103655423.png" alt="image-20210920103655423" style="zoom:50%;" /></li><li><p>从中介公式中，可以一目了然的看到有关直接效应和间接效应的一切：使它们变大或者变小都需要什么，什么时候回可以从观察或干预数据中估算它们，什么时候可以认为 一个中介物要对将观察到的变化传递给结果变量这件事“负责”。</p></li></ul><h4 id="中介个案研究"><a href="#中介个案研究" class="headerlink" title="中介个案研究"></a>中介个案研究</h4><h5 id="“全民学代数”：一套方案和它的副作用"><a href="#“全民学代数”：一套方案和它的副作用" class="headerlink" title="“全民学代数”：一套方案和它的副作用"></a>“全民学代数”：一套方案和它的副作用</h5><ul><li><img src="C:\Users\Q\AppData\Roaming\Typora\typora-user-images\image-20210920152808915.png" alt="image-20210920152808915" style="zoom:50%;" /></li></ul><h5 id="吸烟基因：中介与干预"><a href="#吸烟基因：中介与干预" class="headerlink" title="吸烟基因：中介与干预"></a>吸烟基因：中介与干预</h5><ul><li><img src="C:\Users\Q\AppData\Roaming\Typora\typora-user-images\image-20210920152923030.png" alt="image-20210920152923030" style="zoom:50%;" /><img src="C:\Users\Q\AppData\Roaming\Typora\typora-user-images\image-20210920153141569.png" alt="image-20210920153141569" style="zoom:50%;" />=&gt;</li></ul><h5 id="止血带：隐藏的谬误"><a href="#止血带：隐藏的谬误" class="headerlink" title="止血带：隐藏的谬误"></a>止血带：隐藏的谬误</h5><img src="C:\Users\Q\AppData\Roaming\Typora\typora-user-images\image-20210920160639076.png" alt="image-20210920160639076" style="zoom:33%;" /><blockquote><p>《THE BOOK OF WHY: THE NEW SCIENCE OF CAUSE AND EFFECT》</p><p>——JUDEA PEARL AND DANA MACKENZIE</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;第九章-中介：寻找蕴藏的作用机制&quot;&gt;&lt;a href=&quot;#第九章-中介：寻找蕴藏的作用机制&quot; class=&quot;headerlink&quot; title=&quot;第九章 中介：寻找蕴藏的作用机制&quot;&gt;&lt;/a&gt;第九章 中介：寻找蕴藏的作用机制&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;CHAPTER 9 — Mediation: The Search for a Mechanism&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Causality" scheme="https://hexo.flower48237.com/categories/Causality/"/>
    
    
    <category term="Causality" scheme="https://hexo.flower48237.com/tags/Causality/"/>
    
    <category term="因果推断" scheme="https://hexo.flower48237.com/tags/%E5%9B%A0%E6%9E%9C%E6%8E%A8%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title>《The Book of Why》 — Chapter7</title>
    <link href="https://hexo.flower48237.com/2021/09/29/The%20Book%20of%20Why%20-%20Chapter%20(7)/"/>
    <id>https://hexo.flower48237.com/2021/09/29/The%20Book%20of%20Why%20-%20Chapter%20(7)/</id>
    <published>2021-09-29T07:20:00.000Z</published>
    <updated>2021-09-29T07:19:50.713Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="第七章-超越统计调整：征服干预之峰"><a href="#第七章-超越统计调整：征服干预之峰" class="headerlink" title="第七章 超越统计调整：征服干预之峰"></a>第七章 超越统计调整：征服干预之峰</h3><blockquote><p>CHAPTER 7 — Beyond Adjustment: The Conquest of  Mount Intervention</p></blockquote><a id="more"></a><ul><li>因果之梯的第二层：对未尝试过的行动和策略的效果进行预测。<strong>混杂因子是导致我们预测混淆的主要障碍</strong>。在用“路径阻断”工具和后门标准消除这一障碍后，就能精确而系统地绘制出登上干预之峰地路线图。（路径阻断工具是d-separation）（195）</li><li>do演算允许研究者探索并绘制出通往干预之峰的所有可能的路线。（195）</li></ul><h4 id="最简单的路线：后门调整公式"><a href="#最简单的路线：后门调整公式" class="headerlink" title="最简单的路线：后门调整公式"></a>最简单的路线：后门调整公式</h4><ul><li><p>最常用的预测干预效果的方法是使用统计调整公式“控制”混杂因子，如果确定已经掌握了变量的一个充分集（去混因子）的数据就可以用来阻断干预和结果之间的所有后门路径，就可以使用此方法。为了做到这一点，需要首先估计去混因子在每个“水平”或数据分层中产生的效应，并据此测算出干预的平均因果效应。然后需要计算这些层的因果效应的加权平均值，为此需要对每个层都按期在总体中的分布频率进行加权。（195-196）</p></li><li><p>后门准则在估算平均因果效应的过程中所起的作用是，保证去混因子在各层中的因果效应与我们在这一层观察到的趋势相一致。据此可以从数据中逐层估计出因果效应，若没有后门准则，研究者就无法保证所有的统计调整都是合理的。(196)</p></li><li><p>当有多个混杂因子和多个数据分层时，就很难将所有的可能性都罗列出来，一个补救办法是将数值分成有限并且数目可控的类别，但是这种分类方式的选择上可能存在主观性，如果需要进行统计调整的变量比较多，那么类别的数量就会呈指数增长，这将使计算过程变得难以执行，更糟糕的是，在分类完成后，很可能会发现许多层缺乏样本，因此无法对其进行任何概率估计。为应对“维度灾难”问题，设计了数据外推法，即通过一个与数据拟合的光滑函数来填充空的层所形成的洞。运用最为广泛的光滑函数是线性近似，使用时每个因果效应都可以用一个数字（因果系数）来表示，并且根据统计调整公式进行计算的过程非常简单。（197）</p></li><li><p>无论是否经过统计调整，回归系数只表示一种统计趋势，其自身并不能传递因果信息。（198）</p><p>回归系数有时可以体现因果效应，有时则无法体现，而其中的差异无法仅依靠数据来说明。还需要具备另外两个条件才能赋予偏回归系数r<del>YXZ</del> 以因果合法性：</p><p>​    （1）所绘制的相应的因果图能够合理地解释现实情况；</p><p>​    （2）需要据其进行统计调整的变量Z应该满足后门准则。（198）</p></li><li><p>基于回归的统计调整只适用于线性模型：</p><p>（1）一旦使用了线性模型，就失去了为非线性的相互作用建模的能力；（2）即使不知道图中箭头背后的函数是什么，后门调整仍有效。（199）</p></li><li><p>后门准则和后门调整公式的关系：</p><p>后门准则用于判定哪些变量集可以用来去除数据中的混杂；</p><p>后门调整公式所做的实际上就是去混杂。（199）</p></li><li><p>如果因缺乏必要的数据而无法阻断某条后台路径，统计调整公式就会完全失灵。（199）</p></li></ul><h4 id="前门准则"><a href="#前门准则" class="headerlink" title="前门准则"></a>前门准则</h4><ul><li><img src="C:\Users\Q\AppData\Roaming\Typora\typora-user-images\image-20210920194445099.png" alt="image-20210920194445099" style="zoom:50%;" /><p>由于缺乏混杂因子的数据，不能阻断“吸烟 &lt;— 混杂因子 —&gt; 癌症”的后门路径，因此不能使用后门调整来控制混杂因子的影响。（200）</p><p>前门指的是直接的因果路径“吸烟 —&gt; 焦油沉积 —&gt; 癌症”。（201）</p></li><li><p>可以用纯数学的方式在不引入do算子本身（不进行实际干预）的情况下算出概率结果。（202）</p></li><li><p>在不引入do算子的前提下表示 <strong>P（癌症 | do （吸烟））</strong> 就被称作<strong>前门调整</strong>（202）</p></li><li><p>依据上图，设X代表吸烟，Y代表癌症，Z代表焦油沉积，U代表不可观测的变量（未出现在公式中），公式如下</p><ul><li><p>前门调整公式：</p><p>​         P(Y|do(X)) = Σ<del>z</del> P(Z=z,X)Σ<del>x</del> P(Y|X=x,Z=z)P(X=x)</p></li><li><p>后门调整公式：</p><p>​         P(Y|do(X)) = Σ<del>z</del> P(Y|X,Z=z)P(Z=z)</p></li><li><p>从前门公式中可知：</p><p>（1）在公式的任何地方都看不到U，这是整个问题的关键；</p><p>（2）将被估量视为一种针对问题中的目标量的计算方法。</p></li></ul></li><li><p>因果图的一个主要优势就算让假设变得透明，以供专家和决策者探讨和辩论。（203）</p></li><li><p>在假设正确的情况下，即使没有混杂因子的数据，仍然可以用数学方式消除混杂因子的影响。（203）</p></li><li><p>前门调整是一个强大的工具，因为：</p><p>它允许我们控制混杂因子，并且这些混杂因子可以是我们无法观测（如“动机”）甚至无法命名的。也正是因为同样的原因，随机对照试验被认为是估计因果效应的黄金标准。（206）</p></li></ul><h4 id="do演算，或者心胜于物"><a href="#do演算，或者心胜于物" class="headerlink" title="do演算，或者心胜于物"></a>do演算，或者心胜于物</h4><ul><li><p>前门调整公式和后门调整公式的最终目标是根据P（Y|X,A,B,Z,……）此类不涉及do算子的数据估算干预的效果，即P（Y|do（X））。</p><p>如果可以成功消除计算过程中的do概率，就可以利用观测数据来估计因果效应，就可以从因果关系之梯的第一层踏上第二层。（206）</p></li><li><p>三条合法的do表达式变换⭐：（209）</p><ul><li><p>规则1：如果我们观察到变量W和Y无关（其前提可能是以其他变量Z为条件），那么Y的概率分布就不会随W而改变。等式成立的条件是，在删除了指向X的所有箭头之后，变量集Z会阻断所有从W到Y的路径。</p><p>句法解释：允许增加或删除某个观察结果。</p><p>P(Y|do(X), Z, W) = P(Y|do(X),Z)</p></li><li><p>规则2：如果变量Z阻断了X到Y的的所有后门路径，那么以Z为条件（对Z进行变量控制），则do（X）等同于see（X）。即在控制了一个充分的去混因子之后，留下的相关性就是真正的因果效应。</p><p>句法解释：允许用观察替换干预。</p><p>P(Y|do(X),Z) = P(Y|X,Z)</p></li><li><p>规则3：如果没有从X到Y的因果路径，就可以将do(X)和从P(Y|do(X))中移除。即如果我们实施的干预行动（do）不会影响Y，那么Y的概率分布就不会改变。</p><p>句法解释：允许删除或添加干预。</p><p>P(Y|do(X)) = P(Y)</p></li></ul></li><li><p>有了上述三条规则，就可以推导出前门调整公式。这是一个不以控制混杂因子为手段来估计因果效应的方法。（210）</p></li><li><p>如果我们在规则1到3中找不到根据数据估计P(Y|do(X))的方法，那么对于这个问题，解决方案就是不存在的。</p><p>在此情况下，除了进行随机对照试验别无选择。这三条规则还能告诉我们，对于某个特定的问题，什么样的额外假设或实验可以使因果效应从不可估计变为可估计。（212）</p></li><li><p>伊利亚·斯皮塞=&gt;发现可以用于确定某个解决方案是否存在“多项式时间”的算法。（213）</p></li></ul><h4 id="案例：斯诺医生的离奇案例"><a href="#案例：斯诺医生的离奇案例" class="headerlink" title="案例：斯诺医生的离奇案例"></a>案例：斯诺医生的离奇案例</h4><ul><li><p>工具变量（222）如图，Z就是一个工具变量：</p><p>（1）Z和U之间没有箭头（二者独立）</p><p>（2）Z和X之间有一个箭头</p><p>（3）Z和Y之间没有直接箭头</p><img src="C:\Users\Q\AppData\Roaming\Typora\typora-user-images\image-20210919171432493.png" alt="image-20210919171432493" style="zoom:50%;" /></li><li><p>工具变量允许我们执行与前门调整相同的处理：在无法控制混杂因子或收集其数据的情况下估计X对Y的效应。（223）</p></li><li><p>路径图所体现的假设在本质上是因果关系。（223）</p></li></ul><h4 id="好胆固醇与坏胆固醇"><a href="#好胆固醇与坏胆固醇" class="headerlink" title="好胆固醇与坏胆固醇"></a>好胆固醇与坏胆固醇</h4><ul><li><p>“未履行问题”，如受试者虽然随机地接受了药物安排，但实际上并没有复用被分配的药物。（226）</p></li><li><p>当变量都是二元变量，而不是数值变量时，意味着不能使用线性模型，因此工具变量公式也不适用。在这种情况下，通常可以使用被称为“单调性”的弱相关来代替线性假设。但在这么做之前，需要先确保工具变量的三个假设都是有效的（226-227）：</p><p>（1）工具变量Z独立于混杂因子</p><p>（2）Z到Y无直接路径</p><p>（3）Z和X之间存在强关联</p></li><li><p>取最好和最坏情况的做法通常会得到一个估计结果的取值范围。（228）</p></li><li><p>在做任何干预研究之前，都要看我们实际操作的变量（如低密度脂蛋白的终生水平）是否与我们认为自己正在操作的变量（如低密度脂蛋白的当前水平）相同。</p><p>工具变量是一个重要的工具，他能我们帮助我们揭示do演算无法解释的因果信息，do演算强调的是点估计，而非不等式。</p><p>相比工具变量，do演算具有更强大的灵活性，因为在do演算中，我们不需要对因果模型中函数的性质做任何假设。而如果我们的确有足够的科学依据证实类似单调性或线性这样的假设的话，那么像工具变量这种针对性更强的工具就更值得考虑。（230-231）</p></li></ul><blockquote><p>《THE BOOK OF WHY: THE NEW SCIENCE OF CAUSE AND EFFECT》</p><p>——JUDEA PEARL AND DANA MACKENZIE</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;第七章-超越统计调整：征服干预之峰&quot;&gt;&lt;a href=&quot;#第七章-超越统计调整：征服干预之峰&quot; class=&quot;headerlink&quot; title=&quot;第七章 超越统计调整：征服干预之峰&quot;&gt;&lt;/a&gt;第七章 超越统计调整：征服干预之峰&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;CHAPTER 7 — Beyond Adjustment: The Conquest of  Mount Intervention&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Causality" scheme="https://hexo.flower48237.com/categories/Causality/"/>
    
    
    <category term="Causality" scheme="https://hexo.flower48237.com/tags/Causality/"/>
    
    <category term="因果推断" scheme="https://hexo.flower48237.com/tags/%E5%9B%A0%E6%9E%9C%E6%8E%A8%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title>《The Book of Why》 — Chapter8</title>
    <link href="https://hexo.flower48237.com/2021/09/29/The%20Book%20of%20Why%20-%20Chapter%20(8)/"/>
    <id>https://hexo.flower48237.com/2021/09/29/The%20Book%20of%20Why%20-%20Chapter%20(8)/</id>
    <published>2021-09-29T07:20:00.000Z</published>
    <updated>2021-09-29T07:19:55.129Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="第八章-反事实：探索关于假如的世界"><a href="#第八章-反事实：探索关于假如的世界" class="headerlink" title="第八章 反事实：探索关于假如的世界"></a>第八章 反事实：探索关于假如的世界</h3><blockquote><p>CHAPTER 8 — Counterfactuals: Mining Worlds That  Could Have Been</p></blockquote><a id="more"></a><ul><li>我们已经见识了几种方法，可以用于在各种情景设定和条件下确定干预的效果。在第四章我们讨论了随机对照试验，他被誉为医学临床试验的黄金标准，我们还看到了一些适用于观察性研究的方法，其中处理组和对照组的成员不是随机分配的。对此，如果我们可以采集到能够阻断所有后门路径的变量集的数据，我们就可以使用后门调整公式来估算出干预效果。如果能找到一个被混杂因子“屏蔽”的前门路径，我们就可以引入前门调整。如果我们愿意接受线性或者单调性假设，那么我们就可以使用工具变量（假设该变量可以从因果图中找到，或研究者可以根据试验设计提出一个合适的变量）。此外，那些真正富有冒险精神的研究者还可以使用do演算或者其衍生算法，绘制出一条通往干预之峰的新路线。（235）</li><li>随机对照试验、后门调整公式、前门调整公式、工具变量、do演算等努力目标都是找到研究中处理的某个总效应或者在某些典型个体或子总体中的效应（平均因果效应）。（235）</li><li>责任和过失、遗憾和信誉——这些概念都可以被纳入因果思维之中。（235）</li><li>人类具有想象不存在的世界的能力，我们的天赋是能看到“假如……则本可能是什么”。（236）</li><li>因果关系的理论框架——休厄尔·赖特的路径图及其衍生产物结构因果模型（SCMs）。（236）</li><li>三种不同的因果关系：必要因果关系、充分因果关系、充要因果关系。（237）</li></ul><h4 id="从修昔底德和亚伯拉罕到休谟和刘易斯"><a href="#从修昔底德和亚伯拉罕到休谟和刘易斯" class="headerlink" title="从修昔底德和亚伯拉罕到休谟和刘易斯"></a>从修昔底德和亚伯拉罕到休谟和刘易斯</h4><ul><li>剂量—阈值曲线 或 “阈值效应”（239）</li></ul><h4 id="潜在结果、结构方程和反事实的算法化"><a href="#潜在结果、结构方程和反事实的算法化" class="headerlink" title="潜在结果、结构方程和反事实的算法化"></a>潜在结果、结构方程和反事实的算法化</h4><ul><li><p>唐纳德·鲁宾将潜在结果作为一种回答因果问题的语言加以介绍，这一理论成果为研究人员提供乐了一种高度灵活的语言，使其可以在总体和个体层面上表述出几乎所有他们想问的问题。（245）</p></li><li><p>假设X的值为x，则变量Y一定会取某个与之对应的值Y<del>X=x</del>(u)也可写为Y<del>x</del>，其客观存在性与Y在现实中实际取的值相当。潜在结果，或反事实，是在个体层面而非总体层面上定义的。（245）</p></li><li><p>将因果推断问题看作是数据缺失问题，可能会造成非常严重的误导。（248）</p></li><li><p>匹配、线性回归等插值方法在本质上是有缺陷的，它们是数据驱动的，不是模型驱动的。没有哪种纯粹基于数据的方法（第一层级）可以回答反事实的问题（第三层级）。即使是标准的数据缺失问题也需要借助因果建模来解决。（249-250）</p></li><li><p>将中介物误认作混杂因子是因果推断中最知名的错误之一，混淆因子要求统计调整，而中介物禁止统计调整。（251）</p></li><li><p>方程的创建者必须承诺他所写的方程真实反映了他所认定的现实世界中谁听从于谁的观点。这种承诺或信念上的差异赋予了结构方程支持反事实假设的力量和否定回归方程的力量。（252）</p></li><li><p>从结构模型中推导反事实的三个步骤（253）：</p><ul><li>（1）外展：估计特质因子（外生变量）</li><li>（2）干预：利用do算子改变模型，以反映反事实假设</li><li>（3）预测：利用修改后的模型及有关外生变量的更新信息来估算结果。</li></ul></li><li><p>上述三个步骤中，步骤2告诉我们要用do算子删除指向被赋予了反事实值的变量的箭头，那些可能通过干预变量影响结果的变量，在相应的箭头被删除后就不再被允许以这种方式传递信息了。（253）</p></li><li><p>以上三个步骤被概况为<strong>“因果推断第一定律”：Y<del>x</del></strong>(u) = Y<del>Mx</del>(u)。</p><p>潜在结果Y<del>x</del>(u)可以通过下述方法来推断：构建模型M<del>x</del>（确保删除所有指向X的箭头），并计算结果Y(u)。因果关系之梯的第二层级和第三层级中的所有可估量都由此产生。简言之，将反事实简化为一个算法使我们得以在数学所允许的范围内征服第三层级的一大片版图。（254）</p></li><li><p>有效估计：若模型假设是有效的，潜在的结果与估计值会重合。（254）</p></li><li><p>借助结构方程得到的任何反事实（潜在）结果，都合乎逻辑地遵循了模型所体现地假设，而根据数据驱动方法所获得地答案就像伪相关一样反复无常，因为它无法被用来解释重要的建模假设。（254）</p></li><li><p>利用模型和数据结合，可以成功预测个体在某个假设条件下（在反事实的世界中）的表现。但前提是我们做出了强有力的假设，除了断定观察到的变量之间的因果关系，还假设了函数关系是线性的。（—爱丽丝的例子）但<strong>事实上我们并不总能获得这些函数的信息</strong>。（254）</p></li></ul><h4 id="看到你的假设的好处"><a href="#看到你的假设的好处" class="headerlink" title="看到你的假设的好处"></a>看到你的假设的好处</h4><ul><li>珀尔为计算反事实所展示的结构因果模型方法与鲁宾所使用的潜在因果方法不同，一个主要区别就是前者使用了因果图，因果图允许研究者用他们自己能理解的方式表示因果假设，并把所有的反事实作为其世界模型的一种衍生属性。（255）</li><li>如何利用因果图来判断（条件的）可忽略性，以一组匹配变量Z为条件，要确定对于结果Y来说是否可忽略，只需要测试Z是否阻断了X和Y之间的所有后门路径，同时Z的成员都不是X的后代即可。（257）</li><li>我们可以很容易地测试出以因果图为基础建立的模型与数据的兼容性。（258）</li><li>可测试性：无论何时，只要图中X和Y之间的所有路径都被一组节点Z阻断，那么在以Z为条件的前提下，数据中的X和Y就应该是条件独立的。这就是d-separation。这个属性允许我们在数据未能显示出相应的独立性时否定并放弃模型。（258）</li><li>响应函数是赋予结构因果模型处理反事实的能力的关键因素。同时又是结构因果模型和因果贝叶斯模型的一个主要区别点。（258）</li><li>结构因果模型与概率贝叶斯网络、因果贝叶斯网络的不同之处在于，SCM没有条件概率表，指向Y的箭头只简单地表示Y是其父变量和外生变量U<del>Y</del>的一个函数：Y = f<del>Y</del>(X,A,B,C,…,U<del>Y</del>)。（258）</li><li>结构方程模型SEM和结构因果模型SCM的一个重要区别是，SCM中的因果关系不一定是线性的。SCM分析所用到的方法对非线性函数、线性函数和离散变量、连续变量同样有效。（260）</li></ul><h4 id="反事实与法律"><a href="#反事实与法律" class="headerlink" title="反事实与法律"></a>反事实与法律</h4><ul><li>PN（probability of necessity）必要性概率</li><li>PS（probability of sufficiency）充分性概率</li><li>必要性概率涉及两个不同世界之间的对比，X=1的现实世界和X=0的反事实世界。是否有事后判断（知道现实世界中发生了什么事）是反事实和干预之间的关键区别。没有事后判断，P(Y<del>X=0</del>=0)和P(Y=0|do(X=0))之间就没有区别。（262）</li></ul><h4 id="必要因、充分因和气候变化"><a href="#必要因、充分因和气候变化" class="headerlink" title="必要因、充分因和气候变化"></a>必要因、充分因和气候变化</h4><ul><li>选择线性模型通常是出于方便，而不是出于什么可靠的理由。（270）</li></ul><h4 id="反事实的世界"><a href="#反事实的世界" class="headerlink" title="反事实的世界"></a>反事实的世界</h4><ul><li><p>将反事实纳入考虑后，因果推断引擎提出的因果问题的多样性和丰富性就会大大加强。（270）</p></li><li><p>现在反事实方法最受欢迎的一种应用形式就是“中介分析”。（271）</p></li><li><p>中介物或者中间变量指的是将处理效应传递给结果的事物。</p><p>人们感兴趣的主要问题是，中介变量是否解释了处理变量的全部影响，或者处理变量的部分效果是否可以不通过中介变量传递给结果。（271）</p></li><li><p>中介分析的目的是将直接效应（未通过中介物介导）从间接效应（通过中介物介导）中解析出来。（271）</p></li><li><p>直接效应和间接效应都涉及反事实陈述。（271）</p></li></ul><blockquote><p>《THE BOOK OF WHY: THE NEW SCIENCE OF CAUSE AND EFFECT》</p><p>——JUDEA PEARL AND DANA MACKENZIE</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;第八章-反事实：探索关于假如的世界&quot;&gt;&lt;a href=&quot;#第八章-反事实：探索关于假如的世界&quot; class=&quot;headerlink&quot; title=&quot;第八章 反事实：探索关于假如的世界&quot;&gt;&lt;/a&gt;第八章 反事实：探索关于假如的世界&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;CHAPTER 8 — Counterfactuals: Mining Worlds That  Could Have Been&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Causality" scheme="https://hexo.flower48237.com/categories/Causality/"/>
    
    
    <category term="Causality" scheme="https://hexo.flower48237.com/tags/Causality/"/>
    
    <category term="因果推断" scheme="https://hexo.flower48237.com/tags/%E5%9B%A0%E6%9E%9C%E6%8E%A8%E6%96%AD/"/>
    
  </entry>
  
</feed>
