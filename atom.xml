<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>李强的个人博客</title>
  
  <subtitle>记录学习过程</subtitle>
  <link href="https://hexo.li98.cn/atom.xml" rel="self"/>
  
  <link href="https://hexo.li98.cn/"/>
  <updated>2022-04-30T12:07:16.999Z</updated>
  <id>https://hexo.li98.cn/</id>
  
  <author>
    <name>李强</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode腾讯精选练习50题-14.最长公共前缀</title>
    <link href="https://hexo.li98.cn/archives/70dca.html"/>
    <id>https://hexo.li98.cn/archives/70dca.html</id>
    <published>2022-04-30T12:00:00.000Z</published>
    <updated>2022-04-30T12:07:16.999Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>编写一个函数来查找字符串数组中的最长公共前缀。</li><li>如果不存在公共前缀，返回空字符串 “”。</li><li>1 &lt;= strs.length &lt;= 200</li><li>0 &lt;= strs[i].length &lt;= 200</li><li>strs[i] 仅由小写英文字母组成</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> strs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"flower"</span>,<span class="token string">"flow"</span>,<span class="token string">"flight"</span><span class="token punctuation">]</span>output <span class="token builtin class-name">:</span> <span class="token string">"fl"</span>input  <span class="token builtin class-name">:</span> strs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"dog"</span>,<span class="token string">"racecar"</span>,<span class="token string">"car"</span><span class="token punctuation">]</span>output <span class="token builtin class-name">:</span> <span class="token string">""</span>note   <span class="token builtin class-name">:</span> 不存在公共前缀<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路1</strong></p><ul><li>纵向遍历</li><li>双重循环，同步对比数组中所有字符串的相同位置的字符</li><li>有不同时（或者某一字符串结束时），就可以最长公共前缀。</li><li>时间复杂度：O(mn)，其中 m 是字符串数组中的字符串的平均长度，n 是字符串数组的长度。最坏情况下，字符串数组中的每个字符串的每个字符都会被比较一次。</li><li>空间复杂度：O(1)</li></ul><p><strong>思路2</strong></p><ul><li>横向遍历</li><li>初始将结果定义 result 为字符串数组的第一个元素</li><li>遍历数组，对比之后的每一个元素，与当前 result 的公共前缀，并将 result 更新为当前能得到的最长公共前缀</li><li>遍历结束时，result 中存放的就是数组中所有元素的最长公共前缀</li><li>时间复杂度：O(mn)，其中 m 是字符串数组中的字符串的平均长度，n 是字符串数组的长度。最坏情况下，字符串数组中的每个字符串的每个字符都会被比较一次。</li><li>空间复杂度：O(1)</li></ul><p><strong>思路3</strong></p><ul><li>时间复杂度：O(mn)，其中 m 是字符串数组中的字符串的平均长度，n 是字符串数组的长度。最坏情况下，字符串数组中的每个字符串的每个字符都会被比较一次。</li><li>空间复杂度：O(1)</li><li>排序，取巧的方法</li><li>把字符串数组排序后，只取第一个和最后一个字符串进行比较，找的两者的公共前缀，就是整个字符串数组的公共前缀。</li><li>O(n logn)，排序的时间复杂度。</li><li>空间复杂度：O(1)</li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> minLen <span class="token operator">=</span> <span class="token number">201</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> strs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> minLen<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                minLen <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">StringBuilder</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> minLen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> ch <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> strs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        StringBuilder res = new StringBuilder(strs[0]);        for (int i = 0; i &lt; strs[0].length(); i++) &#123;            char ch = strs[0].charAt(i);            for (String s : strs) &#123;                if (i == s.length() || ch != s.charAt(i)) &#123;                    return res.substring(0, i);                &#125;            &#125;        &#125;        return res.toString();        */</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路2代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StringBuilder</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> strs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> res<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                res<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> res<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> res<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">!=</span> strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    res<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路3代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution3</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> strs<span class="token punctuation">[</span>strs<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> strs<span class="token punctuation">[</span>strs<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                res<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> res<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;编写一个函数来查找字符串数组中的最长公共前缀。&lt;/li&gt;
&lt;li&gt;如果不存在公共前缀，返回空字符串 “”。&lt;/li&gt;
&lt;li&gt;1 &amp;lt;= strs.length &amp;lt;= 200&lt;/li&gt;
&lt;li&gt;0 &amp;lt;= strs[i].length &amp;lt;= 200&lt;/li&gt;
&lt;li&gt;strs[i] 仅由小写英文字母组成&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; strs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;flower&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;flow&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;flight&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;fl&quot;&lt;/span&gt;
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; strs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;dog&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;racecar&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;car&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;
note   &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; 不存在公共前缀&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.li98.cn/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.li98.cn/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.li98.cn/tags/LeetCode/"/>
    
    <category term="字符串" scheme="https://hexo.li98.cn/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode算法题-1629.按键持续时间最长的键</title>
    <link href="https://hexo.li98.cn/archives/d9221a63.html"/>
    <id>https://hexo.li98.cn/archives/d9221a63.html</id>
    <published>2022-04-26T15:00:00.000Z</published>
    <updated>2022-04-26T15:15:22.673Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>LeetCode 设计了一款新式键盘，正在测试其可用性。</li><li>测试人员将会点击一系列键（总计 n 个），每次一个。</li><li>给你一个长度为 n 的字符串 keysPressed ，其中 keysPressed[i] 表示测试序列中第 i 个被按下的键。</li><li>releaseTimes 是一个升序排列的列表，其中 releaseTimes[i] 表示松开第 i 个键的时间。</li><li>字符串和数组的 下标都从 0 开始 。第 0 个键在时间为 0 时被按下，接下来每个键都 恰好 在前一个键松开时被按下。</li><li>测试人员想要找出按键 持续时间最长 的键。</li><li>第 i 次按键的持续时间为 releaseTimes[i] - releaseTimes[i - 1] ，第 0 次按键的持续时间为 releaseTimes[0] 。</li><li>注意，测试期间，同一个键可以在不同时刻被多次按下，而每次的持续时间都可能不同。</li><li>请返回单次按键 持续时间最长 的键，如果有多个这样的键，则返回 按字母顺序排列最大 的那个键。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> releaseTimes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">9,29</span>,49,50<span class="token punctuation">]</span>, keysPressed <span class="token operator">=</span> <span class="token string">"cbcd"</span>output <span class="token builtin class-name">:</span> <span class="token string">'c'</span>note   <span class="token builtin class-name">:</span> 按键顺序和持续时间如下：         按下 <span class="token string">'c'</span> ，持续时间 <span class="token number">9</span>（时间 <span class="token number">0</span> 按下，时间 <span class="token number">9</span> 松开）         按下 <span class="token string">'b'</span> ，持续时间 <span class="token number">29</span> - <span class="token number">9</span> <span class="token operator">=</span> <span class="token number">20</span>（松开上一个键的时间 <span class="token number">9</span> 按下，时间 <span class="token number">29</span> 松开）         按下 <span class="token string">'c'</span> ，持续时间 <span class="token number">49</span> - <span class="token number">29</span> <span class="token operator">=</span> <span class="token number">20</span>（松开上一个键的时间 <span class="token number">29</span> 按下，时间 <span class="token number">49</span> 松开）         按下 <span class="token string">'d'</span> ，持续时间 <span class="token number">50</span> - <span class="token number">49</span> <span class="token operator">=</span> <span class="token number">1</span>（松开上一个键的时间 <span class="token number">49</span> 按下，时间 <span class="token number">50</span> 松开）         按键持续时间最长的键是 <span class="token string">'b'</span> 和 <span class="token string">'c'</span>（第二次按下时），持续时间都是 <span class="token number">20</span>         <span class="token string">'c'</span> 按字母顺序排列比 <span class="token string">'b'</span> 大，所以答案是 <span class="token string">'c'</span>input  <span class="token builtin class-name">:</span> releaseTimes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12,23</span>,36,46,62<span class="token punctuation">]</span>, keysPressed <span class="token operator">=</span> <span class="token string">"spuda"</span>output <span class="token builtin class-name">:</span> <span class="token string">'a'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>一次遍历，对比并记录最大持续时间，同时按字母序要求更新对应的字符即可</li><li>时间复杂度：O(n)</li><li>空间复杂度：O(1)</li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>代码1</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">char</span> <span class="token function">slowestKey</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> releaseTimes<span class="token punctuation">,</span> <span class="token class-name">String</span> keysPressed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> resKey <span class="token operator">=</span> keysPressed<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxTime <span class="token operator">=</span> releaseTimes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> releaseTimes<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> time <span class="token operator">=</span> releaseTimes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> releaseTimes<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">// if的后半段，比较当前字符与当前最长持续时间字符的字母序大小的时候</span>            <span class="token comment">// 为了美观可以提前把当前字符定义在if前面，然后放到if的后半段比较，但是这样会浪费测试时间</span>            <span class="token comment">// 测试结果表明，提前定义运行时间为1s，不定义运行时间为0s</span>            <span class="token comment">// 用到的时候才比较字母序，取当前字符，用不到的时候提前定义就是浪费资源</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> maxTime <span class="token operator">||</span> <span class="token punctuation">(</span>time <span class="token operator">==</span> maxTime <span class="token operator">&amp;&amp;</span> keysPressed<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">></span> resKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                resKey <span class="token operator">=</span> keysPressed<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                maxTime <span class="token operator">=</span> time<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> resKey<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代码2</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">char</span> <span class="token function">slowestKey</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> releaseTimes<span class="token punctuation">,</span> <span class="token class-name">String</span> keysPressed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> resKey <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxTime <span class="token operator">=</span> releaseTimes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> releaseTimes<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> time <span class="token operator">=</span> releaseTimes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> releaseTimes<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> sub <span class="token operator">=</span> keysPressed<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> keysPressed<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>resKey<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> maxTime <span class="token operator">||</span> <span class="token punctuation">(</span>time <span class="token operator">==</span> maxTime <span class="token operator">&amp;&amp;</span> sub <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                resKey <span class="token operator">=</span> i<span class="token punctuation">;</span>                maxTime <span class="token operator">=</span> time<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> keysPressed<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>resKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;LeetCode 设计了一款新式键盘，正在测试其可用性。&lt;/li&gt;
&lt;li&gt;测试人员将会点击一系列键（总计 n 个），每次一个。&lt;/li&gt;
&lt;li&gt;给你一个长度为 n 的字符串 keysPressed ，其中 keysPressed[i] 表示测试序列中第 i 个被按下的键。&lt;/li&gt;
&lt;li&gt;releaseTimes 是一个升序排列的列表，其中 releaseTimes[i] 表示松开第 i 个键的时间。&lt;/li&gt;
&lt;li&gt;字符串和数组的 下标都从 0 开始 。第 0 个键在时间为 0 时被按下，接下来每个键都 恰好 在前一个键松开时被按下。&lt;/li&gt;
&lt;li&gt;测试人员想要找出按键 持续时间最长 的键。&lt;/li&gt;
&lt;li&gt;第 i 次按键的持续时间为 releaseTimes[i] - releaseTimes[i - 1] ，第 0 次按键的持续时间为 releaseTimes[0] 。&lt;/li&gt;
&lt;li&gt;注意，测试期间，同一个键可以在不同时刻被多次按下，而每次的持续时间都可能不同。&lt;/li&gt;
&lt;li&gt;请返回单次按键 持续时间最长 的键，如果有多个这样的键，则返回 按字母顺序排列最大 的那个键。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; releaseTimes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;9,29&lt;/span&gt;,49,50&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;, keysPressed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;cbcd&quot;&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;c&#39;&lt;/span&gt;
note   &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; 按键顺序和持续时间如下：
         按下 &lt;span class=&quot;token string&quot;&gt;&#39;c&#39;&lt;/span&gt; ，持续时间 &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;（时间 &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; 按下，时间 &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt; 松开）
         按下 &lt;span class=&quot;token string&quot;&gt;&#39;b&#39;&lt;/span&gt; ，持续时间 &lt;span class=&quot;token number&quot;&gt;29&lt;/span&gt; - &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;（松开上一个键的时间 &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt; 按下，时间 &lt;span class=&quot;token number&quot;&gt;29&lt;/span&gt; 松开）
         按下 &lt;span class=&quot;token string&quot;&gt;&#39;c&#39;&lt;/span&gt; ，持续时间 &lt;span class=&quot;token number&quot;&gt;49&lt;/span&gt; - &lt;span class=&quot;token number&quot;&gt;29&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;（松开上一个键的时间 &lt;span class=&quot;token number&quot;&gt;29&lt;/span&gt; 按下，时间 &lt;span class=&quot;token number&quot;&gt;49&lt;/span&gt; 松开）
         按下 &lt;span class=&quot;token string&quot;&gt;&#39;d&#39;&lt;/span&gt; ，持续时间 &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt; - &lt;span class=&quot;token number&quot;&gt;49&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;（松开上一个键的时间 &lt;span class=&quot;token number&quot;&gt;49&lt;/span&gt; 按下，时间 &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt; 松开）
         按键持续时间最长的键是 &lt;span class=&quot;token string&quot;&gt;&#39;b&#39;&lt;/span&gt; 和 &lt;span class=&quot;token string&quot;&gt;&#39;c&#39;&lt;/span&gt;（第二次按下时），持续时间都是 &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;
         &lt;span class=&quot;token string&quot;&gt;&#39;c&#39;&lt;/span&gt; 按字母顺序排列比 &lt;span class=&quot;token string&quot;&gt;&#39;b&#39;&lt;/span&gt; 大，所以答案是 &lt;span class=&quot;token string&quot;&gt;&#39;c&#39;&lt;/span&gt;
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; releaseTimes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;12,23&lt;/span&gt;,36,46,62&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;, keysPressed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;spuda&quot;&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;a&#39;&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.li98.cn/categories/LeetCode/"/>
    
    
    <category term="其他" scheme="https://hexo.li98.cn/tags/%E5%85%B6%E4%BB%96/"/>
    
    <category term="Java" scheme="https://hexo.li98.cn/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.li98.cn/tags/LeetCode/"/>
    
    <category term="数组" scheme="https://hexo.li98.cn/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="字符串" scheme="https://hexo.li98.cn/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode腾讯精选练习50题-104.二叉树的最大深度</title>
    <link href="https://hexo.li98.cn/archives/c7b84ffe.html"/>
    <id>https://hexo.li98.cn/archives/c7b84ffe.html</id>
    <published>2022-04-20T13:00:00.000Z</published>
    <updated>2022-04-20T06:07:07.292Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定一个二叉树，找出其最大深度。</li><li>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token number">3,9</span>,20,null,null,15,7<span class="token punctuation">]</span>output <span class="token builtin class-name">:</span> <span class="token number">3</span>note   <span class="token builtin class-name">:</span> 该二叉树的最大深度为 <span class="token number">3</span>                     <span class="token number">3</span>                   / <span class="token punctuation">\</span>                  <span class="token number">9</span>  <span class="token number">20</span>                    /  <span class="token punctuation">\</span>                   <span class="token number">15</span>   <span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路1 递归</strong></p><ul><li>从下向上，每次返回的都是当前节点的具备最大深度的子树的深度，那么最终返回的就是整个二叉树的最大深度</li><li>递归退出条件：当前节点是空节点，返回0，即往下没有深度了</li><li>不为空，则分别递归左子树和右子树，求其最大深度</li><li>比较左右子树的最大深度并返回其中较大者</li></ul><p><strong>思路2 DFS</strong></p><ul><li>深度优先搜索</li><li>借助栈，实现非递归形式的深度优先搜索，先序、中序、后续都可以</li><li>在遍历过程中记录当前深度，并在切换左右子树的时候通过比较获取当前最大深度</li><li>不断更新最大深度，遍历结束后就可以获得整个二叉树的最大深度</li></ul><p><strong>思路3 BFS</strong></p><ul><li>广度优先搜索</li><li>借助队列，实现非递归形式的广度优先搜索</li><li>在遍历过程中，首先获取队列的长度，在这个长度内的节点，就是在同一层的</li><li>每次遍历完一层，就可以让深度加1，最终就可以获得最大深度</li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">loop</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">loop</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">loop</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路2代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> curDepth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxDepth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> allDepth <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TreeNode</span> node <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token comment">// DFS</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            curDepth<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//System.out.println(node.val);</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                allDepth<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>curDepth<span class="token punctuation">)</span><span class="token punctuation">;</span>                curDepth<span class="token operator">++</span><span class="token punctuation">;</span>                node <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">TreeNode</span> tmp <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                curDepth <span class="token operator">=</span> allDepth<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>curDepth <span class="token operator">></span> maxDepth<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    maxDepth <span class="token operator">=</span> curDepth<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                node <span class="token operator">=</span> tmp<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> maxDepth<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路3代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution3</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> maxDepth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// BFS</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> size <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>size <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">TreeNode</span> tmp <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                size <span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            maxDepth <span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> maxDepth<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定一个二叉树，找出其最大深度。&lt;/li&gt;
&lt;li&gt;二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3,9&lt;/span&gt;,20,null,null,15,7&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
note   &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; 该二叉树的最大深度为 &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; 
                    &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
                   / &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
                  &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;
                    /  &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
                   &lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.li98.cn/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.li98.cn/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.li98.cn/tags/LeetCode/"/>
    
    <category term="二叉树" scheme="https://hexo.li98.cn/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    <category term="DFS" scheme="https://hexo.li98.cn/tags/DFS/"/>
    
    <category term="树" scheme="https://hexo.li98.cn/tags/%E6%A0%91/"/>
    
    <category term="BFS" scheme="https://hexo.li98.cn/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode腾讯精选练习50题-237.删除链表中的节点</title>
    <link href="https://hexo.li98.cn/archives/60d2c7c1.html"/>
    <id>https://hexo.li98.cn/archives/60d2c7c1.html</id>
    <published>2022-04-19T13:00:00.000Z</published>
    <updated>2022-04-19T13:30:27.717Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>请编写一个函数，用于 删除单链表中某个特定节点 。在设计函数时需要注意，你无法访问链表的头节点 head ，只能直接访问 要被删除的节点 。</li><li>题目数据保证需要删除的节点不是末尾节点。</li><li>链表中每个节点的值都是 唯一 的</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> <span class="token function">head</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4,5</span>,1,9<span class="token punctuation">]</span>, node <span class="token operator">=</span> <span class="token number">5</span>output <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token number">4,1</span>,9<span class="token punctuation">]</span>input  <span class="token builtin class-name">:</span> <span class="token function">head</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4,5</span>,1,9<span class="token punctuation">]</span>, node <span class="token operator">=</span> <span class="token number">1</span>output <span class="token builtin class-name">:</span> <span class="token function">head</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4,5</span>,1,9<span class="token punctuation">]</span>, node <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>假设需要删除的节点为 node</li><li>将 node 的值，替换为其后继节点的值</li><li>将 node 的后继指针，指向node的后继节点的后继指针所指向的内容</li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        node<span class="token punctuation">.</span>val <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        node<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;请编写一个函数，用于 删除单链表中某个特定节点 。在设计函数时需要注意，你无法访问链表的头节点 head ，只能直接访问 要被删除的节点 。&lt;/li&gt;
&lt;li&gt;题目数据保证需要删除的节点不是末尾节点。&lt;/li&gt;
&lt;li&gt;链表中每个节点的值都是 唯一 的&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4,5&lt;/span&gt;,1,9&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;, node &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4,1&lt;/span&gt;,9&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4,5&lt;/span&gt;,1,9&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;, node &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4,5&lt;/span&gt;,1,9&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;, node &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.li98.cn/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.li98.cn/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.li98.cn/tags/LeetCode/"/>
    
    <category term="链表" scheme="https://hexo.li98.cn/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode腾讯精选练习50题-344.反转字符串</title>
    <link href="https://hexo.li98.cn/archives/7b8e9638.html"/>
    <id>https://hexo.li98.cn/archives/7b8e9638.html</id>
    <published>2022-04-13T13:00:00.000Z</published>
    <updated>2022-04-13T13:40:05.265Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 s 的形式给出。</li><li>不要给另外的数组分配额外的空间，必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"h"</span>,<span class="token string">"e"</span>,<span class="token string">"l"</span>,<span class="token string">"l"</span>,<span class="token string">"o"</span><span class="token punctuation">]</span>output <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"o"</span>,<span class="token string">"l"</span>,<span class="token string">"l"</span>,<span class="token string">"e"</span>,<span class="token string">"h"</span><span class="token punctuation">]</span>input  <span class="token builtin class-name">:</span> s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"H"</span>,<span class="token string">"a"</span>,<span class="token string">"n"</span>,<span class="token string">"n"</span>,<span class="token string">"a"</span>,<span class="token string">"h"</span><span class="token punctuation">]</span>output <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"h"</span>,<span class="token string">"a"</span>,<span class="token string">"n"</span>,<span class="token string">"n"</span>,<span class="token string">"a"</span>,<span class="token string">"H"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路1 双指针</strong></p><ul><li>左右同时向内遍历</li><li>遍历的同时交换左右指针的元素值</li><li>时间复杂度：O(n)，其中 n 为字符数组的长度，只需要执行n/2次交换即可完成反转</li><li>空间复杂度：O(1)，只使用了常数空间来存放若干变量</li></ul><p><strong>思路2 递归</strong></p><ul><li>递归需要使用栈空间，所以用递归不符合题目的空间复杂度要求</li><li>还是双指针的路子，只不过换成了递归的写法</li><li>初始传参为：数组s，left = 0，right = s.length - 1</li><li>递归的退出边界：left &gt;= right</li><li>交换left和right位置处的元素值</li><li>递归调用，参数为 数组s，++left，–right；即左右指针向内移动，进行下一次交换</li><li>时间复杂度：O(n)</li><li>空间复杂度：O(n)</li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reverseString</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> temp <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>len <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>len <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            i <span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路2代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reverseString</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">loop</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">>=</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">char</span> tmp <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token function">loop</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token operator">++</span>left<span class="token punctuation">,</span> <span class="token operator">--</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 s 的形式给出。&lt;/li&gt;
&lt;li&gt;不要给另外的数组分配额外的空间，必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; s &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;h&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;e&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;l&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;l&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;o&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;o&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;l&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;l&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;e&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;h&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; s &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;H&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;a&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;n&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;n&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;a&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;h&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;h&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;a&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;n&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;n&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;a&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;H&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.li98.cn/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.li98.cn/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.li98.cn/tags/LeetCode/"/>
    
    <category term="字符串" scheme="https://hexo.li98.cn/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="双指针" scheme="https://hexo.li98.cn/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
    <category term="递归" scheme="https://hexo.li98.cn/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode腾讯精选练习50题-231.2的幂</title>
    <link href="https://hexo.li98.cn/archives/38c6df58.html"/>
    <id>https://hexo.li98.cn/archives/38c6df58.html</id>
    <published>2022-04-10T12:00:00.000Z</published>
    <updated>2022-04-10T12:20:01.986Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定一个整数 n，请你判断该整数是否是 2 的幂次方。如果是，返回 true ；否则，返回 false 。</li><li>如果存在一个整数 x 使得 n == 2^x ，则认为 n 是 2 的幂次方。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> n <span class="token operator">=</span> <span class="token number">1</span>output <span class="token builtin class-name">:</span> <span class="token boolean">true</span>input  <span class="token builtin class-name">:</span> n <span class="token operator">=</span> <span class="token number">16</span>output <span class="token builtin class-name">:</span> <span class="token boolean">true</span>input  <span class="token builtin class-name">:</span> n <span class="token operator">=</span> <span class="token number">5</span>output <span class="token builtin class-name">:</span> <span class="token boolean">false</span>input  <span class="token builtin class-name">:</span> n <span class="token operator">=</span> -16output <span class="token builtin class-name">:</span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>基本规律：<ul><li>小于等于 0 的数，必然不是</li><li>1 必然是</li><li>对 2 取余，余数不为0的，必然不是</li></ul></li></ul><p><strong>思路1 循环缩小</strong></p><ul><li>以 n 对 2 取余的余数为0作为循环条件，不断将 n 减半</li><li>返回“最后的 n ”是否等于 1 的判断结果即可 </li><li>时间复杂度 O(log n)</li><li>空间复杂度 O(1)</li></ul><p><strong>思路2 递归</strong></p><ul><li>参考思路1，将循环形式改为递归形式</li><li>递归退出边界：<ul><li>n &lt;= 0，返回 false</li><li>n = 1，返回 true</li><li>n % 2 != 0，返回 false （这个必须放在最后，因为 1 % 2 = 1，需要让 n = 1 的情况时在上一个边界条件中就退出）</li></ul></li><li>正常递归时传参为 n / 2</li><li>时间复杂度 O(log n)</li><li>空间复杂度 O(n)</li></ul><p><strong>思路3 位运算</strong></p><ul><li><p>方法1</p><ul><li>若 n 是 2的幂，则n的二进制形式中，一定只存在一个 1</li><li>例如 n = 8，二进制表示为 1000；n = 4，二进制表示为 100</li><li>假设 n 是 2的幂，那么 n-1 的二进制形式中必然全为 1</li><li>例如， n = 8（1000），n-1=7（111）；n = 4（100），n-1=3（11） </li><li>为了方便对比，将n-1的二进制中前置补0，与n长度对齐，则可以发现：<ul><li>n = 8（1000）；n = 4（100）</li><li>n-1=7（0111）；n-1=3（011） </li></ul></li><li>所以，可以判断 n 和 n-1 的 按位与 （&amp;）结果，如果结果恰好为0，说明n必然是2的幂</li><li>时间复杂度 O(1)</li><li>空间复杂度 O(1)</li></ul></li><li><p>方法2</p><ul><li>假设n &gt; 0，则负数 -n 以补码的形式表示，规则为，n的二进制按位取反再加1</li><li>若 n 是 2的幂，则n的二进制形式中，一定只存在一个 1 ，且在首位<ul><li>例如 n = 8，二进制表示为 1000；n = 4，二进制表示为 100</li><li>假设 n 是 2的幂，那么按照补码表示的规则， -n 的二进制形式中必然与 n 相同</li><li>例如:<ul><li>n = 8 （1000），-n = -8（1000 按位取反 -&gt; 0111 -&gt; +0001 -&gt; 1000）</li><li>n = 4 （100），-n = -4（100 按位取反 -&gt; 011 -&gt; +001 -&gt; 100）</li></ul></li></ul></li><li>所以，可以判断 n 与 -n 的按位与（&amp;）结果，如果结果仍然为 n，则说明 n 必然是2的幂</li><li>时间复杂度 O(1)</li><li>空间复杂度 O(1)</li></ul></li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPowerOfTwo</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            n <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路2代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPowerOfTwo</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">loop</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">loop</span><span class="token punctuation">(</span>num <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* 简洁写法    public boolean isPowerOfTwo(int n) &#123;        if (n &lt; 1) &#123;            return false;        &#125;        if (n == 1) &#123;            return true;        &#125;        if (n % 2 == 1) &#123;            return false;        &#125;        return isPowerOfTwo(n / 2);    &#125;    */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路3代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution3</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPowerOfTwo</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 位运算方法1</span>        <span class="token keyword">return</span> n <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// 位运算方法2</span>        <span class="token comment">// return n > 0 &amp;&amp; (n &amp; -n) == n;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定一个整数 n，请你判断该整数是否是 2 的幂次方。如果是，返回 true ；否则，返回 false 。&lt;/li&gt;
&lt;li&gt;如果存在一个整数 x 使得 n == 2^x ，则认为 n 是 2 的幂次方。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; -16
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.li98.cn/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.li98.cn/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.li98.cn/tags/LeetCode/"/>
    
    <category term="数学" scheme="https://hexo.li98.cn/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="位运算" scheme="https://hexo.li98.cn/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
    <category term="递归" scheme="https://hexo.li98.cn/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode腾讯精选练习50题-235.二叉搜索树的最近公共祖先</title>
    <link href="https://hexo.li98.cn/archives/92cb0ef2.html"/>
    <id>https://hexo.li98.cn/archives/92cb0ef2.html</id>
    <published>2022-04-09T13:00:00.000Z</published>
    <updated>2022-04-09T09:09:42.695Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。</li><li>最近公共祖先的定义为：</li><li>对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6,2</span>,8,0,4,7,9,null,null,3,5<span class="token punctuation">]</span>, p <span class="token operator">=</span> <span class="token number">2</span>, q <span class="token operator">=</span> <span class="token number">8</span>output <span class="token builtin class-name">:</span> <span class="token number">6</span>note   <span class="token builtin class-name">:</span> 节点 <span class="token number">2</span> 和节点 <span class="token number">8</span> 的最近公共祖先是节点 <span class="token number">6</span>。input  <span class="token builtin class-name">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6,2</span>,8,0,4,7,9,null,null,3,5<span class="token punctuation">]</span>, p <span class="token operator">=</span> <span class="token number">2</span>, q <span class="token operator">=</span> <span class="token number">4</span>output <span class="token builtin class-name">:</span> <span class="token number">2</span>note   <span class="token builtin class-name">:</span> 节点 <span class="token number">2</span> 和节点 <span class="token number">4</span> 的最近公共祖先是节点 <span class="token number">2</span>。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路1 公共路径法1</strong></p><ul><li>利用二叉搜索树的性质</li><li>先借助DFS记录从根到 节点 p 的路径，以及根到 节点q 的路径</li><li>同时遍历两条路径，当节点不同时，就是进入了不同的子路径，分岔口的前一个节点就是 p 和 q 的最近公共祖先</li><li>时间复杂度：O(n)</li><li>空间复杂度：O(n)，需要存储根节点到 p 和 q 的路径。在最坏的情况下，路径的长度为 O(n)。</li></ul><p><strong>思路2 公告路径2法</strong></p><ul><li><p>利用二叉搜索树的性质</p></li><li><p>一次循环遍历，不断缩小范围，遍历子树</p></li><li><p>若 p 的值和 q 的值都小于当前子树的根节点值，说明 p 和 q 都在当前根节点的左子树中，则根节点左移，取其左子树继续遍历</p></li><li><p>若 p 的值和 q 的值都大于当前子树的根节点值，说明 p 和 q 都在当前根节点的右子树中，则根节点右移，取其右子树继续遍历</p></li><li><p>若 p 的值和 q 的值不再同时大于或者小于当前子树的根节点值，说明 p 和 q 分别位于当前根节点的左右子树中，即当前的根节点就是p和q的最近公共祖先了</p></li><li><p>时间复杂度：O(n)</p></li><li><p>空间复杂度：O(1)</p></li></ul><p><strong>思路3 递归</strong></p><ul><li><p>这是一个通用思路，不仅适用于二叉搜索树，且适用于所有的二叉树</p></li><li><p>递归的出口是，当前节点位空时返回null</p></li><li><p>记当前节点为 node，如果node是p（或q），直接返回 node 即可，表明找到了p或q所在的位置</p></li><li><p>递归 node 的左子树，得到子树 left</p></li><li><p>递归 node 的右子树，得到子树 right</p></li><li><p>对left和right进行判断</p><ul><li>若 left 为空，说明 p 和 q 都在 node 的右子树中，返回 node 的右子树</li><li>若 right 为空，说明 p 和 q 都在 node 的左子树中，返回 node 的左子树</li><li>若 left 和 right 都不为空，说明 p 和 q 分别位于 node 的左、右子树中，即 node 已经是 p 和 q 的最近公共祖先，直接返回 node 即可</li></ul></li><li><p>时间复杂度：O(n)，n 是二叉树的节点数。二叉树的所有节点有且只会被访问一次。</p></li><li><p>空间复杂度：O(n)，n 是二叉树的节点数。递归调用的栈深度取决于二叉树的高度，二叉树最坏情况下为一条链，此时高度为 n。</p></li></ul><p><strong>思路4 存储父节点</strong></p><ul><li>借助map和set</li><li>先对二叉树进行一次dfs，借助map存储每个节点的父节点，键值对设置为&lt;当前节点的值，当前节点的父节点&gt;</li><li>节点 node 的祖先节点：从 root 到 node 的最短路径中，除了 node 以外的节点，都是 node 的祖先节点</li><li>对 p 节点进行祖先节点的追溯，在set中记录已经被访问过的节点（从 p 一直到根节点 root ）</li><li>对 p 节点进行祖先节点的追溯，如果set中已经包含了 q 或 q 的某个祖先节点 i （i可以为q），说明节点 i 是 p 和 q 的最近公共祖先 LCA</li><li>时间复杂度：O(n)，n 是二叉树的节点数。二叉树的所有节点有且只会被访问一次。</li><li>空间复杂度：O(n)，n 是二叉树的节点数。递归调用的栈深度取决于二叉树的高度，二叉树最坏情况下为一条链，此时高度为 n；哈希表存储每个节点的父节点也需要 O(n) 的空间复杂度；最后总的空间复杂度为 O(n)。</li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> p<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> pathLeft <span class="token operator">=</span> <span class="token function">findPath</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> pathRight <span class="token operator">=</span> <span class="token function">findPath</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*int len = Math.max(pathLeft.size(), pathRight.size());        for (int i = 0; i &lt; len; i++) &#123;            if (i == pathLeft.size()) &#123;                return pathLeft.get(i - 1);            &#125;            if (i == pathRight.size()) &#123;                return pathRight.get(i - 1);            &#125;            if (pathLeft.get(i).val != pathRight.get(i).val) &#123;                return pathLeft.get(i - 1);            &#125;        &#125;        return root;*/</span>        <span class="token comment">// 下方代码比上方注释掉的代码写起来更简洁一些</span>        <span class="token class-name">TreeNode</span> res <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pathLeft<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> pathRight<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pathLeft<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>val <span class="token operator">==</span> pathRight<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                res <span class="token operator">=</span> pathLeft<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 记录从根节点到某一个指定节点的路径</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> <span class="token function">findPath</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            path<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                root <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>val <span class="token operator">></span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                root <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        path<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> path<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路2代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> p<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TreeNode</span> res <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>val <span class="token operator">></span> p<span class="token punctuation">.</span>val <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">.</span>val <span class="token operator">></span> q<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res <span class="token operator">=</span> res<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> p<span class="token punctuation">.</span>val <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> q<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res <span class="token operator">=</span> res<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路3代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution3</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> p<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> p <span class="token operator">||</span> root <span class="token operator">==</span> q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">TreeNode</span> left <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TreeNode</span> right <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路4代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution2</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">TreeNode</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> p<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>q <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">return</span> q<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            q <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">.</span>val<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。&lt;/li&gt;
&lt;li&gt;最近公共祖先的定义为：&lt;/li&gt;
&lt;li&gt;对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; root &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6,2&lt;/span&gt;,8,0,4,7,9,null,null,3,5&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;, p &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;, q &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;
note   &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; 节点 &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; 和节点 &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt; 的最近公共祖先是节点 &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;。
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; root &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6,2&lt;/span&gt;,8,0,4,7,9,null,null,3,5&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;, p &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;, q &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
note   &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; 节点 &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; 和节点 &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt; 的最近公共祖先是节点 &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;。&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.li98.cn/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.li98.cn/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.li98.cn/tags/LeetCode/"/>
    
    <category term="二叉树" scheme="https://hexo.li98.cn/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    <category term="二叉搜索树" scheme="https://hexo.li98.cn/tags/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    
    <category term="DFS" scheme="https://hexo.li98.cn/tags/DFS/"/>
    
    <category term="树" scheme="https://hexo.li98.cn/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode腾讯精选练习50题-292.Nim游戏</title>
    <link href="https://hexo.li98.cn/archives/5b7d327e.html"/>
    <id>https://hexo.li98.cn/archives/5b7d327e.html</id>
    <published>2022-04-08T03:00:00.000Z</published>
    <updated>2022-04-08T03:00:59.179Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>两个人一起玩 Nim 游戏：</li><li>桌子上有一堆石头。你们轮流进行自己的回合， 你作为先手。</li><li>每一回合，轮到的人拿掉 1 - 3 块石头。拿掉最后一块石头的人就是获胜者。</li><li>假设你们每一步都是最优解。请编写一个函数，来判断你是否可以在给定石头数量为 n 的情况下赢得游戏。</li><li>如果可以赢，返回 true；否则，返回 false。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> n <span class="token operator">=</span> <span class="token number">4</span>output <span class="token builtin class-name">:</span> <span class="token boolean">false</span>note   <span class="token builtin class-name">:</span> <span class="token number">1</span>. 你移除1颗石头；你的朋友移走了3块石头，包括最后一块。你的朋友赢了。         <span class="token number">2</span>. 你移除2颗石头；你的朋友移走2块石头，包括最后一块。你的朋友赢了。         <span class="token number">3</span>. 你移走3颗石头；你的朋友移走了最后一块石头。你的朋友赢了。         <span class="token operator">=</span><span class="token operator">></span> 在所有结果中，你的朋友是赢家。input  <span class="token builtin class-name">:</span> n <span class="token operator">=</span> <span class="token number">1</span>output <span class="token builtin class-name">:</span> <span class="token boolean">true</span>note   <span class="token builtin class-name">:</span> 你移除1颗石头。你赢了。input  <span class="token builtin class-name">:</span> n <span class="token operator">=</span> <span class="token number">2</span>output <span class="token builtin class-name">:</span> <span class="token boolean">true</span>note   <span class="token builtin class-name">:</span> 你移除2个石头。你赢了。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>逐步增加石头数量来做分析</li><li>明确条件：你作为先手，你们每一步都是最优解（对于自己来说是最优解，目的是让对方输掉游戏）</li><li>1、石头数量在[1,3]之间，你可以直接取走所有的石头，你胜定。</li><li>2、石头数量恰好为 4 颗，参考 example 中的第一个例子，不论你取走几颗（1~3颗），按对自身最优解的原则，对手肯定会取走剩下的所有石头，对手胜定；<ul><li>同理，反过来思考，如果轮到对手时，只剩4颗石头，那不论对手取走几颗，按对自身最优解的原则，你肯定会取走剩下所有的石头，你胜定。</li></ul></li><li>3、石头数量在[5,7]之间，你如果想取胜，参考上一条的思路，就要保证让对手面临4颗石头（如，5颗的时候你取走1颗，7颗的时候你取走3颗）你胜定</li><li>4、石头数量恰好为 8 颗，参考上述分析1和分析2，不论你取走几颗（1~3颗），剩下的石头数量必然大于4，按对自身最优解的原则，对手只需要且肯定会让你下一次取的时候面对4颗石头，对手胜定。</li><li>5、拓展到[9,+∞)范围中，参考上述分析 1 — 4<ul><li>只要轮到你取的时候，面临的是 4的倍数 颗石头，不论你取几颗，按对自身最优解的原则，对手只需要让你接下来每一次都继续面临 4 或 4的倍数颗石头，对手胜定。</li><li>反之，只要你能让对方先面临 4的倍数 颗石头，你胜定。</li></ul></li><li>总结：在你先手的情况下，<ul><li>如果游戏开始的时候是 4 或 4的倍数 颗石头，不论你怎么取，输定。</li><li>如果游戏开始的时候不是 4 或 4的倍数 颗石头，一定可以做到在你取了之后，马上让对手面对 4 或 4 的倍数颗石头，胜定。</li></ul></li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canWinNim</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 代码只需要判断先手面对的石头数，是不是4的倍数就好了。</span>        <span class="token comment">// 不是则返回 true，是则返回 false。</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;两个人一起玩 Nim 游戏：&lt;/li&gt;
&lt;li&gt;桌子上有一堆石头。你们轮流进行自己的回合， 你作为先手。&lt;/li&gt;
&lt;li&gt;每一回合，轮到的人拿掉 1 - 3 块石头。拿掉最后一块石头的人就是获胜者。&lt;/li&gt;
&lt;li&gt;假设你们每一步都是最优解。请编写一个函数，来判断你是否可以在给定石头数量为 n 的情况下赢得游戏。&lt;/li&gt;
&lt;li&gt;如果可以赢，返回 true；否则，返回 false。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
note   &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;. 你移除1颗石头；你的朋友移走了3块石头，包括最后一块。你的朋友赢了。
         &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;. 你移除2颗石头；你的朋友移走2块石头，包括最后一块。你的朋友赢了。
         &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;. 你移走3颗石头；你的朋友移走了最后一块石头。你的朋友赢了。
         &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 在所有结果中，你的朋友是赢家。
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
note   &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; 你移除1颗石头。你赢了。
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
note   &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; 你移除2个石头。你赢了。&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.li98.cn/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.li98.cn/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.li98.cn/tags/LeetCode/"/>
    
    <category term="数学" scheme="https://hexo.li98.cn/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="博弈" scheme="https://hexo.li98.cn/tags/%E5%8D%9A%E5%BC%88/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode腾讯精选练习50题-009.回文数</title>
    <link href="https://hexo.li98.cn/archives/688ebbf7.html"/>
    <id>https://hexo.li98.cn/archives/688ebbf7.html</id>
    <published>2022-04-06T13:00:00.000Z</published>
    <updated>2022-04-06T13:53:40.878Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。</li><li>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</li><li>进阶：不将整数转为字符串来解决这个问题</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> <span class="token number">121</span>output <span class="token builtin class-name">:</span> <span class="token boolean">true</span>input  <span class="token builtin class-name">:</span> -121output <span class="token builtin class-name">:</span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>先把一些很明确的情况排除掉</li><li>负数直接返回false即可，肯定不是回文数</li><li>[1, 10]内的数和10的倍数都肯定不是回文数</li></ul><p><strong>思路1 借助字符串</strong></p><ul><li>转成字符串后取其反转，再使用equals()函数做对比</li><li>时间复杂度：O(n)</li><li>空间复杂度：O(1)</li></ul><p><strong>思路2 同时取前后对比</strong></p><ul><li>先计算出x的长度len</li><li>借助循环，每一步都取出当前x的首位和末尾做对比<ul><li>只要有一组不想等则直接返回false</li><li>每一步中若相等则将x先去掉首位再除以10获取新的x，并将len除以100，对应于新的x长度</li></ul></li><li>时间复杂度：O(log(n))</li><li>空间复杂度：O(1)</li></ul><p><strong>思路3 反转一半后对比</strong></p><ul><li>将x的后半部分逐步取下，并通过数学运算不断拼接成新的整数 half</li><li>当x不再大于后半部分（x的长度比half短，或者长度相等但是x&lt;=half）时结束拼接</li><li>判断以下两种情况是否成立，有一个成立则证明是回文数，可以返回true；两组都不成立则不是回文数<ul><li>当前x 和 half 相等 （原 x 长度为偶数）</li><li>当前x 和 half / 10 相等 （原 x 长度为奇数；中间的数值x不论是几，x都是回文数）</li></ul></li><li>时间复杂度：O(log(n))</li><li>空间复杂度：O(1)</li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">String</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路2代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>y <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            len <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">;</span>            y <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        y <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>y <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">/</span> len <span class="token operator">!=</span> y <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            y <span class="token operator">=</span> <span class="token punctuation">(</span>y <span class="token operator">%</span> len<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>            len <span class="token operator">/=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路3代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution3</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> rightHalf <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>y <span class="token operator">></span> rightHalf<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            rightHalf <span class="token operator">=</span> rightHalf <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> y <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>            y <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 前者是偶数位数，后者是奇数位数</span>        <span class="token keyword">return</span> y <span class="token operator">==</span> rightHalf <span class="token operator">||</span> y <span class="token operator">==</span> rightHalf <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。&lt;/li&gt;
&lt;li&gt;回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。&lt;/li&gt;
&lt;li&gt;进阶：不将整数转为字符串来解决这个问题&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;121&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; -121
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.li98.cn/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.li98.cn/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.li98.cn/tags/LeetCode/"/>
    
    <category term="字符串" scheme="https://hexo.li98.cn/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="数学" scheme="https://hexo.li98.cn/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="回文" scheme="https://hexo.li98.cn/tags/%E5%9B%9E%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>Python使用Pandas计算相关系数</title>
    <link href="https://hexo.li98.cn/archives/4e858b60.html"/>
    <id>https://hexo.li98.cn/archives/4e858b60.html</id>
    <published>2022-03-21T15:00:00.000Z</published>
    <updated>2022-03-25T14:39:21.784Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><ul><li>给定成分数据，使用Pandas计算各成分之间的相关系数</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul><li>调用函数：pandas.corr()</li></ul><span id="more"></span><h4 id="1、单个文件的情况"><a href="#1、单个文件的情况" class="headerlink" title="1、单个文件的情况"></a>1、单个文件的情况</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment"># 指定文件名称，这里假设数据文件data.csv与此文件位于相同的目录</span>file_name <span class="token operator">=</span> <span class="token string">'./data.csv'</span><span class="token comment"># 读取数据文件</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token comment"># 可以通过打印数据表的行、列信息以级前几行来简单的了解数据</span><span class="token comment"># print(data.shape)</span><span class="token comment"># print(data.head())</span><span class="token comment"># 调用corr()函数计算数据列之间的相关系数</span>corr <span class="token operator">=</span> data<span class="token punctuation">.</span>corr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 把相关系数结果存储到新的文件中，路径默认为当前文件夹 </span>corr<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'correlation.csv'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、多个文件的情况"><a href="#2、多个文件的情况" class="headerlink" title="2、多个文件的情况"></a>2、多个文件的情况</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment"># 指定数据文件的路径 </span>file_name_1 <span class="token operator">=</span> <span class="token string">'../dic1/dic2/name1.csv'</span>file_name_2 <span class="token operator">=</span> <span class="token string">'../dic1/dic2/name2.csv'</span>file_name_3 <span class="token operator">=</span> <span class="token string">'../dic1/dic2/name3.csv'</span>file_name_4 <span class="token operator">=</span> <span class="token string">'../dic1/dic2/name4.csv'</span><span class="token comment"># 将数据文件的路径统一到列表中</span>lists <span class="token operator">=</span> <span class="token punctuation">&#123;</span>file_name_1<span class="token punctuation">,</span> file_name_2<span class="token punctuation">,</span> file_name_3<span class="token punctuation">,</span> file_name_4<span class="token punctuation">&#125;</span><span class="token comment"># 使用循环来对数据文件逐个操作</span><span class="token keyword">for</span> file_name <span class="token keyword">in</span> lists<span class="token punctuation">:</span>    <span class="token comment"># 读取数据文件</span>    data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>        <span class="token comment"># 计算数据列之间的相关系数</span>    corr <span class="token operator">=</span> data<span class="token punctuation">.</span>corr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment"># 为了区分不同的文件计算得到的相关系数，此处通过数据文件名做区分，用split()函数截取原始的数据文件名</span>    out_name <span class="token operator">=</span> file_name<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>        <span class="token comment"># 将每个数据文件的相关系数计算结果存储到当前路径下，文件名以“correlation与文件名”做拼接</span>    corr<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'./correlation_'</span> <span class="token operator">+</span> out_name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;问题：&quot;&gt;&lt;a href=&quot;#问题：&quot; class=&quot;headerlink&quot; title=&quot;问题：&quot;&gt;&lt;/a&gt;问题：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定成分数据，使用Pandas计算各成分之间的相关系数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;调用函数：pandas.corr()&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="其他" scheme="https://hexo.li98.cn/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="Python" scheme="https://hexo.li98.cn/tags/Python/"/>
    
    <category term="其他" scheme="https://hexo.li98.cn/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题50.Pow(x, n)</title>
    <link href="https://hexo.li98.cn/archives/42e9890.html"/>
    <id>https://hexo.li98.cn/archives/42e9890.html</id>
    <published>2022-03-17T06:00:00.000Z</published>
    <updated>2022-04-06T13:49:21.328Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>实现 pow(x, n) ，即计算 x 的 n 次幂函数（即，xn ）。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> x <span class="token operator">=</span> <span class="token number">2.00000</span>, n <span class="token operator">=</span> <span class="token number">10</span>output <span class="token builtin class-name">:</span> <span class="token number">1024.00000</span>input  <span class="token builtin class-name">:</span> x <span class="token operator">=</span> <span class="token number">2.10000</span>, n <span class="token operator">=</span> <span class="token number">3</span>output <span class="token builtin class-name">:</span> <span class="token number">9.26100</span>input  <span class="token builtin class-name">:</span> x <span class="token operator">=</span> <span class="token number">2.00000</span>, n <span class="token operator">=</span> -2output <span class="token builtin class-name">:</span> <span class="token number">0.25000</span>note   <span class="token builtin class-name">:</span> <span class="token number">2</span>^-2 <span class="token operator">=</span> <span class="token number">1</span>/2^2 <span class="token operator">=</span> <span class="token number">1</span>/4 <span class="token operator">=</span> <span class="token number">0.25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>公式：<img src="https://s2.loli.net/2022/03/12/AZGXmQbRW6EtOc1.png" alt="image-20220312175521044" style="zoom: 10%;" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://s2.loli.net/2022/03/12/AZGXmQbRW6EtOc1.png" class="lozad post-image"></li></ul><p><strong>思路1 递归</strong></p><ul><li>参数：初始值 x，指数 m</li><li>退出边界：m = 0，返回1，任何数的0次幂都是1</li><li>递归主体：y = loop(x, m / 2)，此处y等价于公式中的 x^⌊n/2⌋次幂，⌊n/2⌋代表下取整，如⌊7/2⌋ = 3</li><li>返回值：当 m 是奇数，返回 y * y * x；当 m 是偶数，返回 y * y</li><li>时间复杂度：O(log n)</li><li>空间复杂度：O(log n)</li></ul><p><strong>思路2 迭代</strong></p><ul><li>当 n 为奇数时，二分后会多出一项 x （当前的x值，不是初始的x值） 。</li><li>可通过循环 x = x^2 操作，每次把幂从 n 降至 ⌊n/2⌋ ，直至将幂降为 0；</li><li>设 res = 1，则初始状态 x^n = x^n · res ；</li><li>在循环二分时，每当 n 为奇数时，将多出的一项 x 乘入 res ，则最终可化至 xn = x0 · res = res；</li><li>最后返回 res 即可。</li><li>算法主要流程：<ul><li>当n &lt; 0时，把问题转化到 |n| &gt;= 0 的范围内，即执行 n = -n，x = 1 / x操作 </li><li>初始化res = 1</li><li>循环，当n = 0时结束：<ul><li>当 n % 2 = 1时，将 <strong>当前的x</strong> 乘入 res</li><li>执行 x = x^2，令当前 x 扩大至其平方值</li><li>执行 ⌊n/2⌋，降幂（降至n = 0时循环结束）</li></ul></li></ul></li><li>时间复杂度：O(log n)</li><li>空间复杂度：O(1)</li><li>参考自<a href="https://leetcode-cn.com/problems/powx-n/solution/50-powx-n-kuai-su-mi-qing-xi-tu-jie-by-jyd/">题解</a></li></ul><p><strong>思路3 暴力</strong></p><ul><li>for循环逐个乘</li><li>无法通过测试，超出时间限制</li><li>时间复杂度：O(n)</li><li>空间复杂度：O(1)</li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">myPow</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 为了防止n由负数转为正数时的溢出，先用long接收n</span>        <span class="token keyword">long</span> m <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token keyword">return</span> m <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token function">loop</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token function">loop</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token operator">-</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">long</span> m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">1.0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">double</span> y <span class="token operator">=</span> <span class="token function">loop</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> m <span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> m <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> y <span class="token operator">*</span> y <span class="token operator">:</span> y <span class="token operator">*</span> y <span class="token operator">*</span> x<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路2代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">myPow</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">long</span> m <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            x <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">/</span> x<span class="token punctuation">;</span>            m <span class="token operator">=</span> <span class="token operator">-</span>m<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">double</span> result <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                result <span class="token operator">=</span> result <span class="token operator">*</span> x<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            x <span class="token operator">=</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>            m <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路3代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution3</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">myPow</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">long</span> m <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            x <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">/</span> x<span class="token punctuation">;</span>            m <span class="token operator">=</span> <span class="token operator">-</span>m<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">double</span> result <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            result <span class="token operator">=</span> result <span class="token operator">*</span> x<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;实现 pow(x, n) ，即计算 x 的 n 次幂函数（即，xn ）。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2.00000&lt;/span&gt;, n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1024.00000&lt;/span&gt;
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2.10000&lt;/span&gt;, n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9.26100&lt;/span&gt;
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2.00000&lt;/span&gt;, n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; -2
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.25000&lt;/span&gt;
note   &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;^-2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;/2^2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;/4 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.25&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.li98.cn/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.li98.cn/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.li98.cn/tags/LeetCode/"/>
    
    <category term="分治" scheme="https://hexo.li98.cn/tags/%E5%88%86%E6%B2%BB/"/>
    
    <category term="数学" scheme="https://hexo.li98.cn/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="递归" scheme="https://hexo.li98.cn/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>webstorm取消vue标签的高亮状态</title>
    <link href="https://hexo.li98.cn/archives/774c957b.html"/>
    <id>https://hexo.li98.cn/archives/774c957b.html</id>
    <published>2022-03-04T06:00:00.000Z</published>
    <updated>2022-03-08T01:43:04.575Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="WebStorm中vue标签高亮，影响编程体验"><a href="#WebStorm中vue标签高亮，影响编程体验" class="headerlink" title="WebStorm中vue标签高亮，影响编程体验"></a>WebStorm中vue标签高亮，影响编程体验</h3><span id="more"></span><ul><li>原因：WebStorm对未知html标签会使用高亮来提示</li><li>关闭方法，找到File -&gt; Settings -&gt; Editor -&gt; Inspections -&gt; HTML</li><li>取消勾选 Unknow HTML tags，点击ok即可取消vue标签的高亮显示状态</li></ul><p><img src="https://s2.loli.net/2022/03/04/U79eEVMjzqaHkw1.png" alt="image-20220304132527977" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://s2.loli.net/2022/03/04/U79eEVMjzqaHkw1.png" class="lozad post-image"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;WebStorm中vue标签高亮，影响编程体验&quot;&gt;&lt;a href=&quot;#WebStorm中vue标签高亮，影响编程体验&quot; class=&quot;headerlink&quot; title=&quot;WebStorm中vue标签高亮，影响编程体验&quot;&gt;&lt;/a&gt;WebStorm中vue标签高亮，影响编程体验&lt;/h3&gt;</summary>
    
    
    
    <category term="SpringBoot+Vue" scheme="https://hexo.li98.cn/categories/SpringBoot-Vue/"/>
    
    
    <category term="其他" scheme="https://hexo.li98.cn/tags/%E5%85%B6%E4%BB%96/"/>
    
    <category term="Vue" scheme="https://hexo.li98.cn/tags/Vue/"/>
    
    <category term="WebStorm" scheme="https://hexo.li98.cn/tags/WebStorm/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题138. 复制带随机指针的链表</title>
    <link href="https://hexo.li98.cn/archives/952dea56.html"/>
    <id>https://hexo.li98.cn/archives/952dea56.html</id>
    <published>2022-03-03T08:00:00.000Z</published>
    <updated>2022-04-06T13:49:58.310Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定一个长度为 n 的链表，每个节点包含一个额外增加的随机指针 random ，该指针可以指向链表中的任何节点或空节点。</li><li>构造这个链表的 深拷贝。 深拷贝应该正好由 n 个 全新 节点组成，其中每个新节点的值都设为其对应的原节点的值。新节点的 next 指针和 random 指针也都应指向复制链表中的新节点，并使原链表和复制链表中的这些指针能够表示相同的链表状态。复制链表中的指针都不应指向原链表中的节点 。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> <span class="token function">head</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">7</span>,null<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">13,0</span><span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">11,4</span><span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">10,2</span><span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">1,0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>output <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">7</span>,null<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">13,0</span><span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">11,4</span><span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">10,2</span><span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">1,0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  input  <span class="token builtin class-name">:</span> <span class="token function">head</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span>,null<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">3,0</span><span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">3</span>,null<span class="token punctuation">]</span><span class="token punctuation">]</span>output <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span>,null<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">3,0</span><span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">3</span>,null<span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><ul><li>例如，如果原链表中有 X 和 Y 两个节点，其中 X.random –&gt; Y 。那么在复制链表中对应的两个节点 x 和 y ，同样有 x.random –&gt; y 。</li><li>返回复制链表的头节点。</li><li></li><li>用一个由 n 个节点组成的链表来表示输入/输出中的链表。每个节点用一个 [val, random_index] 表示：</li><li>val：一个表示 Node.val 的整数。</li><li>random_index：随机指针指向的节点索引（范围从 0 到 n-1）；如果不指向任何节点，则为  null 。</li><li>代码 只 接受原链表的头节点 head 作为传入参数。</li></ul><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路1 哈希表</strong></p><ul><li>遍历原链表，暂不考虑 random 指针，逐个深拷贝原节点并形成新链表，在此过程中用 哈希表map 记录每一对&lt;老节点，新节点&gt;。</li><li>遍历原链表和新链表，判断当前原节点 oldNode 的 random 指针是否为空，若不为空，则可让 newNode.random 指向 map 中以 oldNode.random 作为键的值，即 newNode.random = map.get(oldNode.random)</li></ul><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(n)</li></ul><p><strong>思路2 原地算法</strong></p><ul><li><p>暂不考虑 random 指针，先在原链表的每个节点后 深拷贝并插入 一个与其值相同的节点</p></li><li><p>即，假设原链表为 1 -&gt; 2 -&gt; 3，遍历并插入后，列表更新为 1 -&gt; 1 -&gt; 2 -&gt; 2 -&gt; 3 -&gt; 3</p></li><li><p>再次遍历该链表，根据<strong>当前链表中的前后关系</strong>，把 原列表节点的 random 指针关系复制给间隔的新链表</p></li><li><p>即假设当前节点为 node，则当 node.random 不为空时，node.next.random = node.random.next</p></li><li><p>然后node前进两个位置，绕过新复制出来的链表节点</p></li><li><p>最后把新老链表拆分开并返回新链表即可</p></li><li><p>时间复杂度：O(n)</p></li><li><p>空间复杂度：O(1)</p></li></ul><p><strong>思路3 回溯 + 哈希表</strong></p><ul><li><p>利用 回溯 的方式，让每个节点的拷贝操作相互独立。</p></li><li><p>对于当前节点 node ，首先要进行拷贝，用 哈希表 记录每一对&lt;老节点，新节点&gt;。</p></li><li><p>递归创建 当前节点的后继节点 node.next 和 当前节点的随机指针指向的节点 node.random。</p></li><li><p>由于一个节点可能被多个其他节点指向，因此可能会在递归过程中多次尝试拷贝某个节点。</p></li><li><p>为防止重复拷贝，需要首先检查当前节点是否被拷贝过，即是否已经作为值存在于哈希表中，如果已经拷贝过，可以直接从哈希表中将其取出并返回。</p></li><li><p>时间复杂度：O(n)</p></li><li><p>空间复杂度：O(n)</p></li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">copyRandomList</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span> newHead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span> scan <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token class-name">Node</span> append <span class="token operator">=</span> newHead<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>scan <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>scan<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>scan<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            append<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>            scan <span class="token operator">=</span> scan<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            append <span class="token operator">=</span> append<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        scan <span class="token operator">=</span> head<span class="token punctuation">;</span>        append <span class="token operator">=</span> newHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>scan <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>scan<span class="token punctuation">.</span>random <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                append<span class="token punctuation">.</span>random <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>scan<span class="token punctuation">.</span>random<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            scan <span class="token operator">=</span> scan<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            append <span class="token operator">=</span> append<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> newHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路2代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">copyRandomList</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Node</span> scan <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>scan <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>scan<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            newNode<span class="token punctuation">.</span>next <span class="token operator">=</span> scan<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            scan<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>            scan <span class="token operator">=</span> newNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        scan <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>scan <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>scan<span class="token punctuation">.</span>random <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                scan<span class="token punctuation">.</span>next<span class="token punctuation">.</span>random <span class="token operator">=</span> scan<span class="token punctuation">.</span>random<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            scan <span class="token operator">=</span> scan<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Node</span> newList <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token class-name">Node</span> oldList <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token class-name">Node</span> res <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>newList <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> oldList <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            oldList<span class="token punctuation">.</span>next <span class="token operator">=</span> newList<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            oldList <span class="token operator">=</span> oldList<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>oldList <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                newList<span class="token punctuation">.</span>next <span class="token operator">=</span> oldList<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                newList <span class="token operator">=</span> newList<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution3</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">copyRandomList</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span> headNew <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> headNew<span class="token punctuation">)</span><span class="token punctuation">;</span>            headNew<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">copyRandomList</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>            headNew<span class="token punctuation">.</span>random <span class="token operator">=</span> <span class="token function">copyRandomList</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>random<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定一个长度为 n 的链表，每个节点包含一个额外增加的随机指针 random ，该指针可以指向链表中的任何节点或空节点。&lt;/li&gt;
&lt;li&gt;构造这个链表的 深拷贝。 深拷贝应该正好由 n 个 全新 节点组成，其中每个新节点的值都设为其对应的原节点的值。新节点的 next 指针和 random 指针也都应指向复制链表中的新节点，并使原链表和复制链表中的这些指针能够表示相同的链表状态。复制链表中的指针都不应指向原链表中的节点 。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;,null&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;13,0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;11,4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10,2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1,0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;,null&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;13,0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;11,4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10,2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1,0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;  
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;,null&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3,0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;,null&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;,null&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3,0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;,null&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.li98.cn/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.li98.cn/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.li98.cn/tags/LeetCode/"/>
    
    <category term="哈希表" scheme="https://hexo.li98.cn/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
    <category term="链表" scheme="https://hexo.li98.cn/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="模拟" scheme="https://hexo.li98.cn/tags/%E6%A8%A1%E6%8B%9F/"/>
    
    <category term="回溯" scheme="https://hexo.li98.cn/tags/%E5%9B%9E%E6%BA%AF/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题341.扁平化嵌套列表迭代器</title>
    <link href="https://hexo.li98.cn/archives/6ffca0a6.html"/>
    <id>https://hexo.li98.cn/archives/6ffca0a6.html</id>
    <published>2022-03-01T14:00:00.000Z</published>
    <updated>2022-04-06T13:50:53.030Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定一个嵌套的整数列表 nestedList 。</li><li>每个元素要么是一个整数，要么是一个列表；该列表的元素也可能是整数或者是其他列表。</li><li>实现一个迭代器将其扁平化，使之能够遍历这个列表中的所有整数。</li><li>实现扁平迭代器类 NestedIterator ：</li><li>NestedIterator(List<NestedInteger> nestedList) 用嵌套列表 nestedList 初始化迭代器。</li><li>int next() 返回嵌套列表的下一个整数。</li><li>boolean hasNext() 如果仍然存在待迭代的整数，返回 true ；否则，返回 false 。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> nestedList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1,1</span><span class="token punctuation">]</span>,2,<span class="token punctuation">[</span><span class="token number">1,1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>output <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token number">1,1</span>,2,1,1<span class="token punctuation">]</span>input  <span class="token builtin class-name">:</span> nestedList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span>,<span class="token punctuation">[</span><span class="token number">4</span>,<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>output <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token number">1,4</span>,6<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><ul><li>代码将会用下述伪代码检测：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">initialize iterator with nestedListres <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">while</span> iterator.hasNext<span class="token punctuation">(</span><span class="token punctuation">)</span>    append iterator.next<span class="token punctuation">(</span><span class="token punctuation">)</span> to the end of res<span class="token builtin class-name">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>如果 res 与预期的扁平化列表匹配，那么代码将会被判为正确。</li></ul><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>本质上与树的遍历相同，嵌套列表可看作一棵树，其中数值元素就是叶子节点，列表元素就是非叶子节点</li><li>nestedList = [[1,1],2,[1,1]] 可画图为  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">  nestedList   /   <span class="token operator">|</span>   <span class="token punctuation">\</span>list1  <span class="token number">2</span>   list2 / <span class="token punctuation">\</span>        / <span class="token punctuation">\</span><span class="token number">1</span>   <span class="token number">1</span>      <span class="token number">1</span>   <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>nestedList = [1,[4,[6]]] 可画图为  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nestedList  /   <span class="token punctuation">\</span> <span class="token number">1</span>   list2      / <span class="token punctuation">\</span>     <span class="token number">4</span>  list3        /       <span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>思路1 队列+DFS+递归</strong></p><ul><li><p>NestedIterator(List<NestedInteger> nestedList)：</p><ul><li>调用自定义的 深度优先搜索函数 dfs()，把输入的 nestedList 遍历一遍，并把所有数值元素逐个添加到队列 queue 中</li></ul></li><li><p>hasNext()：</p><ul><li>调用isEmpty()方法判断队列 queue 是否为空，</li><li>若不为空则仍然存在待迭代的整数，返回 true ；否则，返回 false </li></ul></li><li><p>next()： </p><ul><li>调用hashNext()判断是否存在下一个 整数，</li><li>若存在，队列的队首元素并返回，若不存在则返回 -1。</li></ul></li><li><p>dfs(List<NestedInteger> nestedList):<br>  遍历 nestedList，如果是整数，则把该整数添加到队列末尾，如果是列表 list，则递归调用dfs，传入参数为当前列表 list</p></li></ul><p><strong>思路2 栈+递归</strong></p><ul><li><p>NestedIterator(List<NestedInteger> nestedList)：</p><ul><li>调用自定义的 pushStack() 方法，倒序遍历列表 nestedList，实现列表元素入栈</li></ul></li><li><p>hasNext()：</p><ul><li>若当前栈空，则返回false</li><li>否则判断栈顶元素是否为整数<ul><li>若是整数则返回true</li><li>若是列表则将栈顶列表 item 弹出栈，后续操作同 NestedIterator，然后递归调用 hasNext() 本身</li></ul></li></ul></li><li><p>next()： </p><ul><li>调用hashNext()判断是否存在下一个 整数，</li><li>若存在，弹出栈顶元素并返回，若不存在则返回 -1。</li></ul></li><li><p>pushStack(List<NestedInteger> nestedList):</p><ul><li>倒序遍历列表 nestedList，把当前列表元素（不考虑其类型为Integer还是List）依次到栈顶</li></ul></li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NestedIterator1</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NestedInteger</span><span class="token punctuation">></span></span> nestedList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">NestedInteger</span> nest <span class="token operator">:</span> nestedList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nest<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                queue<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>nest<span class="token punctuation">.</span><span class="token function">getInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>nest<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">NestedIterator1</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NestedInteger</span><span class="token punctuation">></span></span> nestedList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>nestedList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> queue<span class="token punctuation">.</span><span class="token function">pollFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路2代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NestedIterator2</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NestedInteger</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">pushStack</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NestedInteger</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> index <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> index<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">NestedIterator2</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NestedInteger</span><span class="token punctuation">></span></span> nestedList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">pushStack</span><span class="token punctuation">(</span>nestedList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">NestedInteger</span> item <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                item <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NestedInteger</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">pushStack</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定一个嵌套的整数列表 nestedList 。&lt;/li&gt;
&lt;li&gt;每个元素要么是一个整数，要么是一个列表；该列表的元素也可能是整数或者是其他列表。&lt;/li&gt;
&lt;li&gt;实现一个迭代器将其扁平化，使之能够遍历这个列表中的所有整数。&lt;/li&gt;
&lt;li&gt;实现扁平迭代器类 NestedIterator ：&lt;/li&gt;
&lt;li&gt;NestedIterator(List&lt;NestedInteger&gt; nestedList) 用嵌套列表 nestedList 初始化迭代器。&lt;/li&gt;
&lt;li&gt;int next() 返回嵌套列表的下一个整数。&lt;/li&gt;
&lt;li&gt;boolean hasNext() 如果仍然存在待迭代的整数，返回 true ；否则，返回 false 。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; nestedList &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1,1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,2,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1,1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1,1&lt;/span&gt;,2,1,1&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; nestedList &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1,4&lt;/span&gt;,6&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.li98.cn/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.li98.cn/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.li98.cn/tags/LeetCode/"/>
    
    <category term="DFS" scheme="https://hexo.li98.cn/tags/DFS/"/>
    
    <category term="队列" scheme="https://hexo.li98.cn/tags/%E9%98%9F%E5%88%97/"/>
    
    <category term="栈" scheme="https://hexo.li98.cn/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题236.二叉树的最近公共祖先</title>
    <link href="https://hexo.li98.cn/archives/92af397c.html"/>
    <id>https://hexo.li98.cn/archives/92af397c.html</id>
    <published>2022-02-20T15:00:00.000Z</published>
    <updated>2022-04-06T13:50:29.944Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</li><li>最近公共祖先的定义为：</li><li>对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3,5</span>,1,6,2,0,8,null,null,7,4<span class="token punctuation">]</span>, p <span class="token operator">=</span> <span class="token number">5</span>, q <span class="token operator">=</span> <span class="token number">1</span>output <span class="token builtin class-name">:</span> <span class="token number">3</span>input  <span class="token builtin class-name">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3,5</span>,1,6,2,0,8,null,null,7,4<span class="token punctuation">]</span>, p <span class="token operator">=</span> <span class="token number">5</span>, q <span class="token operator">=</span> <span class="token number">4</span>output <span class="token builtin class-name">:</span> <span class="token number">5</span>input  <span class="token builtin class-name">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1,2</span><span class="token punctuation">]</span>, p <span class="token operator">=</span> <span class="token number">1</span>, q <span class="token operator">=</span> <span class="token number">2</span>output <span class="token builtin class-name">:</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>深度优先搜索</li></ul><p><strong>思路1</strong></p><ul><li>递归，dfs</li><li>若当前被递归的节点 i 是 p 或者 q，则直接返回</li><li>递归 i 的左子树</li><li>递归 i 的右子树</li><li>若左子树递归结果为空，说明 p 和 q 都在 i 的右子树里，返回右子树的递归结果</li><li>若右子树递归结果为空，说明 p 和 q 都在 i 的左子树里，返回左子树的递归结果</li><li>若左右子树的递归结果都不为空，说明 p 和 q 分别位于 i 的两侧，直接返回 i 即可。</li></ul><p><strong>思路2 存储父节点</strong></p><ul><li>借助map和set</li><li>先对二叉树进行一次dfs，借助map存储每个节点的父节点，键值对设置为&lt;当前节点，当前节点的父节点&gt;</li><li>对 p 节点进行祖先节点（从 root 到 p 的最短路径中，除了 p 以外的节点，都是 p 的祖先节点）的追溯，在set中记录已经被访问过的节点（从 p 一直到根节点 root ）</li><li>对 p 节点进行祖先节点（从 root 到 q 的最短路径中，除了 q 以外的节点，都是 q 的祖先节点）的追溯，如果set中已经包含了 q 或 q 的某个祖先节点 i （i可以为q），说明节点 i 是 p 和 q 的最近公共祖先 LCA</li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> p<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> p <span class="token operator">||</span> root <span class="token operator">==</span> q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">TreeNode</span> left <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TreeNode</span> right <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路2代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution2</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">TreeNode</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> p<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>q <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> visited<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">return</span> q<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            q <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">.</span>val<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。&lt;/li&gt;
&lt;li&gt;最近公共祖先的定义为：&lt;/li&gt;
&lt;li&gt;对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; root &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3,5&lt;/span&gt;,1,6,2,0,8,null,null,7,4&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;, p &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;, q &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; root &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3,5&lt;/span&gt;,1,6,2,0,8,null,null,7,4&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;, p &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;, q &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; root &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1,2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;, p &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;, q &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.li98.cn/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.li98.cn/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.li98.cn/tags/LeetCode/"/>
    
    <category term="递归" scheme="https://hexo.li98.cn/tags/%E9%80%92%E5%BD%92/"/>
    
    <category term="二叉树" scheme="https://hexo.li98.cn/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    <category term="DFS" scheme="https://hexo.li98.cn/tags/DFS/"/>
    
    <category term="树" scheme="https://hexo.li98.cn/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题103.二叉树的锯齿形层序遍历</title>
    <link href="https://hexo.li98.cn/archives/909ffbac.html"/>
    <id>https://hexo.li98.cn/archives/909ffbac.html</id>
    <published>2022-02-19T07:00:00.000Z</published>
    <updated>2022-04-06T13:49:42.979Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定二叉树的根节点 root ，返回其节点值的 锯齿形层序遍历 。</li><li>即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3,9</span>,20,null,null,15,7<span class="token punctuation">]</span>output <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">20,9</span><span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">15,7</span><span class="token punctuation">]</span><span class="token punctuation">]</span>note   <span class="token builtin class-name">:</span>     <span class="token number">3</span>            / <span class="token punctuation">\</span>           <span class="token number">9</span>  <span class="token number">20</span>             /  <span class="token punctuation">\</span>            <span class="token number">15</span>   <span class="token number">7</span>input  <span class="token builtin class-name">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>output <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li><p>原理仍然是二叉树的层次遍历，见题目 102.二叉树的层次遍历</p></li><li><p>借助队列 queue 实现二叉树的层次遍历（广度优先搜索）</p></li><li><p>根节点入队</p></li><li><p>使用循环判断队列是否为空</p><ul><li>每次循环时，队列的长度 queue.size()，即为当前层的节点数量<ul><li>使用for循环，把队列中当前层的节点 treeNode 逐个移除队列并访问</li><li>把每个 treeNode 的值逐个添加到每一层的列表中</li><li>当前被访问的节点 treeNode 若有左子树（treeNode.left != null），则左子树入队</li><li>当前被访问的节点 treeNode 若有右子树（treeNode.right != null），则右子树入队</li></ul></li><li>把每层的节点值列表，添加到结果列表 lists 中</li></ul></li><li><p>队列为空时，说明遍历结束</p></li><li><p>然后遍历lists，将奇数下标的子列表中元素顺序反转，即可满足锯齿遍历的要求</p></li><li><p>时间复杂度：O(n) </p></li><li><p>空间复杂度：O(n)</p></li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">zigzagLevelOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 空树直接返回空列表</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> lists <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> lists<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 根节点先入队</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> currentSize <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> currentSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">TreeNode</span> treeNode <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>treeNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>treeNode<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>treeNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>treeNode<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>treeNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            lists<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lists<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span>lists<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">/* 输出检查            for (Integer item : lists.get(i)) &#123;                System.out.print(item + " ");            &#125;            System.out.println();            */</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> lists<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定二叉树的根节点 root ，返回其节点值的 锯齿形层序遍历 。&lt;/li&gt;
&lt;li&gt;即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; root &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3,9&lt;/span&gt;,20,null,null,15,7&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20,9&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;15,7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
note   &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
            / &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
           &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;
             /  &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
            &lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; root &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.li98.cn/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.li98.cn/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.li98.cn/tags/LeetCode/"/>
    
    <category term="二叉树" scheme="https://hexo.li98.cn/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    <category term="树" scheme="https://hexo.li98.cn/tags/%E6%A0%91/"/>
    
    <category term="BFS" scheme="https://hexo.li98.cn/tags/BFS/"/>
    
    <category term="队列" scheme="https://hexo.li98.cn/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题098.验证二叉搜索树</title>
    <link href="https://hexo.li98.cn/archives/1f6759ea.html"/>
    <id>https://hexo.li98.cn/archives/1f6759ea.html</id>
    <published>2022-02-17T13:00:00.000Z</published>
    <updated>2022-04-06T13:49:39.912Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定一个二叉树的根节点 root ，判断其是否是一个有效的二叉搜索树。</li><li>有效 二叉搜索树 定义如下：</li><li>节点的左子树只包含 小于 当前节点的数。</li><li>节点的右子树只包含 大于 当前节点的数。</li><li>所有左子树和右子树自身必须也是二叉搜索树。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2,1</span>,3<span class="token punctuation">]</span>output <span class="token builtin class-name">:</span> <span class="token boolean">true</span>input  <span class="token builtin class-name">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5,1</span>,4,null,null,3,6<span class="token punctuation">]</span>output <span class="token builtin class-name">:</span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>深度优先搜索</li><li>中序遍历</li></ul><p><strong>思路1 递归</strong></p><ul><li>中序DFS，套模板，将树的各节点值存放到列表中</li><li>遍历列表，如果出现后一个元素≤前一个元素的情况，则不是有效的二叉搜索树</li></ul><p><strong>思路2 栈模拟</strong></p><ul><li>用栈模拟中序DFS，套模板，将树的各节点值存放到列表中</li><li>遍历列表，如果出现后一个元素≤前一个元素的情况，则不是有效的二叉搜索树</li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 中序遍历，DFS</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tree<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tree<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">>=</span> tree<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        tree<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路2代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 用栈模拟DFS中序遍历</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>                root <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">TreeNode</span> tmp <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tree<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> tree<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            tree<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            root <span class="token operator">=</span> tmp<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定一个二叉树的根节点 root ，判断其是否是一个有效的二叉搜索树。&lt;/li&gt;
&lt;li&gt;有效 二叉搜索树 定义如下：&lt;/li&gt;
&lt;li&gt;节点的左子树只包含 小于 当前节点的数。&lt;/li&gt;
&lt;li&gt;节点的右子树只包含 大于 当前节点的数。&lt;/li&gt;
&lt;li&gt;所有左子树和右子树自身必须也是二叉搜索树。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; root &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2,1&lt;/span&gt;,3&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; root &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5,1&lt;/span&gt;,4,null,null,3,6&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.li98.cn/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.li98.cn/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.li98.cn/tags/LeetCode/"/>
    
    <category term="中序遍历" scheme="https://hexo.li98.cn/tags/%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    
    <category term="二叉树" scheme="https://hexo.li98.cn/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    <category term="二叉搜索树" scheme="https://hexo.li98.cn/tags/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    
    <category term="DFS" scheme="https://hexo.li98.cn/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题204.计数质数</title>
    <link href="https://hexo.li98.cn/archives/37e360ba.html"/>
    <id>https://hexo.li98.cn/archives/37e360ba.html</id>
    <published>2022-02-14T09:00:00.000Z</published>
    <updated>2022-04-06T13:50:22.966Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定整数 n ，返回 所有小于非负整数 n 的质数的数量 。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> n <span class="token operator">=</span> <span class="token number">10</span>output <span class="token builtin class-name">:</span> <span class="token number">4</span>input  <span class="token builtin class-name">:</span> n <span class="token operator">=</span> <span class="token number">499979</span>output <span class="token builtin class-name">:</span> <span class="token number">41537</span>input  <span class="token builtin class-name">:</span> n <span class="token operator">=</span> <span class="token number">1</span>output <span class="token builtin class-name">:</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>思路4在leetcode平台提交性能最好：<blockquote><p>66 / 66 个通过测试用例<br>状态：通过<br>执行用时: 40 ms<br>内存消耗: 45.6 MB</p></blockquote></li></ul><p><strong>思路1 枚举</strong></p><ul><li>遍历 [2, n) 的所有整数，逐个判断是否为质数，若是则计数结果累加1</li><li>时间复杂度：O(n √n})</li><li>空间复杂度：O(1)</li></ul><p><strong>思路2 埃氏筛</strong></p><ul><li>当前元素 x 如果是质数，则其倍数 2x, 3x, …… 一定是合数。</li><li>每次遍历到一个质数，就可以筛掉众多是其倍数的合数。</li><li>此方法存在的一个问题是重复筛选，如 15 是 3和5 的倍数，15会被筛两次，虽然不影响结果，但实际上只筛1次就足够了。</li><li>时间复杂度：O(n log(log n))</li><li>空间复杂度：O(n)</li></ul><p><strong>思路3 线性筛</strong></p><ul><li>让每个合数只被标记一次，相较于埃氏筛，多维护一个 primes 数组表示当前得到的质数集合。</li><li>从小到大遍历，如果当前的数 x 是质数，就将其加入 primes 数组。</li><li>详见<a href="https://leetcode-cn.com/problems/count-primes/solution/ji-shu-zhi-shu-by-leetcode-solution/">官方题解给出的思路</a></li></ul><p><strong>思路4 减法</strong></p><ul><li>首先，除2以外的所有偶数都不是质数，因此在 [1, n] 范围内有最多 n / 2 个质数</li><li>其次，筛选所有奇数，把所有是合数的奇数都从 n / 2 这个最大值中减去</li><li>最后，剩下的差值就是 [1, n] 内所有的质数了</li><li>时间复杂度：O(n)。</li><li>空间复杂度：O(n)。</li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countPrimes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">judgePrime</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                result<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">judgePrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">*</span> j <span class="token operator">&lt;=</span> number<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路2代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countPrimes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> isPrime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>isPrime<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isPrime<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                result<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> i <span class="token operator">*</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span> k <span class="token operator">*</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        isPrime<span class="token punctuation">[</span>k <span class="token operator">*</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路3代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution3</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countPrimes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> primes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> isPrime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>isPrime<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isPrime<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                primes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> primes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> primes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">*</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                isPrime<span class="token punctuation">[</span>primes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">*</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> primes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> primes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路4代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution4</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countPrimes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 除了2以外，所有偶数肯定不是质数，假设所有奇数全是质数，然后所有奇数中排除非质数，此过程即做减法</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> notPrime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 因为是做减法，且循环内会有对倍数的遍历操作</span>        <span class="token comment">// 所以外层循环只需要以 sqrt(n) 为边界</span>        <span class="token comment">// 内层遍历会遍历到整个范围内的倍数并作减法</span>        <span class="token comment">// 所有 √n 到 n 之间的奇数，若它是 2 到 √n 内某个质数的倍数，则 count 肯定减1</span>        <span class="token comment">// 所有 √n 到 n 之间的奇数，若它不是 2 到 √n 内某个质数的倍数，则它肯定是</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">*</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>notPrime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 如果是合数，继续遍历</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 此处遍历i的所有i倍及大于i倍的数，并全部标记为合数</span>            <span class="token comment">// 因为i的2到i-1倍的倍数在此之前肯定被遍历从2到i-1时标记过了，不需要重复遍历</span>            <span class="token comment">// 之所以每次循环加两倍的i，是因为所有的偶数倍数早已经在遍历之前就被默认减去了（n / 2），故不需要再对其做减法。 </span>            <span class="token comment">// 举例，i = 5，则以下循环中只需遍历 5*5，7*5， 9*5， 因为 6*5，8*5肯定是偶数，在遍历之前就被默认减掉了。</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i <span class="token operator">*</span> i<span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> k <span class="token operator">+=</span> <span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>notPrime<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 把质数 i 的 大于等于i倍的倍数都标记为合数，且count对应减去这些倍数的个数</span>                    notPrime<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    count<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定整数 n ，返回 所有小于非负整数 n 的质数的数量 。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;499979&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;41537&lt;/span&gt;
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.li98.cn/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.li98.cn/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.li98.cn/tags/LeetCode/"/>
    
    <category term="数组" scheme="https://hexo.li98.cn/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="数学" scheme="https://hexo.li98.cn/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题49.字母异位词分组</title>
    <link href="https://hexo.li98.cn/archives/c3a6759d.html"/>
    <id>https://hexo.li98.cn/archives/c3a6759d.html</id>
    <published>2022-02-09T09:00:00.000Z</published>
    <updated>2022-04-06T13:49:19.507Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定一个字符串数组，将 字母异位词 组合在一起。可以按任意顺序返回结果列表。</li><li>字母异位词 是由重新排列源单词的字母得到的一个新单词，所有源单词中的字母通常恰好只用一次。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> strs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"eat"</span>, <span class="token string">"tea"</span>, <span class="token string">"tan"</span>, <span class="token string">"ate"</span>, <span class="token string">"nat"</span>, <span class="token string">"bat"</span><span class="token punctuation">]</span>output <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"bat"</span><span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token string">"nat"</span>,<span class="token string">"tan"</span><span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token string">"ate"</span>,<span class="token string">"eat"</span>,<span class="token string">"tea"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>input  <span class="token builtin class-name">:</span> strs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>output <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路 排序 + 哈希表</strong></p><ul><li><p>对所有字符串进行排序，可以获得有相同字母的字符串，然后把每个排序后字符串对应的原字符串归为一组即可。</p></li><li><p>遍历字符串数组，用 for (String item : strings) 的方式遍历，可以不改变item本身</p></li><li><p>使用字符数组 chs 获取 item ，然后对 chs 进行排序，再将排序后的 chs 放入到新的临时字符串 key 中</p></li><li><p>判断 map 中是否已经存在了以key为键值的键值对</p><ul><li>若不存在则在 map 中新增以 key 为键值，以 空列表 为值的键值对</li></ul></li><li><p>为 map 中键值为 key 的键值对，进行 add 操作，将未被修改的 item 本身添加到键值对的值列表中</p></li><li><p>遍历结束即可得到所有异位词分组</p></li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">groupAnagrams</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> str <span class="token operator">:</span> strs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>chs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>chs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定一个字符串数组，将 字母异位词 组合在一起。可以按任意顺序返回结果列表。&lt;/li&gt;
&lt;li&gt;字母异位词 是由重新排列源单词的字母得到的一个新单词，所有源单词中的字母通常恰好只用一次。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; strs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;eat&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;tea&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;tan&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;ate&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;nat&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;bat&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;bat&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nat&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;tan&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;ate&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;eat&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;tea&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; strs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.li98.cn/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.li98.cn/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.li98.cn/tags/LeetCode/"/>
    
    <category term="字符串" scheme="https://hexo.li98.cn/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="排序" scheme="https://hexo.li98.cn/tags/%E6%8E%92%E5%BA%8F/"/>
    
    <category term="哈希表" scheme="https://hexo.li98.cn/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题238.除自身以外数组的乘积</title>
    <link href="https://hexo.li98.cn/archives/302f5648.html"/>
    <id>https://hexo.li98.cn/archives/302f5648.html</id>
    <published>2022-02-07T08:00:00.000Z</published>
    <updated>2022-04-06T13:50:35.712Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li><p>给定一个整数数组 nums，返回 数组 answer ，其中 answer[i] 等于 nums 中除 nums[i] 之外其余各元素的乘积 。</p></li><li><p>题目数据 保证 数组 nums之中任意元素的全部前缀元素和后缀的乘积都在  32 位 整数范围内。</p></li><li><p>不能使用除法，且在 O(n) 时间复杂度内完成此题。</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1,2</span>,3,4<span class="token punctuation">]</span>output <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token number">24,12</span>,8,6<span class="token punctuation">]</span>input  <span class="token builtin class-name">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span>-1,1,0,-3,3<span class="token punctuation">]</span>output <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token number">0,0</span>,9,0,0<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路 左右遍历</strong></p><ul><li>从左向右遍历一次，对每个位置的元素，记录其左侧所有元素的乘积</li><li>再从右向左遍历一次，对每个位置的元素，在上一步乘积的基础上，累乘其右侧所有元素的乘积</li><li>时间复杂度O(n)</li><li>空间复杂度O(n)</li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">productExceptSelf</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sum <span class="token operator">*=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            result<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        sum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sum <span class="token operator">*=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            result<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*=</span> sum<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;给定一个整数数组 nums，返回 数组 answer ，其中 answer[i] 等于 nums 中除 nums[i] 之外其余各元素的乘积 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;题目数据 保证 数组 nums之中任意元素的全部前缀元素和后缀的乘积都在  32 位 整数范围内。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不能使用除法，且在 O(n) 时间复杂度内完成此题。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; nums &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1,2&lt;/span&gt;,3,4&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;24,12&lt;/span&gt;,8,6&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; nums &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;-1,1,0,-3,3&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0,0&lt;/span&gt;,9,0,0&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.li98.cn/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.li98.cn/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.li98.cn/tags/LeetCode/"/>
    
    <category term="数组" scheme="https://hexo.li98.cn/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="前缀和" scheme="https://hexo.li98.cn/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
  </entry>
  
</feed>
