<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>鸡排大仙儿的个人博客</title>
  
  <subtitle>记录学习过程</subtitle>
  <link href="https://hexo.flower48237.com/atom.xml" rel="self"/>
  
  <link href="https://hexo.flower48237.com/"/>
  <updated>2021-12-17T14:51:48.575Z</updated>
  <id>https://hexo.flower48237.com/</id>
  
  <author>
    <name>鸡排大仙儿</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>d2lzh_pytorch包报错问题解决</title>
    <link href="https://hexo.flower48237.com/2021/12/10/D2L-d2lzh_pytorch%E5%8C%85%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <id>https://hexo.flower48237.com/2021/12/10/D2L-d2lzh_pytorch%E5%8C%85%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</id>
    <published>2021-12-10T03:00:00.000Z</published>
    <updated>2021-12-17T14:51:48.575Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="报错："><a href="#报错：" class="headerlink" title="报错："></a>报错：</h4><ul><li>ModuleNotFoundError: No module named ‘d2lzh_pytorch’</li><li>d2lzh_pytorch包中找不到名为’xxx’的属性/函数，如  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">module <span class="string">'d2lzh_pytorch'</span> has no attribute <span class="string">'use_svg_display()'</span></span><br><span class="line">module <span class="string">'d2lzh_pytorch'</span> has no attribute <span class="string">'load_data_fashion_mnist</span></span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><ul><li>方法1、放到Jupyter工作目录<ul><li><a href="https://github.com/ShusenTang/Dive-into-DL-PyTorch/tree/master/code/d2lzh_pytorch" target="_blank" rel="noopener">下载d2lzh_pytorch文件夹</a>，将其放置到当前Jupyter的工作目录的根目录中即可</li></ul></li><li>方法2、放到虚拟环境的包安装目录<ul><li><a href="https://github.com/ShusenTang/Dive-into-DL-PyTorch/tree/master/code/d2lzh_pytorch" target="_blank" rel="noopener">下载d2lzh_pytorch文件夹</a>，将其放置到anaconda虚拟环境的包路径下，如：Anaconda/envs/pytorch(虚拟环境名)/Lib/site-packages/</li><li>注释代码中的sys.path.append(“..”)，使其从site-packages中找到d2lzh_pytorch包并引入</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;报错：&quot;&gt;&lt;a href=&quot;#报错：&quot; class=&quot;headerlink&quot; title=&quot;报错：&quot;&gt;&lt;/a&gt;报错：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;ModuleNotFoundError: No module named ‘d2lzh_pytorch’&lt;/li&gt;
&lt;li&gt;d2lzh_pytorch包中找不到名为’xxx’的属性/函数，如  &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;module &lt;span class=&quot;string&quot;&gt;&#39;d2lzh_pytorch&#39;&lt;/span&gt; has no attribute &lt;span class=&quot;string&quot;&gt;&#39;use_svg_display()&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;module &lt;span class=&quot;string&quot;&gt;&#39;d2lzh_pytorch&#39;&lt;/span&gt; has no attribute &lt;span class=&quot;string&quot;&gt;&#39;load_data_fashion_mnist&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="D2L" scheme="https://hexo.flower48237.com/categories/D2L/"/>
    
    
    <category term="深度学习" scheme="https://hexo.flower48237.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="PyTorch" scheme="https://hexo.flower48237.com/tags/PyTorch/"/>
    
    <category term="Jupyter" scheme="https://hexo.flower48237.com/tags/Jupyter/"/>
    
    <category term="Python" scheme="https://hexo.flower48237.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Typora本地图片上传到图床</title>
    <link href="https://hexo.flower48237.com/2021/12/09/D2L-Typora%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%9B%BE%E5%BA%8A/"/>
    <id>https://hexo.flower48237.com/2021/12/09/D2L-Typora%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%9B%BE%E5%BA%8A/</id>
    <published>2021-12-09T12:00:00.000Z</published>
    <updated>2021-12-10T01:39:12.782Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><p>使用Typora写文档时上传图片的路径默认是本地磁盘的路径。导致文档上传到csdn等博客网站时，出现图片失效无法识别的问题。<br>设置Typora使用PicGo-Core将本地图片上传到图床，可以解决此问题（<a href="https://picgo.github.io/PicGo-Core-Doc/zh/guide/" target="_blank" rel="noopener">PicGo-Core</a>，<a href="https://support.typora.io/Upload-Image/#picgo-core-command-line-opensource" target="_blank" rel="noopener">Typora Upload Images</a>）。</p><a id="more"></a><p>步骤如下：</p><h3 id="1-修改插入图片设置"><a href="#1-修改插入图片设置" class="headerlink" title="1.修改插入图片设置"></a>1.修改插入图片设置</h3><ul><li>进入“文件 –&gt; 偏好设置 –&gt; 图像 –&gt;”</li><li>将 <strong>插入图片时的操作</strong> 修改为“==上传图片==”<img src="https://img-blog.csdnimg.cn/img_convert/bd8818aad79d16b3dadbdc422238ccf9.png" alt="image-20211209165704146"></li></ul><h3 id="2-下载PicGo-Core"><a href="#2-下载PicGo-Core" class="headerlink" title="2.下载PicGo-Core"></a>2.下载PicGo-Core</h3><h4 id="2-1-选择上传服务"><a href="#2-1-选择上传服务" class="headerlink" title="2.1 选择上传服务"></a>2.1 选择上传服务</h4><ul><li>在偏好设置——图像中，选择上传服务为“==PicGo-Core(command line)==”<br><img src="https://img-blog.csdnimg.cn/img_convert/2041698e0d1741bb0d801a4401809123.png" alt="image-20211209165735991"><h4 id="2-2-点击下载或更新"><a href="#2-2-点击下载或更新" class="headerlink" title="2.2 点击下载或更新"></a>2.2 点击下载或更新</h4></li><li>系统检测后会提示是否同意下载，同意下载即可<br><img src="https://img-blog.csdnimg.cn/img_convert/0bffb31e4ad60e8c2ad55749b60cae34.png" alt="image-20211209165926187"><h3 id="3-配置SM-MS"><a href="#3-配置SM-MS" class="headerlink" title="3.配置SM.MS"></a>3.配置SM.MS</h3><h4 id="3-1-在smms官网注册免费账号"><a href="#3-1-在smms官网注册免费账号" class="headerlink" title="3.1 在smms官网注册免费账号"></a>3.1 在smms官网注册免费账号</h4></li><li><a href="https://sm.ms/home/" target="_blank" rel="noopener">smms官网链接</a></li><li>注册免费账号，会有5G免费内存<br><img src="https://img-blog.csdnimg.cn/img_convert/5eabcec973a5e253b7bb715225ba4a53.png" alt="image-20211209170201012"></li></ul><h4 id="3-2-获取token"><a href="#3-2-获取token" class="headerlink" title="3.2 获取token"></a>3.2 获取token</h4><ul><li>从dashboard的api token中复制token<img src="https://img-blog.csdnimg.cn/img_convert/b394a01e1f850d18761b44c3db747e50.png" alt="image-20211209170306173"><br><img src="https://img-blog.csdnimg.cn/img_convert/69edd6085a844eace1848d50052ac2ad.png" alt="image-20211209170408404"><h3 id="4-修改PicGo-Core配置文件"><a href="#4-修改PicGo-Core配置文件" class="headerlink" title="4.修改PicGo-Core配置文件"></a>4.修改PicGo-Core配置文件</h3></li></ul><h4 id="4-1-打开配置文件"><a href="#4-1-打开配置文件" class="headerlink" title="4.1 打开配置文件"></a>4.1 打开配置文件</h4><ul><li><p>图像设置界面“==打开配置文件==”<img src="https://img-blog.csdnimg.cn/img_convert/be64139ac3895414027733c778372d2d.png" alt="image-20211209170443384"></p><h4 id="4-2-填写token"><a href="#4-2-填写token" class="headerlink" title="4.2 填写token"></a>4.2 填写token</h4></li><li><p>将以下代码和刚才复制的token填写到配置文件中</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"picBed"</span>: &#123;</span><br><span class="line">    <span class="attr">"current"</span>: <span class="string">"smms"</span>,</span><br><span class="line">    <span class="attr">"smms"</span>: &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"刚才复制的token"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"picgoPlugins"</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-图片上传测试"><a href="#5-图片上传测试" class="headerlink" title="5.图片上传测试"></a>5.图片上传测试</h3><ul><li>在Typora的操作界面新建.md文件并粘贴图片测试是否能够上传</li><li>本文所有图片均为使用PicGo-Core上传的</li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;问题：&quot;&gt;&lt;a href=&quot;#问题：&quot; class=&quot;headerlink&quot; title=&quot;问题：&quot;&gt;&lt;/a&gt;问题：&lt;/h3&gt;&lt;p&gt;使用Typora写文档时上传图片的路径默认是本地磁盘的路径。导致文档上传到csdn等博客网站时，出现图片失效无法识别的问题。&lt;br&gt;设置Typora使用PicGo-Core将本地图片上传到图床，可以解决此问题（&lt;a href=&quot;https://picgo.github.io/PicGo-Core-Doc/zh/guide/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PicGo-Core&lt;/a&gt;，&lt;a href=&quot;https://support.typora.io/Upload-Image/#picgo-core-command-line-opensource&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Typora Upload Images&lt;/a&gt;）。&lt;/p&gt;</summary>
    
    
    
    <category term="其他" scheme="https://hexo.flower48237.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="其他" scheme="https://hexo.flower48237.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>win10使用Anaconda创建可使用PyTorch虚拟环境</title>
    <link href="https://hexo.flower48237.com/2021/12/08/D2L-win10%E4%BD%BF%E7%94%A8Anaconda%E5%88%9B%E5%BB%BA%E5%8F%AF%E4%BD%BF%E7%94%A8PyTorch%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    <id>https://hexo.flower48237.com/2021/12/08/D2L-win10%E4%BD%BF%E7%94%A8Anaconda%E5%88%9B%E5%BB%BA%E5%8F%AF%E4%BD%BF%E7%94%A8PyTorch%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</id>
    <published>2021-12-08T14:00:00.000Z</published>
    <updated>2021-12-08T13:29:43.972Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1、安装Anaconda"><a href="#1、安装Anaconda" class="headerlink" title="1、安装Anaconda"></a>1、安装Anaconda</h2><ul><li>可参考<a href="https://blog.csdn.net/flower_48237/article/details/121798811" target="_blank" rel="noopener">安装Anaconda+常用的conda命令+Anaconda换源+安装Jupyter</a></li></ul><h2 id="2、创建虚拟环境"><a href="#2、创建虚拟环境" class="headerlink" title="2、创建虚拟环境"></a>2、创建虚拟环境</h2><ul><li>win10系统，进入cmd</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建名为pytorch的虚拟环境</span></span><br><span class="line">conda create --name pytorch python=3.6</span><br><span class="line"><span class="comment"># 激活名为pytorch的虚拟环境</span></span><br><span class="line">conda activate pytorch</span><br></pre></td></tr></table></figure><h2 id="安装PyTorch包"><a href="#安装PyTorch包" class="headerlink" title="安装PyTorch包"></a>安装PyTorch包</h2><a id="more"></a><ul><li><p>进入<a href="https://pytorch.org/get-started/locally/" target="_blank" rel="noopener">PyTorch官网</a>，根据提示选择适合自己电脑配置的安装命令，如图，蓝色不跟需要注意选择<img src="https://img-blog.csdnimg.cn/0e5dd92a795040e0a6daab5dc56ac70f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在pytorch虚拟环境中使用官网提示的命令安装PyTorch，以仅使用cpu为例：</span></span><br><span class="line">conda install pytorch torchvision torchaudio cpuonly -c pytorch</span><br></pre></td></tr></table></figure></li><li><p>命令行输入<code>python</code>进入python，并输入下面代码可查看pytorch是否安装成功：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line">print(torch.__version)</span><br></pre></td></tr></table></figure><ul><li>安装成功提示如图 <img src="https://img-blog.csdnimg.cn/2a045f0e3c5245c4924820c79ee3b50b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-luSHFDuQ-1638969271298)(C:\Users\Q\AppData\Roaming\Typora\typora-user-images\image-20211208164303307.png)\]"></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1、安装Anaconda&quot;&gt;&lt;a href=&quot;#1、安装Anaconda&quot; class=&quot;headerlink&quot; title=&quot;1、安装Anaconda&quot;&gt;&lt;/a&gt;1、安装Anaconda&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;可参考&lt;a href=&quot;https://blog.csdn.net/flower_48237/article/details/121798811&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;安装Anaconda+常用的conda命令+Anaconda换源+安装Jupyter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2、创建虚拟环境&quot;&gt;&lt;a href=&quot;#2、创建虚拟环境&quot; class=&quot;headerlink&quot; title=&quot;2、创建虚拟环境&quot;&gt;&lt;/a&gt;2、创建虚拟环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;win10系统，进入cmd&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 创建名为pytorch的虚拟环境&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;conda create --name pytorch python=3.6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 激活名为pytorch的虚拟环境&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;conda activate pytorch&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;安装PyTorch包&quot;&gt;&lt;a href=&quot;#安装PyTorch包&quot; class=&quot;headerlink&quot; title=&quot;安装PyTorch包&quot;&gt;&lt;/a&gt;安装PyTorch包&lt;/h2&gt;</summary>
    
    
    
    <category term="D2L" scheme="https://hexo.flower48237.com/categories/D2L/"/>
    
    
    <category term="深度学习" scheme="https://hexo.flower48237.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="PyTorch" scheme="https://hexo.flower48237.com/tags/PyTorch/"/>
    
    <category term="Python" scheme="https://hexo.flower48237.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>安装Anaconda+常用的conda命令+Anaconda换源+安装Jupyter</title>
    <link href="https://hexo.flower48237.com/2021/12/08/D2L-%E5%AE%89%E8%A3%85Anaconda+%E5%B8%B8%E7%94%A8%E7%9A%84conda%E5%91%BD%E4%BB%A4+Anaconda%E6%8D%A2%E6%BA%90+%E5%AE%89%E8%A3%85Jupyter/"/>
    <id>https://hexo.flower48237.com/2021/12/08/D2L-%E5%AE%89%E8%A3%85Anaconda+%E5%B8%B8%E7%94%A8%E7%9A%84conda%E5%91%BD%E4%BB%A4+Anaconda%E6%8D%A2%E6%BA%90+%E5%AE%89%E8%A3%85Jupyter/</id>
    <published>2021-12-08T13:00:00.000Z</published>
    <updated>2021-12-08T13:29:44.997Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="安装Anaconda"><a href="#安装Anaconda" class="headerlink" title="安装Anaconda"></a>安装Anaconda</h2><ul><li><a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/" target="_blank" rel="noopener">下载并安装Anaconda</a></li></ul><h2 id="常用的conda命令"><a href="#常用的conda命令" class="headerlink" title="常用的conda命令"></a>常用的conda命令</h2>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建虚拟环境</span></span><br><span class="line">conda create -n pytorch python=3.6</span><br><span class="line"><span class="comment"># 删除虚拟环境</span></span><br><span class="line">conda env remove -n pytorch</span><br><span class="line"><span class="comment"># 激活指定虚拟环境</span></span><br><span class="line">conda activate pytorch</span><br><span class="line"><span class="comment"># 退出当前虚拟环境</span></span><br><span class="line">conda deactivate</span><br><span class="line"><span class="comment"># 安装包，如numpy（提前进入目标环境）</span></span><br><span class="line">conda install numpy</span><br><span class="line">或</span><br><span class="line">pip install numpy</span><br><span class="line"><span class="comment"># 安装指定版本的包，如numpy</span></span><br><span class="line">pip install numpy==1.6.0</span><br><span class="line"><span class="comment"># 升级包</span></span><br><span class="line">pip install --upgrade numpy</span><br><span class="line"><span class="comment"># 卸载包</span></span><br><span class="line">pip uninstall numpy</span><br><span class="line"><span class="comment"># 查看conda中所有环境</span></span><br><span class="line">conda info -e</span><br><span class="line"><span class="comment"># 查看某个环境中安装的所有包（提前进入目标环境）</span></span><br><span class="line">conda list</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Anaconda换源"><a href="#Anaconda换源" class="headerlink" title="Anaconda换源"></a>Anaconda换源</h2><ul><li>修改镜像为国内源，如<a href="https://mirror.tuna.tsinghua.edu.cn/help/anaconda/" target="_blank" rel="noopener">清华源</a></li></ul><h2 id="安装Jupyter"><a href="#安装Jupyter" class="headerlink" title="安装Jupyter"></a>安装Jupyter</h2><ul><li><p>安装Anaconda软件之后，在首页找到Jupyter点击Install。</p></li><li><p>不同虚拟环境下各自的Jupyter，只需提前在Anaconda软件界面切换虚拟环境。<img src="https://img-blog.csdnimg.cn/924a3454cffd4f64b270843cf8e0a9f1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-ZeDiUbNm-1638962174624)(C:\Users\Q\AppData\Roaming\Typora\typora-user-images\image-20211208170503225.png)\]"></p></li><li><p>为不同的jupyter指定不同的工作路径，首先为这个jupyter新增一个本地工作路径<code>path</code>，找到“开始”处新增的快捷方式：Jupyter Notebook (pytorch)，右键打开文件路径，再右键属性，修改<strong>目标(T)</strong>，把<code>&quot;%USERPROFILE&quot;</code>修改为指定路径path，如图。<br><img src="https://img-blog.csdnimg.cn/b46cec417d1e454ea23d617f1bc9755d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="&lt;img src=&quot;C:\Users\Q\AppData\Roaming\Typora\typora-user-images\image-20211208170823226.png&quot; alt=&quot;image-20211208170823226&quot; style=&quot;zoom: 33%;&quot; /&gt;"><br><img src="https://img-blog.csdnimg.cn/35e6df5b53eb40ffa276e2b3f52eece8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="&lt;img src=&quot;C:\Users\Q\AppData\Roaming\Typora\typora-user-images\image-20211208171047220.png&quot; alt=&quot;image-20211208171047220&quot; style=&quot;zoom:33%;&quot; /&gt;"></p></li></ul><ul><li>修改后单击该快捷方式即可进入网页使用JupyterNoteBook</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;安装Anaconda&quot;&gt;&lt;a href=&quot;#安装Anaconda&quot; class=&quot;headerlink&quot; title=&quot;安装Anaconda&quot;&gt;&lt;/a&gt;安装Anaconda&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下载并安装Anaconda&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;常用的conda命令&quot;&gt;&lt;a href=&quot;#常用的conda命令&quot; class=&quot;headerlink&quot; title=&quot;常用的conda命令&quot;&gt;&lt;/a&gt;常用的conda命令&lt;/h2&gt;  &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 创建虚拟环境&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;conda create -n pytorch python=3.6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 删除虚拟环境&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;conda env remove -n pytorch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 激活指定虚拟环境&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;conda activate pytorch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 退出当前虚拟环境&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;conda deactivate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 安装包，如numpy（提前进入目标环境）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;conda install numpy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;或&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pip install numpy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 安装指定版本的包，如numpy&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pip install numpy==1.6.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 升级包&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pip install --upgrade numpy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 卸载包&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pip uninstall numpy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 查看conda中所有环境&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;conda info -e&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 查看某个环境中安装的所有包（提前进入目标环境）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;conda list&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="D2L" scheme="https://hexo.flower48237.com/categories/D2L/"/>
    
    
    <category term="深度学习" scheme="https://hexo.flower48237.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Jupyter" scheme="https://hexo.flower48237.com/tags/Jupyter/"/>
    
    <category term="Anaconda" scheme="https://hexo.flower48237.com/tags/Anaconda/"/>
    
    <category term="conda" scheme="https://hexo.flower48237.com/tags/conda/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot+Vue项目部署到Linux服务器</title>
    <link href="https://hexo.flower48237.com/2021/12/08/SpringBoot+Vue%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0Linux%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://hexo.flower48237.com/2021/12/08/SpringBoot+Vue%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0Linux%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2021-12-08T01:00:00.000Z</published>
    <updated>2021-12-08T00:26:49.732Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Note:<br>1、Linux服务器选用的是CentOS7.7，其他类型也可以<br>2、需要在服务器配置jdk和Nginx<br>3、后端打包类型为jar包，war包需要自行修改后端配置<br>4、暂未部署Docker，后续更新</p></blockquote><h2 id="1、服务器配置"><a href="#1、服务器配置" class="headerlink" title="1、服务器配置"></a>1、服务器配置</h2><h3 id="1-1-安装宝塔"><a href="#1-1-安装宝塔" class="headerlink" title="1.1 安装宝塔"></a>1.1 安装宝塔</h3><ul><li><p>参考<a href="https://www.bt.cn/bbs/thread-19376-1-1.html" target="_blank" rel="noopener">宝塔官方教程</a>即可，首先登录服务器，设置安全组放行端口，把8888放开，然后使用终端执行命令（以CentOS为例）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh 2c87998c</span><br></pre></td></tr></table></figure></li><li><p>安装完成后记录终端处的登录入口、账号、密码，然后登录</p></li><li><p>登录后需要注册个账号，注册绑定后即可正常使用宝塔</p></li></ul><h3 id="1-2-安装并配置MySQL、Redis、Nginx"><a href="#1-2-安装并配置MySQL、Redis、Nginx" class="headerlink" title="1.2 安装并配置MySQL、Redis、Nginx"></a>1.2 安装并配置MySQL、Redis、Nginx</h3><ul><li>使用宝塔安装Mysql、Redis、Nginx，便于管理</li><li>在宝塔的软件商店中搜索Mysql、Redis、Nginx并快捷安装</li></ul><h3 id="1-3-创建数据库并导入数据"><a href="#1-3-创建数据库并导入数据" class="headerlink" title="1.3 创建数据库并导入数据"></a>1.3 创建数据库并导入数据</h3><ul><li>进入宝塔的数据库界面，添加数据库，填写数据库名、选择字符集、设置访问权限为<strong>所有人</strong>（这样才能使用其他终端访问），完成后提交，提示添加成功即为创建成功<br><img src="https://img-blog.csdnimg.cn/1071649913bc4f13adaae52735417a23.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-fkjp1sk8-1638865326066)(C:\Users\Q\AppData\Roaming\Typora\typora-user-images\image-20211206191659514.png)\]"></li><li>创建成功后，点击导入，把本地数据库的测试数据导入到服务器中的数据库。提示导入数据库成功即可。<img src="https://img-blog.csdnimg.cn/9e6c0ba2679d44adbb5942704d21c09c.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2a15f18acdd844408670d127b9e72e02.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述">)<img src="https://img-blog.csdnimg.cn/b5630943ab0c48d99467dfcfcae2e13e.png" alt="在这里插入图片描述"></li></ul><h3 id="1-4-安装并配置jdk"><a href="#1-4-安装并配置jdk" class="headerlink" title="1.4 安装并配置jdk"></a>1.4 安装并配置jdk</h3><h4 id="1-4-1-官网下载JDK并上传到服务器"><a href="#1-4-1-官网下载JDK并上传到服务器" class="headerlink" title="1.4.1 官网下载JDK并上传到服务器"></a>1.4.1 官网下载JDK并上传到服务器</h4><ul><li><p>从<a href="https://www.oracle.com/java/technologies/downloads/#java8" target="_blank" rel="noopener">官网下载</a>可用于Linux的jdk包，通过宝塔上传到服务器</p></li><li><p>建议上传到/www/server下</p><blockquote><p>PS：/www/server是宝塔软件的默认安装目录，把软件都放到一起，方便查找</p></blockquote></li><li><p>然后使用终端，进入jdk的上传目录，使用解压命令，把上传的jdk文件解压到当前目录，然后把解压后的文件夹重命名为jdk8</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf jdk-8u311-linux-x64.tar.gz</span><br><span class="line">mv jdk1.8.0_311 jdk8</span><br></pre></td></tr></table></figure></li></ul><h4 id="1-4-2-配置环境变量"><a href="#1-4-2-配置环境变量" class="headerlink" title="1.4.2 配置环境变量"></a>1.4.2 配置环境变量</h4><ul><li><p>1.打开 /etc/profile 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim profile</span><br></pre></td></tr></table></figure></li><li><p>2.在 profile 文件末尾，配置jdk环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/www/server/jdk8</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=$:CLASSPATH:<span class="variable">$JAVA_HOME</span>/lib/</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$JAVA_HOME</span>/jre</span><br></pre></td></tr></table></figure></li><li><p>3.使 profile 生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> profile</span><br></pre></td></tr></table></figure></li><li><p>4.查看jdk是否配置成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p>显示版本号即为配置成功<br><img src="https://img-blog.csdnimg.cn/89f0b3afb759448e9c1bdd24b38b1f16.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="&lt;img src=&quot;C:\Users\Q\AppData\Roaming\Typora\typora-user-images\image-20211205185540742.png&quot; alt=&quot;image-20211205185540742&quot; style=&quot;zoom: 40%;&quot; /&gt;"></p><h3 id="1-5-安全组配置、放行端口配置"><a href="#1-5-安全组配置、放行端口配置" class="headerlink" title="1.5  安全组配置、放行端口配置"></a>1.5  安全组配置、放行端口配置</h3></li></ul><h4 id="1-5-1-安全组配置"><a href="#1-5-1-安全组配置" class="headerlink" title="1.5.1 安全组配置"></a>1.5.1 安全组配置</h4><ul><li><p>登录云服务器，在控制台处找到服务器，然后对安全组规则进行更改</p></li><li><p>以华为云为例，在入方向规则处添加前后端使用的端口（如8080和8081）<br><img src="https://img-blog.csdnimg.cn/77388f3c42be44a9ace3f761099a122c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-zB2nM8g3-1638865326069)(C:\Users\Q\AppData\Roaming\Typora\typora-user-images\image-20211207141808228.png)\]"></p><h4 id="1-5-2-放行端口配置"><a href="#1-5-2-放行端口配置" class="headerlink" title="1.5.2 放行端口配置"></a>1.5.2 放行端口配置</h4></li><li><p>在宝塔的安全功能中放行前后端项目需要使用的端口，如8080和8081<img src="https://img-blog.csdnimg.cn/218017c99b1a4501b6da994d8c15b92e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="2、SpringBoot项目配置"><a href="#2、SpringBoot项目配置" class="headerlink" title="2、SpringBoot项目配置"></a>2、SpringBoot项目配置</h2></li></ul><h3 id="2-1-配置修改"><a href="#2-1-配置修改" class="headerlink" title="2.1 配置修改"></a>2.1 配置修改</h3><ul><li><p>后端拆分application.yml配置文件，可拆分出本地dev和生产pro两个（也可以多拆出test）<img src="https://img-blog.csdnimg.cn/77ca91faa60c4ff48261a68a38c284b9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p></li><li><p>application.yml文件中保留通用配置<img src="https://img-blog.csdnimg.cn/7e40290fe7e14f4480f026f523f17ca4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p></li><li><p>application-dev.yml文件中配置本地运行项目所用的配置<img src="https://img-blog.csdnimg.cn/1ba3b831d83c4ddaa18284c39b011efa.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p></li><li><p>application-pro.yml文件中配置服务器中运行项目所用的配置，其中服务器数据库名称，即为1.3节中添加的数据库名，密码从宝塔界面点击复制即可，注意不是使用root密码，而是使用刚创建的数据库的密码（下图有误，redis的host保持127.0.0.1即可）<img src="https://img-blog.csdnimg.cn/b23b0a832651403185814cfab9f2147b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述">)<img src="https://img-blog.csdnimg.cn/97fe5323b1c2405d8d479a5b3686efff.png" alt="在这里插入图片描述"></p></li><li><p>dev和pro的不同之处主要是MySQL的配置。</p><ul><li>pro中需要按照<strong>服务器的IP和数据库配置</strong>来填写，可在application.yml文件中修改active指向pro，来测试是否能够成功连接服务器中的数据库</li></ul></li></ul><h3 id="2-2-打包"><a href="#2-2-打包" class="headerlink" title="2.2 打包"></a>2.2 打包</h3><ul><li><p>修改application.yml文件中的active:pro，然后执行maven clean，清除本地测试时生成的jar包<img src="https://img-blog.csdnimg.cn/3150f7541e3748149f0b32032c789857.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p></li><li><p>执行maven package，后端项目打包完成<img src="https://img-blog.csdnimg.cn/371e2ef7900a453b8e0fa74d5aecafe7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="2-3-上传到服务器"><a href="#2-3-上传到服务器" class="headerlink" title="2.3 上传到服务器"></a>2.3 上传到服务器</h3></li><li><p>找到项目路径下打包出的文件 target，找到target下的打包文件，后缀名是 .jar，即可运行的jar包，然后使用宝塔将其从本地路径中上传到服务器，路径可以为 /www/wwwroot/project_name，末尾的project_name文件夹可按照自己需求新建</p><blockquote><p> PS：/www/wwwroot路径是宝塔默认建站目录，放到此处便于查找</p></blockquote><p><img src="https://img-blog.csdnimg.cn/a4fa2547b3784434a70c23e9c7b66099.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-lvcAnWm8-1638865326074)(C:\Users\Q\AppData\Roaming\Typora\typora-user-images\image-20211207142402694.png)\]"></p></li></ul><h3 id="2-4-后端项目服务器配置"><a href="#2-4-后端项目服务器配置" class="headerlink" title="2.4 后端项目服务器配置"></a>2.4 后端项目服务器配置</h3><ul><li>只需确保jdk安装成功，且jar包上传成功即可</li></ul><h3 id="2-5-运行测试"><a href="#2-5-运行测试" class="headerlink" title="2.5 运行测试"></a>2.5 运行测试</h3><h4 id="2-5-1-运行后端jar包"><a href="#2-5-1-运行后端jar包" class="headerlink" title="2.5.1 运行后端jar包"></a>2.5.1 运行后端jar包</h4><p><strong>在Linux系统下有多种运行jar包的方式。建议使用方法d，保留项目运行日志。日志文件会生成到项目同级路径下。</strong></p><ul><li><p>a.当前终端被锁定，可按CTRL + C打断程序运行，或关闭窗口退出程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar xxx.jar</span><br></pre></td></tr></table></figure></li><li><p>b.当前终端不被锁定，但是当窗口关闭时，程序中止运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar xxx.jar &amp;</span><br></pre></td></tr></table></figure></li><li><p>c.不挂断运行命令,当账户退出或终端关闭时,程序仍然运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar xxxx.jar &amp;</span><br></pre></td></tr></table></figure></li><li><p>d.指定输出日志文件，不挂断运行命令，退出或终端关闭时程序仍然运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar xxx.jar &gt; project.log</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-5-2-查看日志文件"><a href="#2-5-2-查看日志文件" class="headerlink" title="2.5.2 查看日志文件"></a>2.5.2 查看日志文件</h4><ul><li><p>建议使用动态查看命令，查看实时更新的日志，打开一个<strong>新的终端</strong>，输入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f project.log</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-5-2-停止运行后端jar包"><a href="#2-5-2-停止运行后端jar包" class="headerlink" title="2.5.2 停止运行后端jar包"></a>2.5.2 停止运行后端jar包</h4><ul><li><p>若使用2.5.1种的方法a、b，直接关闭终端即可</p></li><li><p>若使用2.5.1种的方法c、d，需要查找后端使用端口（这个端口号是填写在SpringBoot项目的application.yml文件中server项中的）占用的进程号，然后关闭进程，即可停掉jar包的运行。命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">netstat -tunlp | grep 端口号</span><br><span class="line"></span><br><span class="line">// 得到进程号</span><br><span class="line"></span><br><span class="line"><span class="built_in">kill</span> -9 进程号</span><br></pre></td></tr></table></figure></li><li><p>操作如图，8081是我的后端项目占用的端口号，13061是进程ID<br><img src="https://img-blog.csdnimg.cn/1351d53e7c244ab4a296880ca357f59e.png" alt="在这里插入图片描述"></p></li></ul><h2 id="3、Vue项目配置"><a href="#3、Vue项目配置" class="headerlink" title="3、Vue项目配置"></a>3、Vue项目配置</h2><h3 id="3-1-配置修改"><a href="#3-1-配置修改" class="headerlink" title="3.1 配置修改"></a>3.1 配置修改</h3><ul><li><p>axios.js文件的URL配置为  ==服务器公网IP:端口号==</p></li><li><pre><code class="javascript">axios.defaults.baseURL = <span class="string">"http://服务器公网IP:端口号"</span><span class="comment">// axios.defaults.baseURL = "http://localhost:端口号" 本地使用localhost</span>&lt;!--￼<span class="number">12</span>--&gt;</code></pre></li><li><p>打包后的文件名为dist，可在项目路径下查看</p></li></ul><h3 id="3-3-上传到服务器"><a href="#3-3-上传到服务器" class="headerlink" title="3.3 上传到服务器"></a>3.3 上传到服务器</h3><ul><li>通过宝塔可直接上传dist文件夹，如果没有宝塔，可以将dist文件夹压缩后上传到服务器</li><li>建议上传到与2.3节中提到的后端项目上传路径中，相同一个需求的前后端项目放到同一个文件夹中便于查找：/www/wwwroot/project_name</li></ul><h3 id="3-4-前端项目服务器配置"><a href="#3-4-前端项目服务器配置" class="headerlink" title="3.4 前端项目服务器配置"></a>3.4 前端项目服务器配置</h3><ul><li><p>需要对服务器的Nginx进行配置，以满足前端项目的运行</p></li><li><p>通过宝塔安装Nginx，其默认的配置文件会被备份为 nginx.conf.default，且生成一份新的配置文件 nginx.conf。</p></li><li><p>如果是使用宝塔安装的Nginx，则文件存放路径为/www/server/nginx/conf</p></li><li><p>首先从 nginx.conf.default 中复制一份以 server 为标签的代码，如下图：<img src="https://img-blog.csdnimg.cn/9b584e70197e40bb94719568fa0227ca.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p></li><li><p>真正需要修改文件的是 <strong>nginx.conf</strong>，此文件可以通过宝塔界面的“软件商店”—“Nginx”—“设置”—“配置修改”来修改，在此处修改时如果修改的格式有误等错误会被提示无法保存<br><img src="https://img-blog.csdnimg.cn/a6504141d322426a9436a2a751e5308b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p></li><li><p>将<strong>上一步复制的server代码段</strong>复制到文件中的 include 标签上方（配置文件中会有一个已经存在的server 标签，不需要覆盖，顺着它粘贴代码段A即可，不会冲突）</p></li><li><p>删除代码段中所有注释，保留四个未被注释的标签（listen、server_name、location / 、error_page）即可</p></li><li><p>修改上述四个标签</p><ul><li><p>(1)listen标签后填写前端项目要使用的端口号</p></li><li><p>(2)server_name标签填写服务器公网IP</p></li><li><p>(3)location标签的root标签填写vue项目的打包文件dist的路径</p></li><li><p>(4)location标签的添加一行代码标签防止刷新出现404</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br></pre></td></tr></table></figure></li><li><p>(5)error_page标签不需要变动<br><img src="https://img-blog.csdnimg.cn/1768f6d6776c4e17bd4284b28b6980d8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="+ 修改后内容如图\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-N1RjvpYY-1638865326076)(C:\Users\Q\Desktop\屏幕截图 2021-12-07 152729.png)\]"></p></li></ul></li></ul><ul><li>重载Nginx配置并重新启动即可，在宝塔的界面操作很方便<img src="https://img-blog.csdnimg.cn/0b0d6bfae871424aa9a9559eb8b01d22.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></li></ul><h3 id="3-5-运行测试"><a href="#3-5-运行测试" class="headerlink" title="3.5 运行测试"></a>3.5 运行测试</h3><ul><li>确保已经重载Nginx配置并重新启动</li><li>在浏览器输入<strong>服务器公网IP:端口</strong>，查看是否能够进入vue项目首页</li></ul><h2 id="4、部署到服务器的前后端联调测试"><a href="#4、部署到服务器的前后端联调测试" class="headerlink" title="4、部署到服务器的前后端联调测试"></a>4、部署到服务器的前后端联调测试</h2><h3 id="4-1-运行后端项目"><a href="#4-1-运行后端项目" class="headerlink" title="4.1 运行后端项目"></a>4.1 运行后端项目</h3><ul><li>nohup java -jar xxx.jar &gt; project.log</li></ul><h3 id="4-2-运行前端项目"><a href="#4-2-运行前端项目" class="headerlink" title="4.2 运行前端项目"></a>4.2 运行前端项目</h3><ul><li>启动Nginx</li></ul><h3 id="4-3-访问与功能测试"><a href="#4-3-访问与功能测试" class="headerlink" title="4.3 访问与功能测试"></a>4.3 访问与功能测试</h3><ul><li>浏览器输入<strong>服务器公网IP:端口</strong>，测试能否进入项目</li><li>测试项目功能是否完整可用</li><li>测试是否有功能与本地测试效果不符</li></ul><h2 id="5、后续部署Docker（待完成）"><a href="#5、后续部署Docker（待完成）" class="headerlink" title="5、后续部署Docker（待完成）"></a>5、后续部署Docker（待完成）</h2><h2 id="6、可能存在的问题："><a href="#6、可能存在的问题：" class="headerlink" title="6、可能存在的问题："></a>6、可能存在的问题：</h2><h3 id="1、打包失败"><a href="#1、打包失败" class="headerlink" title="1、打包失败"></a>1、打包失败</h3><ul><li><p>保错：</p><p>Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.22.2:test (default-test) on project XXX: There are test failures.</p><p>Please refer to D:\IDEAWorkSpace\blog\target\surefire-reports for the individual test results.<br>Please refer to dump files (if any exist) [date].dump, [date]-jvmRun[N].dump and [date].dumpstream.</p></li><li><p>解决</p><p>使用命令，跳过测试打包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package -Dmaven.test.skip=<span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="SpringBoot+Vue" scheme="https://hexo.flower48237.com/categories/SpringBoot-Vue/"/>
    
    
    <category term="SpringBoot" scheme="https://hexo.flower48237.com/tags/SpringBoot/"/>
    
    <category term="Vue" scheme="https://hexo.flower48237.com/tags/Vue/"/>
    
    <category term="Linux" scheme="https://hexo.flower48237.com/tags/Linux/"/>
    
    <category term="云服务器" scheme="https://hexo.flower48237.com/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="部署" scheme="https://hexo.flower48237.com/tags/%E9%83%A8%E7%BD%B2/"/>
    
    <category term="Nginx" scheme="https://hexo.flower48237.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题105.从前序与中序遍历序列构造二叉树</title>
    <link href="https://hexo.flower48237.com/2021/11/30/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98105.%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://hexo.flower48237.com/2021/11/30/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98105.%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2021-11-30T14:51:56.186Z</published>
    <updated>2021-11-30T14:50:16.804Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定一棵树的前序遍历 preorder 与中序遍历  inorder 。请构造二叉树并返回其根节点。</li><li>preorder 和 inorder 均无重复元素</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">example</span><br><span class="line">input  : preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]</span><br><span class="line">output : [3,9,20,null,null,15,7]</span><br><span class="line">input  : preorder = [-1], inorder = [-1]</span><br><span class="line">output : [-1]</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路 递归</strong></p><ul><li>根据前序遍历和中序遍历序列的性质，以及数组不含重复元素的性质</li><li>前序遍历的首个元素，是树的根节点，其后依次为根节点左子树的前序遍历序列（可为空）、根节点右子树的前序遍历序列（可为空）</li><li>中序遍历的根节点元素两侧，分别是根节点的左子树的中序遍历序列（可为空）、右子树的中序遍历序列（可为空）</li><li>每个子树的前序遍历和中序遍历序列依然符合上述性质</li><li>故使用 迭代 不断构建子树，退出标志是数组为空<ul><li>先取每次迭代中 前序遍历序列的首个元素 tree ，找到中序遍历序列中的值相等的元素位置</li><li>获取 tree 的 左子树 在前序遍历和中序遍历序列中的 子序列，复制到新的可用于新一轮迭代的数组leftPre、leftIn中</li><li>使用 tree 节点的前序遍历和中序遍历序列进行新一轮迭代，构建 tree节点的左子树    </li><li>获取 tree 的 右子树 在前序遍历和中序遍历序列中的 子序列，复制到新的可用于新一轮迭代的数组rightPre、rightIn中</li><li>使用 tree 节点的前序遍历和中序遍历序列进行新一轮迭代，构建 tree节点的右子树</li></ul></li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == preorder || preorder.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> length = preorder.length;</span><br><span class="line">        <span class="comment">// 从前序遍历数组中获取每一轮的根节点</span></span><br><span class="line">        TreeNode tree = <span class="keyword">new</span> TreeNode(preorder[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从中序遍历数组中找到根的位置，以便接下来获取其左右子树</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (index &lt; length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (inorder[index] == tree.val) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 以下开始分别构建当前节点的左右子树</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建左子树</span></span><br><span class="line">        <span class="keyword">if</span> (index &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 左子树不为空，获取tree的左子树在前序遍历和中序遍历序列中的子序列，复制到新的可用于新一轮迭代的数组中</span></span><br><span class="line">            <span class="keyword">int</span>[] leftPre = Arrays.copyOfRange(preorder, <span class="number">1</span>, index + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span>[] leftIn = Arrays.copyOfRange(inorder, <span class="number">0</span>, index);</span><br><span class="line">            <span class="comment">// 递归构建左子树</span></span><br><span class="line">            tree.left = buildTree(leftPre, leftIn);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 左子树为空</span></span><br><span class="line">            tree.left = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建右子树</span></span><br><span class="line">        <span class="keyword">int</span> rlen = length - index - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (rlen &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 右子树不为空，获取tree的右子树在前序遍历和中序遍历序列中的子序列，复制到新的可用于新一轮迭代的数组中</span></span><br><span class="line">            <span class="keyword">int</span>[] rightPre = Arrays.copyOfRange(preorder, index + <span class="number">1</span>, index + <span class="number">1</span> + rlen);</span><br><span class="line">            <span class="keyword">int</span>[] righIn = Arrays.copyOfRange(inorder, index + <span class="number">1</span>, index + <span class="number">1</span> + rlen);</span><br><span class="line">            <span class="comment">// 递归构建左子树</span></span><br><span class="line">            tree.right = buildTree(rightPre, righIn);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 右子树为空</span></span><br><span class="line">            tree.right = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> tree;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定一棵树的前序遍历 preorder 与中序遍历  inorder 。请构造二叉树并返回其根节点。&lt;/li&gt;
&lt;li&gt;preorder 和 inorder 均无重复元素&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;example&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : [3,9,20,null,null,15,7]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : preorder = [-1], inorder = [-1]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : [-1]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://hexo.flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="数组" scheme="https://hexo.flower48237.com/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="分治" scheme="https://hexo.flower48237.com/tags/%E5%88%86%E6%B2%BB/"/>
    
    <category term="二叉树" scheme="https://hexo.flower48237.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    <category term="树" scheme="https://hexo.flower48237.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题230.二叉搜索树中第K小的元素</title>
    <link href="https://hexo.flower48237.com/2021/11/29/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98230.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%AC%ACK%E5%B0%8F%E7%9A%84%E5%85%83%E7%B4%A0/"/>
    <id>https://hexo.flower48237.com/2021/11/29/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98230.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%AC%ACK%E5%B0%8F%E7%9A%84%E5%85%83%E7%B4%A0/</id>
    <published>2021-11-29T15:44:19.880Z</published>
    <updated>2021-11-29T15:42:37.329Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定一个二叉搜索树的根节点 root ，和一个整数 k</li><li>设计一个算法查找其中第 k 个最小元素（从 1 开始计数）。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">example</span><br><span class="line">input  : root = [3,1,4,null,2], k = 1</span><br><span class="line">output : 1</span><br><span class="line">note   :    3</span><br><span class="line">           / \</span><br><span class="line">          1   4</span><br><span class="line">           \</span><br><span class="line">            2</span><br><span class="line">input  : root = [5,3,6,2,4,null,null,1], k = 3</span><br><span class="line">output : 3</span><br><span class="line">note   :         5</span><br><span class="line">                / \</span><br><span class="line">               3   6</span><br><span class="line">              /  \</span><br><span class="line">             2    4</span><br><span class="line">            /</span><br><span class="line">           1</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路1 直接中序遍历全部节点</strong></p><ul><li>直接递归，中序遍历整个树</li><li>递归过程中把节点值依次存放到列表中</li><li>因为二叉搜索树的中序遍历结果是升序的，所以直接返回列表的第k个元素值即可</li><li>时间复杂度：O(H+k)，H 是树的高度。在开始遍历之前，需要 O(H)到达叶结点。当树是平衡树时，时间复杂度取得最小值 O(logN+k)；当树是线性树（树中每个结点都只有一个子结点或没有子结点）时，时间复杂度取得最大值 O(N+k)。</li><li>空间复杂度：O(H)，栈中最多需要存储 H 个元素。当树是平衡树时，空间复杂度取得最小值 O(logN)；当树是线性树时，空间复杂度取得最大值 O(N)。</li></ul><p><strong>思路2 栈模拟中序遍历前k个节点</strong></p><ul><li>为减少遍历次数，优化思路是不要遍历整个的树，利用二叉搜索树的性质，遍历到目标元素时就停止</li><li>用栈模拟递归过程，中序遍历前k个节点</li><li>每次（假设当前是第 i 次）栈顶节点出栈，说明栈顶节点是整个树中的第 i 个小的值（二叉搜索时的中序遍历性质决定） </li><li>直接跳出遍历，返回最后一次弹出栈的节点值即可</li><li>时间复杂度：O(H+k)，H 是树的高度。在开始遍历之前，需要 O(H)到达叶结点。当树是平衡树时，时间复杂度取得最小值 O(logN+k)；当树是线性树（树中每个结点都只有一个子结点或没有子结点）时，时间复杂度取得最大值 O(N+k)。</li><li>空间复杂度：O(H)，栈中最多需要存储 H 个元素。当树是平衡树时，空间复杂度取得最小值 O(logN)；当树是线性树时，空间复杂度取得最大值 O(N)。</li></ul><p><strong>思路3 记录子树的结点数</strong></p><ul><li>如果需要频繁地查找第 k 小的值，优化思路是记录下以每个结点为根结点的子树的结点数，在查找第 k 小的值时，不断缩小查找范围 </li><li>令 node 等于根结点，开始搜索</li><li>记 node 的左子树的结点数为 left </li><li>若 left 小于 k-1，则第 k 小的元素一定在 node 的右子树中，令 node 等于其的右子结点，k 更新为 k−left−1，继续搜索；</li><li>若 left 等于 k-1，则第 k 小的元素即为 node ，结束搜索并返回 node 即可；</li><li>若 left 大于 k-1，则第 k 小的元素一定在 node 的左子树中，令 node 等于其左子结点，继续搜索。</li><li>时间复杂度：预处理的时间复杂度为 O(N)，其中 N 是树中结点的总数；需要遍历树中所有结点来统计以每个结点为根结点的子树的结点数。搜索的时间复杂度为 O(H)，其中 HH 是树的高度；当树是平衡树时，时间复杂度取得最小值 O(logN)；当树是线性树时，时间复杂度取得最大值 O(N)。</li><li>空间复杂度：O(N)，用于存储以每个结点为根结点的子树的结点数。</li></ul><p><strong><a href="https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst/solution/er-cha-sou-suo-shu-zhong-di-kxiao-de-yua-8o07/" target="_blank" rel="noopener">思路3参考了LeetCode官方题解</a></strong></p><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">kthSmallest</span><span class="params">(TreeNode root, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 中序遍历，DFS</span></span><br><span class="line">        DFS(root);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : list) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list.get(k - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DFS</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        DFS(root.left);</span><br><span class="line">        list.add(root.val);</span><br><span class="line">        DFS(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路2代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">kthSmallest</span><span class="params">(TreeNode root, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 用栈模拟实现中序遍历</span></span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="comment">// 需要保证从最小的元素作为第一个入栈元素，所以不能在循环外把根节点压入栈，故循环的边界条件添加了||root!=null条件</span></span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty() || root != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stack.add(root);</span><br><span class="line">                root = root.left;</span><br><span class="line">            &#125;</span><br><span class="line">            root = stack.pop();</span><br><span class="line">            System.out.print(root.val + <span class="string">" "</span>);</span><br><span class="line">            k--;</span><br><span class="line">            <span class="comment">// 第k个弹出栈的节点，其值一定为第k小的</span></span><br><span class="line">            <span class="keyword">if</span> (k == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            root = root.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root.val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路3代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">kthSmallest</span><span class="params">(TreeNode root, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        MyBst myBst = <span class="keyword">new</span> MyBst(root);</span><br><span class="line">        <span class="keyword">return</span> myBst.kthSmallest(k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyBst</span> </span>&#123;</span><br><span class="line">    TreeNode root;</span><br><span class="line">    Map&lt;TreeNode, Integer&gt; nodeNumber;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyBst</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.root = root;</span><br><span class="line">        <span class="keyword">this</span>.nodeNumber = <span class="keyword">new</span> HashMap&lt;TreeNode, Integer&gt;();</span><br><span class="line">        countNumber(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 统计以node为根结点的子树的结点数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">countNumber</span><span class="params">(TreeNode node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        nodeNumber.put(node, countNumber(node.left) + countNumber(node.right) + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> nodeNumber.get(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回二叉搜索树中第k小的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">kthSmallest</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        TreeNode node = root;</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> left = getNumber(node.left);</span><br><span class="line">            <span class="keyword">if</span> (left == k - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left &gt; k - <span class="number">1</span>) &#123;</span><br><span class="line">                node = node.left;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node = node.right;</span><br><span class="line">                k = k - left - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node.val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getNumber</span><span class="params">(TreeNode node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nodeNumber.getOrDefault(node, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定一个二叉搜索树的根节点 root ，和一个整数 k&lt;/li&gt;
&lt;li&gt;设计一个算法查找其中第 k 个最小元素（从 1 开始计数）。&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;example&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : root = [3,1,4,null,2], k = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;note   :    3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           / \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          1   4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : root = [5,3,6,2,4,null,null,1], k = 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;note   :         5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                / \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               3   6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              /  \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             2    4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            /&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://hexo.flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="二叉树" scheme="https://hexo.flower48237.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    <category term="DFS" scheme="https://hexo.flower48237.com/tags/DFS/"/>
    
    <category term="树" scheme="https://hexo.flower48237.com/tags/%E6%A0%91/"/>
    
    <category term="二叉搜索树" scheme="https://hexo.flower48237.com/tags/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    
    <category term="中序遍历" scheme="https://hexo.flower48237.com/tags/%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题102.二叉树的层次遍历</title>
    <link href="https://hexo.flower48237.com/2021/11/28/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98102.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86/"/>
    <id>https://hexo.flower48237.com/2021/11/28/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98102.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86/</id>
    <published>2021-11-28T10:19:27.622Z</published>
    <updated>2021-11-28T10:16:25.625Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定一个二叉树，返回按 层序遍历 得到的节点值。</li><li>即逐层地，从左到右访问所有节点。</li><li>相同层的节点值放在一个列表中</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">example</span><br><span class="line">input  : [3, 9, 20, null, null, 15, 7]</span><br><span class="line">output : [[3], [9,20], [15,7]]</span><br><span class="line">note   :     3</span><br><span class="line">            / \</span><br><span class="line">           9  20</span><br><span class="line">             /  \</span><br><span class="line">            15   7</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路</strong></p><ul><li><p>借助队列 queue 实现二叉树的层次遍历（广度优先遍历）</p></li><li><p>根节点入队</p></li><li><p>使用循环判断队列是否为空</p><ul><li>每次循环时，队列的长度 queue.size()，即为当前层的节点数量<ul><li>使用for循环，把队列中当前层的节点 treeNode 逐个移除队列并访问</li><li>把每个 treeNode 的值逐个添加到每一层的列表中</li><li>当前被访问的节点 treeNode 若有左子树（treeNode.left != null），则左子树入队</li><li>当前被访问的节点 treeNode 若有右子树（treeNode.right != null），则右子树入队</li></ul></li><li>把每层的节点值列表，添加到结果列表 lists 中</li></ul></li><li><p>队列为空时，说明遍历结束，返回lists</p></li><li><p>时间复杂度：O(n)，每个节点进队出队各一次。</p></li><li><p>空间复杂度：O(n)，队列中元素的个数不超过 n 个。</p></li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">        <span class="comment">// 空树直接返回空列表</span></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; lists = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> lists;</span><br><span class="line">        &#125;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 根节点先入队</span></span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> currentSize = queue.size();</span><br><span class="line">            List&lt;Integer&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; currentSize; i++) &#123;</span><br><span class="line">                TreeNode treeNode = queue.poll();</span><br><span class="line"></span><br><span class="line">                list.add(treeNode.val);</span><br><span class="line">                <span class="keyword">if</span> (treeNode.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    queue.add(treeNode.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (treeNode.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    queue.add(treeNode.right);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// System.out.print(treeNode.val + ", ");</span></span><br><span class="line">            &#125;</span><br><span class="line">            lists.add(list);</span><br><span class="line">            <span class="comment">// System.out.println();</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lists;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定一个二叉树，返回按 层序遍历 得到的节点值。&lt;/li&gt;
&lt;li&gt;即逐层地，从左到右访问所有节点。&lt;/li&gt;
&lt;li&gt;相同层的节点值放在一个列表中&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;example&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : [3, 9, 20, null, null, 15, 7]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : [[3], [9,20], [15,7]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;note   :     3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            / \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           9  20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             /  \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            15   7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://hexo.flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="二叉树" scheme="https://hexo.flower48237.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    <category term="BFS" scheme="https://hexo.flower48237.com/tags/BFS/"/>
    
    <category term="树" scheme="https://hexo.flower48237.com/tags/%E6%A0%91/"/>
    
    <category term="队列" scheme="https://hexo.flower48237.com/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题287.寻找重复数</title>
    <link href="https://hexo.flower48237.com/2021/11/27/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98287.%E5%AF%BB%E6%89%BE%E9%87%8D%E5%A4%8D%E6%95%B0/"/>
    <id>https://hexo.flower48237.com/2021/11/27/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98287.%E5%AF%BB%E6%89%BE%E9%87%8D%E5%A4%8D%E6%95%B0/</id>
    <published>2021-11-27T15:55:20.500Z</published>
    <updated>2021-11-27T15:54:53.609Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定一个包含 n + 1 个整数的数组 nums ，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。</li><li>假设 nums 只有一个重复的整数 ，找出 这个重复的数 。</li><li>解决方案必须不修改数组 nums 且只用常量级 O(1) 的额外空间。</li><li>提示：</li><li>1 &lt;= n &lt;= 105</li><li>nums.length == n + 1</li><li>1 &lt;= nums[i] &lt;= n</li><li>nums 中 只有一个整数 出现 两次或多次 ，其余整数均只出现 一次</li><li>进阶：<ul><li>如何证明 nums 中至少存在一个重复的数字?</li><li>设计一个线性级时间复杂度 O(n) 的解决方案</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">example</span><br><span class="line">input  : nums = &#123;1,3,4,2,2&#125;</span><br><span class="line">output : 2</span><br><span class="line">input  : nums = &#123;3,1,3,4,2&#125;</span><br><span class="line">output : 3</span><br><span class="line">input  : nums = &#123;1,1,2&#125;</span><br><span class="line">output : 1</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路1: HashSet</strong></p><ul><li>借助 HashSet 存储数组元素，便于查重</li><li>遍历数组，假设当前遍历的元素为 item<ul><li>若 item 不存在于 HashSet 中，则将其添加进 HashSet</li><li>若 item 存在于 HashSet 中，直接返回 item</li></ul></li><li>时间复杂度O(n)</li><li>空间复杂度O(n)</li><li>题目不允许空间复杂度O(n)，虽然使用HashSet编写代码很快，但是违反了题目要求</li></ul><p><strong>思路2: 双指针（快慢）</strong></p><ul><li>由索引找到元素，再将这个元素作为索引，继续找下一个元素，因为数组中有重复元素，故最终会形成一个循环</li><li>定义快慢指针<ul><li>快指针 faster 每次遍历前进2次（以当前faster作为索引得到的元素值A（nums[faster]），再做为索引获得新的元素值B（nums[nums[faster]]），把B再赋值给快指针 faster，即 faster = num[nums[faster]]）</li><li>慢指针 slower 每次遍历前进1次（以当前faster作为索引得到的元素值C（nums[slower]），把C再赋值给快指针 slower，即 slower = nums[slower]）</li></ul></li><li>当快慢指针相遇时，说明两者到了循环的入口，循环的入口不是重复的数字</li><li>所以找到循环入口之后，还要再找重复的数字<ul><li>设置一个从数组起始位置出发的新指针 p ，前进形式与slower相同</li><li>在不断循环之后， p 与 slower 两指针指向的值相等时，就得到了重复的数字</li></ul></li></ul><p><strong>思路3: 二分查找</strong></p><ul><li>n+1个数，都属于[1, n]，只有一个重复的整数</li><li>想象把 n+1 个无色球，放进n个颜色不同的染缸，必然有一个染缸中存在两个球</li><li>即必然有一个数是出现了两次的（必然有两个球的颜色是相同的）</li><li>考虑这个有序区间 [1, n]<ul><li>假设现在存在数组 array 包含了 <strong>n 个不重复</strong> 的整数，属于区间[1, n]</li><li>遍历这个数组 array，不必考虑其排列顺序，统计小于或等于 mid 的数，累加到 count1 上</li><li><strong>则必然会有：count1 = mid</strong> ！！！</li><li>============分割线===============</li><li>现在思考题目中给的数组，nums包含了n+1个属于区间[1, n]的数，<strong>有一个重复的整数</strong></li><li>遍历这个数组，不必考虑其排列顺序，统计 <strong>小于或等于 mid</strong>  的数，累加到 count2 上</li><li>因为有一个数重复，故必然会有：count2 &gt; mid 或者 count2 = mid<ul><li>若 count2 &gt; mid，说明数组nums中，小于或等于mid的数里，出现了重复的整数</li><li>若 count2 = mid，说明数组nums中，小于或等于mid的数里，没有重复的整数</li></ul></li></ul></li><li>⭐设定 left = 1，right = n，mid = （left + right）/ 2，<strong>此处的 left 、right 、mid 用于描述区间！只与区间有关！</strong>        </li><li>根据上述思路，借助 与数组[1, n]有关的变量left、right、mid，<strong>对区间 [1, n] 进行二分查找！！！是对区间进行查找，不是对数组</strong><ul><li>查找过程中，统计<strong>小于或等于 mid</strong>  的数，累加到 count2 上<ul><li>count2 &gt; mid时，更新 right = mid</li><li>count2 = mid时，更新 left = mid + 1</li></ul></li></ul></li><li>最后 left 和 right 相等时，查找结束，其值即为那个重复的整数。</li><li>时间复杂度O(n logn)，在二分内部有for循环，时间复杂度为O(N)。</li><li>空间复杂度O(1)</li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        HashSet hashSet = <span class="keyword">new</span> HashSet();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> item : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hashSet.contains(item)) &#123;</span><br><span class="line">                <span class="keyword">return</span> item;</span><br><span class="line">            &#125;</span><br><span class="line">            hashSet.add(item);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路2代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> slower = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> faster = nums[nums[<span class="number">0</span>]];</span><br><span class="line">        <span class="keyword">while</span> (faster != slower) &#123;</span><br><span class="line">            faster = nums[nums[faster]];</span><br><span class="line">            slower = nums[slower];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//System.out.println("slower : " + slower + " , " + nums[slower]);</span></span><br><span class="line">        <span class="comment">//System.out.println("faster : " + faster + " , " + nums[faster]);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> step1 = <span class="number">0</span>, step2 = slower;</span><br><span class="line">        <span class="keyword">while</span> (step1 != step2) &#123;</span><br><span class="line">            System.out.println(<span class="string">"step1 : "</span> + step1 + <span class="string">" , "</span> + nums[step1]);</span><br><span class="line">            System.out.println(<span class="string">"step2 : "</span> + step2 + <span class="string">" , "</span> + nums[step2]);</span><br><span class="line">            step1 = nums[step1];</span><br><span class="line">            step2 = nums[step2];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> step1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路3代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">1</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (right - left) / <span class="number">2</span> + left;</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">                <span class="keyword">if</span> (num &lt;= mid) &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (count &gt; mid) &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定一个包含 n + 1 个整数的数组 nums ，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。&lt;/li&gt;
&lt;li&gt;假设 nums 只有一个重复的整数 ，找出 这个重复的数 。&lt;/li&gt;
&lt;li&gt;解决方案必须不修改数组 nums 且只用常量级 O(1) 的额外空间。&lt;/li&gt;
&lt;li&gt;提示：&lt;/li&gt;
&lt;li&gt;1 &amp;lt;= n &amp;lt;= 105&lt;/li&gt;
&lt;li&gt;nums.length == n + 1&lt;/li&gt;
&lt;li&gt;1 &amp;lt;= nums[i] &amp;lt;= n&lt;/li&gt;
&lt;li&gt;nums 中 只有一个整数 出现 两次或多次 ，其余整数均只出现 一次&lt;/li&gt;
&lt;li&gt;进阶：&lt;ul&gt;
&lt;li&gt;如何证明 nums 中至少存在一个重复的数字?&lt;/li&gt;
&lt;li&gt;设计一个线性级时间复杂度 O(n) 的解决方案&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;example&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : nums = &amp;#123;1,3,4,2,2&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : nums = &amp;#123;3,1,3,4,2&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : nums = &amp;#123;1,1,2&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
    <category term="数组" scheme="https://hexo.flower48237.com/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="双指针" scheme="https://hexo.flower48237.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
    <category term="二分查找" scheme="https://hexo.flower48237.com/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
    <category term="哈希" scheme="https://hexo.flower48237.com/tags/%E5%93%88%E5%B8%8C/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题029.两数相除</title>
    <link href="https://hexo.flower48237.com/2021/11/24/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98029.%E4%B8%A4%E6%95%B0%E7%9B%B8%E9%99%A4/"/>
    <id>https://hexo.flower48237.com/2021/11/24/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98029.%E4%B8%A4%E6%95%B0%E7%9B%B8%E9%99%A4/</id>
    <published>2021-11-24T15:17:33.192Z</published>
    <updated>2021-11-24T15:15:07.139Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定两个整数，被除数 dividend 和除数 divisor。将两数相除，要求不使用乘法、除法和 mod 运算符。</li><li>返回被除数 dividend 除以除数 divisor 得到的商。除数不为 0。</li><li>整数除法的结果应当截去（truncate）其小数部分。</li><li>被除数和除数均为 32 位有符号整数，其数值范围是 [−2^31,  2^31 − 1]。如果除法结果溢出，则返回 2^31 − 1。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">example</span><br><span class="line">input  : dividend = 10, divisor = 3</span><br><span class="line">output : 3</span><br><span class="line">input  : dividend = 7, divisor = -3</span><br><span class="line">output : -2</span><br><span class="line">input  : dividend = -2147483648, divisor = -1</span><br><span class="line">output : 2147483646</span><br><span class="line">note   : 若无限制，除法后结果为2147483648，越界，需要返回 Integer.MAX_VALUE</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路： 位运算</strong></p><ul><li>先做越界判断，若把 dividend 为左右边界值，divisor 为1 or -1的情况都列举出来，会发现只需要判断 dividend = Integer.MIN_VALUE &amp;&amp; divisor = -1 这一种越界需要处理</li><li>提前把结果的符号 sign 摘出来，然后把后续的求商操作当作对两个正数的操作，避免处理负数出现错误</li><li>使用long类型（不使用int，是因为dividend=Integer.MIN_VALUE时摘掉负号会越界）的m和n分别接收去除了符号的 dividend 和 divisor</li><li>使用两层循环，外层循环 比较不断缩小的被除数m和除数n<ul><li>定义d初始化为被除数n，定义c初始化为1，d与c会同步翻2倍，以保证d与c的商为n，同时c是每次内层循环的近似解</li><li>内层循环，比较不断缩小的被除数m和n×2^i，其中i是内存循环的次数<ul><li>内层的被除数m，是每次减去近似解后的剩余值，可以理解为每次减去一个最大近似解后的残差 error（与内层的m值相等）</li><li>为防止残差 error 还可以包含2倍或更多倍的n（即能够使真实解res继续增大），需要使用循环对 error 继续缩小，直至其值不能 &gt;= 2*n</li><li>若残差 error 还可以包含2倍或更多倍的n，让d和c同时乘2，即翻倍</li><li>当d足够接近每次的 error 时，d / n -&gt; c，此时c就可以看作一个近似解，但不能保证完全相等，会有新的残差 error’</li></ul></li><li>把每次得到的近似解c累加求和，最终的和 result 就是真实解</li><li>m（旧残差 error） 减去d，得到新残差 error’，继续用于循环，可以将残差不断缩小，使得c的累加和result逐渐趋近于真实解</li></ul></li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> dividend, <span class="keyword">int</span> divisor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (dividend == Integer.MIN_VALUE &amp;&amp; divisor == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sign = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (dividend / divisor &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            sign = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> m = Math.abs((<span class="keyword">long</span>) dividend);</span><br><span class="line">        <span class="keyword">long</span> n = Math.abs((<span class="keyword">long</span>) divisor);</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (m &gt;= n) &#123;</span><br><span class="line">            <span class="comment">// d与c会同步翻2倍，以保证d与c的商为n</span></span><br><span class="line">            <span class="keyword">long</span> d = n, c = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 内层while的m，是每次减去近似解后的剩余值，可以理解为每次减去一个最大近似解后的残差 m'</span></span><br><span class="line">            <span class="comment">// 为防止残差 m' 还可以包含2倍或更多倍的n（即能够使真实解res继续增大），需要使用循环对 m' 继续缩小，直至其大小不能&gt;=2*n</span></span><br><span class="line">            <span class="keyword">while</span> (m &gt;= (d &lt;&lt; <span class="number">1</span>)) &#123;</span><br><span class="line">                d &lt;&lt;= <span class="number">1</span>;  <span class="comment">// d扩大2倍</span></span><br><span class="line">                c &lt;&lt;= <span class="number">1</span>;  <span class="comment">// c扩大2倍，与d同步</span></span><br><span class="line">                <span class="comment">// 当d足够接近每次的剩余m时，d / n -&gt; c，此时c就可以看作一个近似解，但不能保证完全相等，会有误差</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 把每次得到的近似解c累加求和，就是真实解</span></span><br><span class="line">            res += c;</span><br><span class="line">            <span class="comment">// m减去d，然后把剩余的m用于循环，可以将误差不断缩小，使得c的累加和res逐渐趋近于真实解</span></span><br><span class="line">            m -= d;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sign * res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定两个整数，被除数 dividend 和除数 divisor。将两数相除，要求不使用乘法、除法和 mod 运算符。&lt;/li&gt;
&lt;li&gt;返回被除数 dividend 除以除数 divisor 得到的商。除数不为 0。&lt;/li&gt;
&lt;li&gt;整数除法的结果应当截去（truncate）其小数部分。&lt;/li&gt;
&lt;li&gt;被除数和除数均为 32 位有符号整数，其数值范围是 [−2^31,  2^31 − 1]。如果除法结果溢出，则返回 2^31 − 1。&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;example&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : dividend = 10, divisor = 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : dividend = 7, divisor = -3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : -2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : dividend = -2147483648, divisor = -1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : 2147483646&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;note   : 若无限制，除法后结果为2147483648，越界，需要返回 Integer.MAX_VALUE&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://hexo.flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="数学" scheme="https://hexo.flower48237.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="位运算" scheme="https://hexo.flower48237.com/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题036.有效的数独</title>
    <link href="https://hexo.flower48237.com/2021/11/23/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98036.%E6%9C%89%E6%95%88%E7%9A%84%E6%95%B0%E7%8B%AC/"/>
    <id>https://hexo.flower48237.com/2021/11/23/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98036.%E6%9C%89%E6%95%88%E7%9A%84%E6%95%B0%E7%8B%AC/</id>
    <published>2021-11-23T14:53:57.685Z</published>
    <updated>2021-11-24T00:14:44.678Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>判断一个 9 x 9 的数独是否有效。一个有效的数独（部分已被填充，空白格用 ‘.’ 表示）不一定是可解的，只需要根据以下规则，验证已经填入的数字是否有效即可。</li><li>(1)数字 1-9 在每一行只能出现一次。</li><li>(2)数字 1-9 在每一列只能出现一次。</li><li>(3)数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。</li><li>board.length == 9; board[i].length == 9; board[i][j]是数字（1-9）或 ‘.’</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">example</span><br><span class="line">input  : board =     &#123;&#123;<span class="string">'8'</span>, <span class="string">'3'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'7'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>&#125;</span><br><span class="line">                     ,&#123;<span class="string">'6'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'1'</span>, <span class="string">'9'</span>, <span class="string">'5'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>&#125;</span><br><span class="line">                     ,&#123;<span class="string">'.'</span>, <span class="string">'9'</span>, <span class="string">'8'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'6'</span>, <span class="string">'.'</span>&#125;</span><br><span class="line">                     ,&#123;<span class="string">'8'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'6'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'3'</span>&#125;</span><br><span class="line">                     ,&#123;<span class="string">'4'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'8'</span>, <span class="string">'.'</span>, <span class="string">'3'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'1'</span>&#125;</span><br><span class="line">                     ,&#123;<span class="string">'7'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'2'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'6'</span>&#125;</span><br><span class="line">                     ,&#123;<span class="string">'.'</span>, <span class="string">'6'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'2'</span>, <span class="string">'8'</span>, <span class="string">'.'</span>&#125;</span><br><span class="line">                     ,&#123;<span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'4'</span>, <span class="string">'1'</span>, <span class="string">'9'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'5'</span>&#125;</span><br><span class="line">                     ,&#123;<span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'8'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'7'</span>, <span class="string">'9'</span>&#125;&#125;;                                                                                                                               </span><br><span class="line">output : <span class="literal">true</span></span><br><span class="line">input  : board =     &#123;&#123;<span class="string">'8'</span>, <span class="string">'3'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'7'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>&#125;</span><br><span class="line">                     ,&#123;<span class="string">'6'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'1'</span>, <span class="string">'9'</span>, <span class="string">'5'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>&#125;</span><br><span class="line">                     ,&#123;<span class="string">'.'</span>, <span class="string">'9'</span>, <span class="string">'8'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'6'</span>, <span class="string">'.'</span>&#125;</span><br><span class="line">                     ,&#123;<span class="string">'8'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'6'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'3'</span>&#125;</span><br><span class="line">                     ,&#123;<span class="string">'4'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'8'</span>, <span class="string">'.'</span>, <span class="string">'3'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'1'</span>&#125;</span><br><span class="line">                     ,&#123;<span class="string">'7'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'2'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'6'</span>&#125;</span><br><span class="line">                     ,&#123;<span class="string">'.'</span>, <span class="string">'6'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'2'</span>, <span class="string">'8'</span>, <span class="string">'.'</span>&#125;</span><br><span class="line">                     ,&#123;<span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'4'</span>, <span class="string">'1'</span>, <span class="string">'9'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'5'</span>&#125;</span><br><span class="line">                     ,&#123;<span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'8'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'7'</span>, <span class="string">'9'</span>&#125;&#125;;   </span><br><span class="line">output : <span class="literal">false</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路1 暴力</strong></p><ul><li>直接按照题目的三个要求，进行不同的有效性判定</li><li>摘出三个函数，分别来满足这三个要求</li><li>checkRow() 数字 1-9 在每一行只能出现一次。<ul><li>按行遍历，哈希表contains()方法判定</li></ul></li><li>checkCol() 数字 1-9 在每一列只能出现一次。<ul><li>按列遍历，哈希表contains()方法判定</li></ul></li><li>checkBlock() 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。<ul><li>按下标规律，四重循环，挨个遍历9个面积为3 × 3的中型方格，哈希表contains()方法判定</li></ul></li></ul><p><strong>思路2 数组模拟HashSet</strong></p><ul><li>定义三个数组，分别用于模拟可判断“行”、“列”、“3×3方格”是否存在重复元素的哈希Set：row[][]、col[][]、area[][]</li><li>还是要考虑下标规律，双重循环即可，比思路1写起来简洁</li><li>以 i，j，u，idx 分别表示当前访问元素的 行下标、列下标、元素值、3×3方格标号（从左到右，从上到下，依次编号为 0 ~ 8）</li><li>行模拟，是指判断 row[i][u] 是否为true，若为true，说明第 i 行已经有值为 u 的元素出现过了，所以重复指向了 row[i][u]</li><li>列模拟，是指判断 col[j][u] 是否为true，若为true，说明第 j 列已经有值为 u 的元素出现过了，所以重复指向了 col[j][u]</li><li>3×3方格模拟，是指判断 area[idx][u] 是否为true，若为true，说明第 idx 个方格已经有值为 u 的元素出现过了，所以重复指向了 area[idx][u]</li><li>在上述三个模拟过程中<ul><li>若遇到三者存在一个是true，即可判断为无效的数独；</li><li>三者都为false时，把三者都置为true，表明在 第i行、第j列、第idx个3×3方格，已经有值为 u 的元素出现过了</li></ul></li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidSudoku</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line">        HashSet&lt;Character&gt; hashSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="comment">// 数字 1-9 在每一行只能出现一次</span></span><br><span class="line">        <span class="keyword">if</span> (!checkRow(board, hashSet)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 数字 1-9 在每一列只能出现一次</span></span><br><span class="line">        <span class="keyword">if</span> (!checkCol(board, hashSet)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">// 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次</span></span><br><span class="line">        <span class="keyword">if</span> (!checkBlock(board, hashSet)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkRow</span><span class="params">(<span class="keyword">char</span>[][] board, HashSet hashSet)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 数字 1-9 在每一行只能出现一次</span></span><br><span class="line">        System.out.println(<span class="string">"check row."</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> item : board[i]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (item != <span class="string">'.'</span> &amp;&amp; hashSet.contains(item)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                hashSet.add(item);</span><br><span class="line">            &#125;</span><br><span class="line">            hashSet.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkCol</span><span class="params">(<span class="keyword">char</span>[][] board, HashSet hashSet)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 数字 1-9 在每一列只能出现一次</span></span><br><span class="line">        System.out.println(<span class="string">"check col."</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; board[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] != <span class="string">'.'</span> &amp;&amp; hashSet.contains(board[i][j])) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                hashSet.add(board[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            hashSet.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkBlock</span><span class="params">(<span class="keyword">char</span>[][] board, HashSet hashSet)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 数字 1-9 在每一列只能出现一次</span></span><br><span class="line">        System.out.println(<span class="string">"check block."</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i += <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j += <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt; i + <span class="number">3</span>; ++k) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> p = j; p &lt; j + <span class="number">3</span>; ++p) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (board[k][p] != <span class="string">'.'</span> &amp;&amp; hashSet.contains(board[k][p])) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        hashSet.add(board[k][p]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 遍历完一个区域后清空哈希表</span></span><br><span class="line">                hashSet.clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路2代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidSudoku</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 用数组模拟哈希set</span></span><br><span class="line">        <span class="keyword">boolean</span>[][] row = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">boolean</span>[][] col = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">boolean</span>[][] area = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">char</span> ch = board[i][j];</span><br><span class="line">                <span class="keyword">if</span> (ch == <span class="string">'.'</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> u = ch - <span class="string">'0'</span>;</span><br><span class="line">                <span class="keyword">int</span> idx = i / <span class="number">3</span> * <span class="number">3</span> + j / <span class="number">3</span>;</span><br><span class="line">                <span class="keyword">if</span> (row[i][u] || col[j][u] || area[idx][u])&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                row[i][u] = col[j][u] = area[idx][u] = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;判断一个 9 x 9 的数独是否有效。一个有效的数独（部分已被填充，空白格用 ‘.’ 表示）不一定是可解的，只需要根据以下规则，验证已经填入的数字是否有效即可。&lt;/li&gt;
&lt;li&gt;(1)数字 1-9 在每一行只能出现一次。&lt;/li&gt;
&lt;li&gt;(2)数字 1-9 在每一列只能出现一次。&lt;/li&gt;
&lt;li&gt;(3)数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。&lt;/li&gt;
&lt;li&gt;board.length == 9; board[i].length == 9; board[i][j]是数字（1-9）或 ‘.’&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;example&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : board =     &amp;#123;&amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;8&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;7&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     ,&amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;9&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;5&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     ,&amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;9&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;8&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     ,&amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;8&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     ,&amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;8&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     ,&amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;7&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;6&#39;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     ,&amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;8&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     ,&amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;9&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;5&#39;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     ,&amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;8&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;7&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;9&#39;&lt;/span&gt;&amp;#125;&amp;#125;;                                                                                                                               &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : board =     &amp;#123;&amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;8&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;7&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     ,&amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;9&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;5&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     ,&amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;9&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;8&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     ,&amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;8&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     ,&amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;8&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     ,&amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;7&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;6&#39;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     ,&amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;8&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     ,&amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;9&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;5&#39;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     ,&amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;8&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;7&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;9&#39;&lt;/span&gt;&amp;#125;&amp;#125;;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
    <category term="数组" scheme="https://hexo.flower48237.com/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="哈希表" scheme="https://hexo.flower48237.com/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
    <category term="矩阵" scheme="https://hexo.flower48237.com/tags/%E7%9F%A9%E9%98%B5/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题227.基本计算器II</title>
    <link href="https://hexo.flower48237.com/2021/11/20/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98227.%E5%9F%BA%E6%9C%AC%E8%AE%A1%E7%AE%97%E5%99%A8II/"/>
    <id>https://hexo.flower48237.com/2021/11/20/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98227.%E5%9F%BA%E6%9C%AC%E8%AE%A1%E7%AE%97%E5%99%A8II/</id>
    <published>2021-11-20T15:26:12.700Z</published>
    <updated>2021-11-20T15:29:06.792Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定一个字符串表达式 s ，请你实现一个基本计算器来计算并返回它的值。</li><li>整数除法仅保留整数部分。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">example</span><br><span class="line">input  : s = <span class="string">"3+2*2"</span></span><br><span class="line">output : 7</span><br><span class="line">input  : s = <span class="string">"3+2*2"</span></span><br><span class="line">output : 1</span><br><span class="line">input  : s = <span class="string">" 3+5 / 2 "</span></span><br><span class="line">output : 5</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路1：栈</strong></p><ul><li><p>基本规则 ： 乘除优先于加减计算</p></li><li><p>用变量 sign 记录每个数字之前的运算符，设置默认初值0，给第一个数字设置前缀+号</p></li><li><p>遍历字符串，每次从当前位置开始往后取出一个连续整数时，根据 符号（sign） 来决定计算方式，借助 <strong>栈</strong> 保存整数：</p><ul><li>加、减号后的数字，直接压入栈中</li><li>乘、除号后的数字，与栈顶元素计算，并将栈顶元素替换为计算后的结果</li></ul></li><li><p>遍历完字符串 s 后，将栈中元素累加，即为该字符串表达式的值</p></li><li><p>时间复杂度：O(n) </p></li><li><p>空间复杂度：O(n) </p></li></ul><p><strong>思路2：逆波兰式</strong></p><ul><li>遇到不同字符的处理逻辑与思路1相同，但是不进行计算</li><li>只不过在遍历过程中增加了将原表达式转为逆波兰式的步骤</li><li>然后使用逆波兰表达式求解的思路，同leetCode 150 </li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack();</span><br><span class="line">        <span class="comment">// 个人认为以下两步（Step1、Step2）对s的操作为投机取巧，仅方便处理，会改变原字符串。</span></span><br><span class="line">        <span class="comment">// 若不改变字符串s，注释 // ⭐ 处 应为 if((!isDigit &amp;&amp; s[i] != ' ' ) || i == length - 1)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Step1：去除所有空格</span></span><br><span class="line">        <span class="comment">// 若不去除所有空格，也可在代码注释 // ⭐ 处将 else 改为 if(!isDigit &amp;&amp; s[i] != ' ' )</span></span><br><span class="line">        s = s.replaceAll(<span class="string">" "</span>, <span class="string">""</span>);</span><br><span class="line">        <span class="comment">// Step2：在数组末尾添加一个“+”号方便结束，任意负号都可以</span></span><br><span class="line">        <span class="comment">// 若不添加末尾符合，也可在代码注释 // ⭐ 处将 else 改为 if(!isDigit || i == length - 1)</span></span><br><span class="line">        s = s + <span class="string">"+"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用变量 sign 记录每个数字 前面的 运算符，给第一个数字默认设置前缀+号</span></span><br><span class="line">        <span class="comment">// 以 3 + 2 * 2 为例，实际处理将其当作 + 3 + 2 * 2 ，便于完成循环过程中的数值处理逻辑</span></span><br><span class="line">        <span class="keyword">char</span> sign = <span class="string">'+'</span>;</span><br><span class="line">        <span class="comment">// 提前设置preNumber的初始值为0，可以防止字符串第一个字符为 负号（-）时的处理逻辑混乱</span></span><br><span class="line">        <span class="comment">// 开头遇到负号也可以把-preNumber = 0先压入栈中</span></span><br><span class="line">        <span class="keyword">int</span> preNumber = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> length = s.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> isDigit = Character.isDigit(s.charAt(i));</span><br><span class="line">            <span class="keyword">if</span> (isDigit) &#123;</span><br><span class="line">                preNumber = preNumber * <span class="number">10</span> + s.charAt(i) - <span class="string">'0'</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// ⭐</span></span><br><span class="line">                <span class="comment">// 若读到一个运算符A，按照前一个运算符B的格式对A和B之间的数字进行处理，然后压入栈中</span></span><br><span class="line">                <span class="comment">// 处理完该数字后，更新 sign 为当前遍历的字符。</span></span><br><span class="line">                <span class="keyword">switch</span> (sign) &#123;</span><br><span class="line">                    <span class="comment">// 加号：将数字压入栈；</span></span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">                        stack.push(preNumber);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="comment">// 减号：将数字的相反数压入栈；</span></span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">                        stack.push(-preNumber);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="comment">// 乘号：计算栈顶元素与数字的乘积，并将栈顶元素替换为计算结果。</span></span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">                        stack.push(stack.pop() * preNumber);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="comment">// 除号：计算栈顶元素与数字的商，并将栈顶元素替换为计算结果。</span></span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">                        stack.push(stack.pop() / preNumber);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                sign = s.charAt(i);</span><br><span class="line">                preNumber = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 栈中元素累加即为该字符串表达式的值</span></span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            ans += stack.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路2代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getRank</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'*'</span> || c == <span class="string">'/'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'+'</span> || c == <span class="string">'-'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Character&gt; ops = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="comment">// 存储后缀表达式（逆波兰式）</span></span><br><span class="line">        List&lt;String&gt; tokenList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        s = s.replaceAll(<span class="string">" "</span>, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch : s.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">                <span class="comment">// 获取操作符之间的完整整数</span></span><br><span class="line">                number = number * <span class="number">10</span> + (ch - <span class="string">'0'</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 遇到操作符时，就可以把该操作符之前的数字作为新元素添加到逆波兰表达式的字符串中</span></span><br><span class="line">                tokenList.add(number + <span class="string">""</span>);</span><br><span class="line">                <span class="comment">// 数值清空</span></span><br><span class="line">                number = <span class="number">0</span>;</span><br><span class="line">                <span class="comment">// 获取当前操作符op1的优先级</span></span><br><span class="line">                <span class="keyword">int</span> curRank = getRank(ch);</span><br><span class="line">                <span class="comment">// 持续对比op1和操作符栈的栈顶元素op2的优先级</span></span><br><span class="line">                <span class="keyword">while</span> (!ops.isEmpty() &amp;&amp; getRank(ops.peek()) &gt;= curRank) &#123;</span><br><span class="line">                    <span class="comment">// 如果优先级顺序op2&gt;op1，将操作符栈的栈顶元素弹出，做为新元素添加到逆波兰表达式数组中</span></span><br><span class="line">                    tokenList.add(String.valueOf(ops.pop()));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 把当前操作符压入操作符栈中</span></span><br><span class="line">                ops.push(ch);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 最后一个数字加入到逆波兰序表达式数组中</span></span><br><span class="line">        tokenList.add(String.valueOf(number));</span><br><span class="line">        <span class="comment">// 依次弹出操作符栈中的元素，加入到逆波兰序表达式数组中</span></span><br><span class="line">        <span class="keyword">while</span> (!ops.isEmpty()) &#123;</span><br><span class="line">            tokenList.add(String.valueOf(ops.pop()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 逆波兰式求解</span></span><br><span class="line">        <span class="keyword">for</span> (String string : tokenList) &#123;</span><br><span class="line">            System.out.print(string + <span class="string">" , "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        String[] tokens = <span class="keyword">new</span> String[tokenList.size()];</span><br><span class="line">        tokenList.toArray(tokens);</span><br><span class="line">        <span class="keyword">return</span> evalRPN(tokens);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对应 leetCode 150. 逆波兰表达式求值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">evalRPN</span><span class="params">(String[] tokens)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : tokens) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.equals(<span class="string">"+"</span>)) &#123;</span><br><span class="line">                stack.push(stack.pop() + stack.pop());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.equals(<span class="string">"-"</span>)) &#123;</span><br><span class="line">                <span class="keyword">int</span> after = stack.pop();</span><br><span class="line">                <span class="keyword">int</span> before = stack.pop();</span><br><span class="line">                stack.push(before - after);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.equals(<span class="string">"*"</span>)) &#123;</span><br><span class="line">                stack.push(stack.pop() * stack.pop());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.equals(<span class="string">"/"</span>)) &#123;</span><br><span class="line">                <span class="keyword">int</span> after = stack.pop();</span><br><span class="line">                <span class="keyword">int</span> before = stack.pop();</span><br><span class="line">                stack.push(before / after);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                stack.push(Integer.valueOf(s));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定一个字符串表达式 s ，请你实现一个基本计算器来计算并返回它的值。&lt;/li&gt;
&lt;li&gt;整数除法仅保留整数部分。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;example&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : s = &lt;span class=&quot;string&quot;&gt;&quot;3+2*2&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : 7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : s = &lt;span class=&quot;string&quot;&gt;&quot;3+2*2&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : s = &lt;span class=&quot;string&quot;&gt;&quot; 3+5 / 2 &quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : 5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://hexo.flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="字符串" scheme="https://hexo.flower48237.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="栈" scheme="https://hexo.flower48237.com/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题150.逆波兰表达式求值</title>
    <link href="https://hexo.flower48237.com/2021/11/20/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98150.%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/"/>
    <id>https://hexo.flower48237.com/2021/11/20/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98150.%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/</id>
    <published>2021-11-20T14:20:11.849Z</published>
    <updated>2021-11-20T14:53:39.983Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>根据 逆波兰表示法，求表达式的值。</li><li>有效的算符包括 +、-、*、/ 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。</li><li>整数除法只保留整数部分。</li><li>给定逆波兰表达式总是有效的。即表达式总会得出有效数值且不存在除数为 0 的情况。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">example</span><br><span class="line">input  : tokens = &#123;<span class="string">"2"</span>,<span class="string">"1"</span>,<span class="string">"+"</span>,<span class="string">"3"</span>,<span class="string">"*"</span>&#125;</span><br><span class="line">output : 9</span><br><span class="line">note   : 该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) = 9</span><br><span class="line">input  : tokens = &#123;<span class="string">"4"</span>,<span class="string">"13"</span>,<span class="string">"5"</span>,<span class="string">"/"</span>,<span class="string">"+"</span>&#125;</span><br><span class="line">output : 6</span><br><span class="line">note   : 该算式转化为常见的中缀算术表达式为：(4 + (13 / 5)) = 6</span><br><span class="line">input  : tokens = &#123;<span class="string">"10"</span>,<span class="string">"6"</span>,<span class="string">"9"</span>,<span class="string">"3"</span>,<span class="string">"+"</span>,<span class="string">"-11"</span>,<span class="string">"*"</span>,<span class="string">"/"</span>,<span class="string">"*"</span>,<span class="string">"17"</span>,<span class="string">"+"</span>,<span class="string">"5"</span>,<span class="string">"+"</span>&#125;</span><br><span class="line">output : 22</span><br><span class="line">note   : 该算式转化为常见的中缀算术表达式为：((10 * (6 / ((9 + 3) * -11))) + 17) + 5</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路：栈</strong></p><ul><li>遇到数字之间压入栈中</li><li>遇到运算符 OP，依次取栈顶两个元素Before、After</li><li>然后根据 OP 完成运算，得到结果 R 重新压入栈顶<ul><li>需要注意的是减法操作时为 B - A，除法操作时为B / A，顺序不能颠倒</li></ul></li><li>结果返回栈顶元素</li><li>好处：不会破坏原字符串数组</li><li>时间复杂度O(n)</li><li>空间复杂度O(n)</li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">evalRPN</span><span class="params">(String[] tokens)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : tokens) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.equals(<span class="string">"+"</span>)) &#123;</span><br><span class="line">                stack.push(stack.pop() + stack.pop());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.equals(<span class="string">"-"</span>)) &#123;</span><br><span class="line">                <span class="keyword">int</span> after = stack.pop();</span><br><span class="line">                <span class="keyword">int</span> before = stack.pop();</span><br><span class="line">                stack.push(before - after);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.equals(<span class="string">"*"</span>)) &#123;</span><br><span class="line">                stack.push(stack.pop() * stack.pop());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.equals(<span class="string">"/"</span>)) &#123;</span><br><span class="line">                <span class="keyword">int</span> after = stack.pop();</span><br><span class="line">                <span class="keyword">int</span> before = stack.pop();</span><br><span class="line">                stack.push(before / after);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                stack.push(Integer.valueOf(s));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 美化一下</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">evalRPN</span><span class="params">(String[] tokens)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; ops = Arrays.asList(<span class="string">"+"</span>, <span class="string">"-"</span>, <span class="string">"*"</span>, <span class="string">"/"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : tokens) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ops.contains(s)) &#123;</span><br><span class="line">                stack.push(calculate(s, stack.pop(), stack.pop()));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                stack.push(Integer.valueOf(s));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(String op, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (op)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"+"</span> :</span><br><span class="line">                <span class="keyword">return</span> y + x;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"-"</span>:</span><br><span class="line">                <span class="keyword">return</span> y - x;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"*"</span> :</span><br><span class="line">                <span class="keyword">return</span> y * x;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"/"</span>:</span><br><span class="line">                <span class="keyword">return</span> y / x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;根据 逆波兰表示法，求表达式的值。&lt;/li&gt;
&lt;li&gt;有效的算符包括 +、-、*、/ 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。&lt;/li&gt;
&lt;li&gt;整数除法只保留整数部分。&lt;/li&gt;
&lt;li&gt;给定逆波兰表达式总是有效的。即表达式总会得出有效数值且不存在除数为 0 的情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;example&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : tokens = &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;+&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;3&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;*&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : 9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;note   : 该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) = 9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : tokens = &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;4&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;13&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;5&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;+&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : 6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;note   : 该算式转化为常见的中缀算术表达式为：(4 + (13 / 5)) = 6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : tokens = &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;10&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;6&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;9&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;3&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;+&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;-11&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;*&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;*&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;17&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;+&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;5&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;+&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : 22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;note   : 该算式转化为常见的中缀算术表达式为：((10 * (6 / ((9 + 3) * -11))) + 17) + 5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://hexo.flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="字符串" scheme="https://hexo.flower48237.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="数组" scheme="https://hexo.flower48237.com/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="栈" scheme="https://hexo.flower48237.com/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题015.三数之和</title>
    <link href="https://hexo.flower48237.com/2021/11/18/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98015.%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>https://hexo.flower48237.com/2021/11/18/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98015.%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</id>
    <published>2021-11-18T12:33:17.234Z</published>
    <updated>2021-11-18T12:44:07.120Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？</li><li>找出所有和为 0 且不重复的三元组。</li><li>0 &lt;= nums.length &lt;= 3000</li><li>-105 &lt;= nums[i] &lt;= 105<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">example</span><br><span class="line">input  : nums = [-1,0,1,2,-1,-4]</span><br><span class="line">output : [[-1,-1,2],[-1,0,1]]</span><br><span class="line">input  : nums = []</span><br><span class="line">output : []</span><br><span class="line">input  : nums = [0]</span><br><span class="line">output : []</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路： 排序+双指针</strong></p><ul><li>若数组为空，返回空列表</li><li>将数组进行排序</li><li>若数组长度小于3，不满足题意，返回空列表</li><li>遍历数组查找是否存在三数之和为 0 ，外层循环<ul><li>若当前元素nums[i] &gt; 0，说明该元素和其后任意两个元素之和肯定不可能为0，则直接返回当前结果列表即可；之所以不使用nums[i] &gt;= 0作为返回条件，是因为存在数组为{0,0,0}的情况也满足题意，若添加了等号为返回条件，则会返回空，不满足题意</li><li>若当前访问元素和其前一个元素值相同，不进行求和判断，防止出现重复的结果</li><li>固定i，令指针left和指针right移动，求和并判断；其中left初始化为i + 1，right初始化为length - 1；开始内层循环</li><li>内层循环以 left &lt; right 为结束条件，若相等，则说明访问到了同一个元素，不满足三数的要求，可作为循环结束的条件<ul><li>三数之和为0，将这三个数组成的列表添加进结果列表，且移动左右指针；然后判断左右指针移动后访问的元素值，是否和其移动前的元素值相等，相等则继续移动，防止重复结果</li><li>三数之和 &gt; 0，右指针左移，使下一次求和结果变小，向0趋近</li><li>三数之和 &lt; 0，左指针右移，使下一次求和结果变大，向0趋近</li></ul></li></ul></li><li>时间复杂度：O(n^2)<br>  排序 O(N logN)，<br>  遍历数组 O(n)，<br>  双指针遍历 O(n)，<br>  总体 O(N logN)+O(n)∗O(n)，O(n^2)</li><li>空间复杂度：O(1)</li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; lists = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 数组为空，返回空列表</span></span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> lists;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 数组排序</span></span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="comment">// 数组长度小于3，不满足题意，返回空列表</span></span><br><span class="line">        <span class="keyword">int</span> length = nums.length;</span><br><span class="line">        <span class="keyword">if</span> (nums.length &lt; <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> lists;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历数组查找是否存在三数之和为0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="comment">// 当前元素大于零，说明该元素和其后任意两个元素之和肯定不可能为0，则直接返回当前结果即可</span></span><br><span class="line">            <span class="comment">// 之所以不使用nums[i] &gt;= 0作为返回条件，是因为存在数组为&#123;0,0,0&#125;的情况也满足题意，若添加了等号为返回条件，则会返回空，不满足题意</span></span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> lists;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 当前访问元素和其前一个元素值相同，不进行求和判断，防止出现重复的结果</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 固定i，令指针left和指针right移动，求和并判断；其中left初始化为i + 1，right初始化为length - 1</span></span><br><span class="line">            <span class="keyword">int</span> left = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> right = length - <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// left 和 right 相等时，访问到了同一个元素，不满足三数的要求，可作为循环结束的条件</span></span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                <span class="keyword">int</span> sum = nums[i] + nums[left] + nums[right];</span><br><span class="line">                <span class="keyword">if</span> (sum == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 三数之和为0</span></span><br><span class="line">                    <span class="comment">// 将这三个数组成的列表添加进结果列表</span></span><br><span class="line">                    List&lt;Integer&gt; tmp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                    tmp.add(nums[i]);</span><br><span class="line">                    tmp.add(nums[left]);</span><br><span class="line">                    tmp.add(nums[right]);</span><br><span class="line">                    lists.add(tmp);</span><br><span class="line">                    <span class="comment">// 左右指针移动</span></span><br><span class="line">                    left++;</span><br><span class="line">                    right--;</span><br><span class="line">                    <span class="comment">// 判断左右指针移动后访问的元素值，是否和其移动前的元素值相等，相等则继续移动，防止重复结果</span></span><br><span class="line">                    <span class="keyword">while</span> (left &lt;= right &amp;&amp; nums[left] == nums[left - <span class="number">1</span>]) &#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">while</span> (right &gt;= left &amp;&amp; nums[right] == nums[right + <span class="number">1</span>]) &#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 三数之和 &gt; 0，右指针左移，使下一次求和结果变小，向0趋近</span></span><br><span class="line">                    right--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 三数之和 &lt; 0，左指针右移，使下一次求和结果变大，向0趋近</span></span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lists;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？&lt;/li&gt;
&lt;li&gt;找出所有和为 0 且不重复的三元组。&lt;/li&gt;
&lt;li&gt;0 &amp;lt;= nums.length &amp;lt;= 3000&lt;/li&gt;
&lt;li&gt;-105 &amp;lt;= nums[i] &amp;lt;= 105&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;example&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : nums = [-1,0,1,2,-1,-4]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : [[-1,-1,2],[-1,0,1]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : nums = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : nums = [0]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : []&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://hexo.flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="数组" scheme="https://hexo.flower48237.com/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="排序" scheme="https://hexo.flower48237.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
    <category term="双指针" scheme="https://hexo.flower48237.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题048.旋转图像.md</title>
    <link href="https://hexo.flower48237.com/2021/11/17/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98048.%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F/"/>
    <id>https://hexo.flower48237.com/2021/11/17/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98048.%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F/</id>
    <published>2021-11-17T12:21:18.644Z</published>
    <updated>2021-11-17T12:21:01.264Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定一个 n × n 的二维矩阵 matrix 表示一个图像。</li><li>将图像顺时针旋转 90 度。</li><li>必须在 原地 旋转图像，这意味着需要直接修改输入的二维矩阵。</li><li>不能使用另一个矩阵来旋转图像。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">example</span><br><span class="line">input  : matrix = &#123;&#123;1,2,3],[4,5,6],[7,8,9&#125;&#125;</span><br><span class="line">output : matrix = &#123;&#123;7,4,1],[8,5,2],[9,6,3&#125;&#125;</span><br><span class="line">input  : matrix = &#123;&#123;5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16&#125;&#125;</span><br><span class="line">output : matrix = &#123;&#123;15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11&#125;&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路1 两次翻转</strong></p><ul><li>按照n×n数组的翻转规律</li><li>先按照主对角线镜像翻转，再按照水平反转（或者先水平后镜像也可以）</li><li>翻转两次后就是目标数组</li></ul><p><strong>思路2 原地旋转</strong></p><ul><li>每个数组元素，在该数组中会有另外三个元素与其对应，组成一个圈</li><li>若把所有的四个数字组成的圈，都完成90°旋转，就可以形成整个数组的旋转</li><li>遍历二维数组，按照数组元素排列规律，对同一个圈内的四个元素按照顺时针顺序进行数值覆盖，即完成了一个圈的旋转</li><li>遍历结束后即可完成整个数组的顺时针90°旋转</li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> length = matrix.length;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查看原数组</span></span><br><span class="line">        <span class="comment">/*for (int i = 0; i &lt; length; i++) &#123;</span></span><br><span class="line"><span class="comment">            for (int j = 0; j &lt; length; j++) &#123;</span></span><br><span class="line"><span class="comment">                System.out.print(matrix[i][j] + "\t");</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            System.out.println();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        System.out.println();*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主对角线翻转</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = matrix[i][j];</span><br><span class="line">                matrix[i][j] = matrix[j][i];</span><br><span class="line">                matrix[j][i] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 查看主对角线翻转后的数组</span></span><br><span class="line">        <span class="comment">/*for (int i = 0; i &lt; length; i++) &#123;</span></span><br><span class="line"><span class="comment">            for (int j = 0; j &lt; length; j++) &#123;</span></span><br><span class="line"><span class="comment">                System.out.print(matrix[i][j] + "\t");</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            System.out.println();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        System.out.println();*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 水平翻转</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length / <span class="number">2</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = matrix[i][j];</span><br><span class="line">                matrix[i][j] = matrix[i][length - j - <span class="number">1</span>];</span><br><span class="line">                matrix[i][length - j - <span class="number">1</span>] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查看结果数组</span></span><br><span class="line">        <span class="comment">/*for (int i = 0; i &lt; length; i++) &#123;</span></span><br><span class="line"><span class="comment">            for (int j = 0; j &lt; length; j++) &#123;</span></span><br><span class="line"><span class="comment">                System.out.print(matrix[i][j] + "\t");</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            System.out.println();</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路2代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = matrix.length;</span><br><span class="line">        <span class="comment">// 查看原数组</span></span><br><span class="line">        <span class="comment">/*for (int i = 0; i &lt; length; i++) &#123;</span></span><br><span class="line"><span class="comment">            for (int j = 0; j &lt; length; j++) &#123;</span></span><br><span class="line"><span class="comment">                System.out.print(matrix[i][j] + "\t");</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            System.out.println();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        System.out.println();*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转圈赋值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; (length + <span class="number">1</span>) / <span class="number">2</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = matrix[i][j];</span><br><span class="line">                matrix[i][j] = matrix[length - j - <span class="number">1</span>][i];</span><br><span class="line">                matrix[length - j - <span class="number">1</span>][i] = matrix[length - i - <span class="number">1</span>][length - j - <span class="number">1</span>];</span><br><span class="line">                matrix[length - i - <span class="number">1</span>][length - j - <span class="number">1</span>] = matrix[j][length - i - <span class="number">1</span>];</span><br><span class="line">                matrix[j][length - i - <span class="number">1</span>] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查看结果数组</span></span><br><span class="line">        <span class="comment">/*for (int i = 0; i &lt; length; i++) &#123;</span></span><br><span class="line"><span class="comment">            for (int j = 0; j &lt; length; j++) &#123;</span></span><br><span class="line"><span class="comment">                System.out.print(matrix[i][j] + "\t");</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            System.out.println();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        System.out.println();*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定一个 n × n 的二维矩阵 matrix 表示一个图像。&lt;/li&gt;
&lt;li&gt;将图像顺时针旋转 90 度。&lt;/li&gt;
&lt;li&gt;必须在 原地 旋转图像，这意味着需要直接修改输入的二维矩阵。&lt;/li&gt;
&lt;li&gt;不能使用另一个矩阵来旋转图像。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;example&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : matrix = &amp;#123;&amp;#123;1,2,3],[4,5,6],[7,8,9&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : matrix = &amp;#123;&amp;#123;7,4,1],[8,5,2],[9,6,3&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : matrix = &amp;#123;&amp;#123;5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : matrix = &amp;#123;&amp;#123;15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://hexo.flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="数组" scheme="https://hexo.flower48237.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题075.颜色分类</title>
    <link href="https://hexo.flower48237.com/2021/11/15/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98075.%E9%A2%9C%E8%89%B2%E5%88%86%E7%B1%BB/"/>
    <id>https://hexo.flower48237.com/2021/11/15/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98075.%E9%A2%9C%E8%89%B2%E5%88%86%E7%B1%BB/</id>
    <published>2021-11-15T15:21:40.271Z</published>
    <updated>2021-11-15T12:46:36.120Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li><p>给定一个包含红色、白色和蓝色，一共 n 个元素的数组。</p></li><li><p>原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。</p></li><li><p>此题中使用整数 0、 1 和 2 分别表示红色、白色和蓝色。</p></li><li><p>进阶：</p><ul><li>可以不使用代码库中的排序函数来解题吗？</li><li>有仅使用常数空间的一趟扫描算法吗？</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">example</span><br><span class="line">input  : nums = &#123;2, 0, 2, 1, 1, 0&#125;</span><br><span class="line">output : nums = &#123;0, 0, 1, 1, 2, 2&#125;</span><br><span class="line">input  : nums = &#123;2, 0, 1&#125;</span><br><span class="line">output : nums = &#123;0, 1, 2&#125;</span><br><span class="line">input  : nums = &#123;0&#125;</span><br><span class="line">output : nums = &#123;0&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路1</strong></p><p><a href="https://leetcode-cn.com/problems/sort-colors/solution/kuai-su-pai-xu-partition-guo-cheng-she-ji-xun-huan/" target="_blank" rel="noopener">参考自大佬的题解</a>。</p><ul><li>“进阶”要求考察的是“快速排序”的子过程 partition，即：通过一次遍历，把数组分成三个部分。<ul><li>初始化index = 0，zero = 0，two = nums.length</li><li>index作为遍历的访问下标，zero作为0元素子集右侧边界，two作为2元素子集左侧边界，</li><li>当访问元素为2时，向后与 <strong>two先向左移动一次之后</strong> 的位置的元素交换（因为two初始化为nums.length为越界状态，故先使其不越界），i不前进，因为交换来的元素很可能也是2，此时若前进会把交换到i下标位置的2忽略，导致排序失败，故原地等待，继续循环；</li><li>当访问元素为1时，不交换，因为1本来就需要在中间，i不前进，zero和two也移动</li><li>当访问元素为0时，向前与zero位置的元素交换 ，i前进，zero向右移动。</li></ul></li><li>时间复杂度：O(N) </li><li>空间复杂度：O(1) </li></ul><p><strong>思路2</strong></p><ul><li>调用Java中Arrays.sort()方法</li><li>时间复杂度：O(N logN) </li><li>空间复杂度：O(1) </li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* public void sortColors(int[] nums) &#123;</span></span><br><span class="line"><span class="comment">        int length = nums.length;</span></span><br><span class="line"><span class="comment">        int zero = 0, two = length - 1;</span></span><br><span class="line"><span class="comment">        int i = 0;</span></span><br><span class="line"><span class="comment">        while (i &lt;= two) &#123;</span></span><br><span class="line"><span class="comment">            if (nums[i] == 0) &#123;</span></span><br><span class="line"><span class="comment">                nums[i] = nums[zero];</span></span><br><span class="line"><span class="comment">                nums[zero++] = 0;</span></span><br><span class="line"><span class="comment">                i++;</span></span><br><span class="line"><span class="comment">            &#125; else if (nums[i] == 2) &#123;</span></span><br><span class="line"><span class="comment">                nums[i] = nums[two];</span></span><br><span class="line"><span class="comment">                nums[two--] = 2;</span></span><br><span class="line"><span class="comment">            &#125; else &#123;</span></span><br><span class="line"><span class="comment">                i++;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125; */</span></span><br><span class="line">    <span class="comment">// 基于上方注释内容，抽出交换数据的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sortColors</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = nums.length;</span><br><span class="line">        <span class="comment">// i作为遍历的访问下标，zero作为0元素子集右侧边界，two作为2元素子集左侧边界；</span></span><br><span class="line">        <span class="keyword">int</span> zero = <span class="number">0</span>, two = length;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 循环终止条件是 i == two，那么循环可以继续的条件是 i &lt; two</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; two) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 当访问元素为0时，向前与zero位置的元素交换 ，i前进，zero向右移动。</span></span><br><span class="line">                swap(nums, i, zero++);</span><br><span class="line">                i++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="comment">// 向后与 two先向左移动一次之后 的位置的元素交换（因为two初始化为nums.length为越界状态，故先使其不越界），i不前进，因为交换来的元素很可能也是2，此时若前进会把交换到i下标位置的2忽略，导致排序失败，故原地等待，继续循环；</span></span><br><span class="line">                swap(nums, i, --two);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 当访问元素为1时，不交换，因为1本来就需要在中间，i不前进，zero和two也移动；</span></span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> index1, <span class="keyword">int</span> index2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = nums[index1];</span><br><span class="line">        nums[index1] = nums[index2];</span><br><span class="line">        nums[index2] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路2代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sortColors</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;给定一个包含红色、白色和蓝色，一共 n 个元素的数组。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;此题中使用整数 0、 1 和 2 分别表示红色、白色和蓝色。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;进阶：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以不使用代码库中的排序函数来解题吗？&lt;/li&gt;
&lt;li&gt;有仅使用常数空间的一趟扫描算法吗？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;example&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : nums = &amp;#123;2, 0, 2, 1, 1, 0&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : nums = &amp;#123;0, 0, 1, 1, 2, 2&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : nums = &amp;#123;2, 0, 1&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : nums = &amp;#123;0, 1, 2&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : nums = &amp;#123;0&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : nums = &amp;#123;0&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://hexo.flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="数组" scheme="https://hexo.flower48237.com/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="排序" scheme="https://hexo.flower48237.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题056.合并区间</title>
    <link href="https://hexo.flower48237.com/2021/11/12/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98056.%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4/"/>
    <id>https://hexo.flower48237.com/2021/11/12/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98056.%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4/</id>
    <published>2021-11-12T15:37:33.333Z</published>
    <updated>2021-11-12T15:38:25.392Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>以数组 intervals 表示若干个区间的集合，其中单个区间为 intervals[i] = [starti, endi] 。</li><li>合并所有重叠的区间，并返回一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">example</span><br><span class="line">input  : intervals = &#123;&#123;1, 3&#125;, &#123;2, 6&#125;, &#123;8, 10&#125;, &#123;15, 18&#125;&#125;</span><br><span class="line">output : &#123;1, 6&#125;, &#123;8, 10&#125;, &#123;15, 18&#125;</span><br><span class="line">input  : intervals = &#123;&#123;1, 4&#125;, &#123;4, 18&#125;&#125;</span><br><span class="line">output : &#123;1, 18&#125;</span><br><span class="line">input  : intervals = &#123;1, 4&#125;, &#123;0, 4&#125;</span><br><span class="line">output : &#123;0, 4&#125;</span><br><span class="line">input  : intervals = &#123;1, 4&#125;, &#123;2, 3&#125;</span><br><span class="line">output : &#123;1, 4&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><strong>思路1 排序+两层循环遍历</strong></li></ul><ul><li>借助Arrays.sort()对原数组进行排序</li><li>遍历数组，外层循环<ul><li>内层循环，对前一个数组元素[left1, right1]的右区间值right1和后一个数组元素[left2, right2]的左区间值left2作比较，若right1 &gt;= left2，则令left1 = right1和right2中值较大的，继续内层循环</li><li>每次内层循环结束，将最终的[leftx, rightx]作为新元素赋值到结果数组中</li></ul></li></ul><p><strong>思路2 排序+一层循环遍历</strong></p><ul><li>借助Arrays.sort()对原数组进行排序</li><li>遍历数组，记当前遍历到的数组元素为array<ul><li>当result数组为空（下标记录为-1），或者当array的左侧区间值大于result数组最后一个元素的右侧区间值，即两个区间无重合时，将array添加进result</li><li>当array的左侧区间值不大于result数组最后一个元素的右侧区间值，即两个区间有重合时，更新result数组最后一个元素的右侧区间值</li></ul></li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>代码1</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] merge(<span class="keyword">int</span>[][] intervals) &#123;</span><br><span class="line">        <span class="comment">// 排序</span></span><br><span class="line">        Arrays.sort(intervals, <span class="keyword">new</span> Comparator&lt;<span class="keyword">int</span>[]&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span>[] interval1, <span class="keyword">int</span>[] interval2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> interval1[<span class="number">0</span>] - interval2[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> length = intervals.length;</span><br><span class="line">        <span class="keyword">int</span>[][] result = <span class="keyword">new</span> <span class="keyword">int</span>[length][<span class="number">2</span>];        </span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">1</span>; i &lt; length &amp;&amp; j &lt;= length; i = j, j = i + <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &lt; length &amp;&amp; intervals[i][<span class="number">1</span>] &gt;= intervals[j][<span class="number">0</span>]) &#123;</span><br><span class="line">                intervals[i][<span class="number">1</span>] = Math.max(intervals[j][<span class="number">1</span>] , intervals[i][<span class="number">1</span>]);</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            result[count] = intervals[i];</span><br><span class="line">            <span class="comment">// System.out.println("current:  i = " + i + " , j = " + j);</span></span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// System.out.println("count : " + count);</span></span><br><span class="line">        <span class="keyword">return</span> Arrays.copyOf(result, count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代码2</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] merge(<span class="keyword">int</span>[][] intervals) &#123;</span><br><span class="line">        <span class="comment">// 排序</span></span><br><span class="line">        Arrays.sort(intervals, <span class="keyword">new</span> Comparator&lt;<span class="keyword">int</span>[]&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span>[] interval1, <span class="keyword">int</span>[] interval2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> interval1[<span class="number">0</span>] - interval2[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> length = intervals.length;</span><br><span class="line">        <span class="keyword">int</span>[][] result = <span class="keyword">new</span> <span class="keyword">int</span>[length][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">int</span> count = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] array : intervals) &#123;</span><br><span class="line">            <span class="keyword">if</span> (count == -<span class="number">1</span> || array[<span class="number">0</span>] &gt; result[count][<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="comment">// 记当前遍历到的数组元素为array</span></span><br><span class="line">                <span class="comment">// 当result数组为空，将array添加进result</span></span><br><span class="line">                <span class="comment">// 或者</span></span><br><span class="line">                <span class="comment">// 当array的左侧区间值大于result数组最后一个元素的右侧区间值，即两个区间无重合时，将array添加进result</span></span><br><span class="line">                result[++count] = array;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 当array的左侧区间值不大于result数组最后一个元素的右侧区间值，即两个区间有重合时，更新result数组最后一个元素的右侧区间值</span></span><br><span class="line">                result[count][<span class="number">1</span>] = Math.max(array[<span class="number">1</span>] , result[count][<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// System.out.println("count : " + (count+1));</span></span><br><span class="line">        <span class="keyword">return</span> Arrays.copyOf(result, count + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;以数组 intervals 表示若干个区间的集合，其中单个区间为 intervals[i] = [starti, endi] 。&lt;/li&gt;
&lt;li&gt;合并所有重叠的区间，并返回一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间。&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;example&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : intervals = &amp;#123;&amp;#123;1, 3&amp;#125;, &amp;#123;2, 6&amp;#125;, &amp;#123;8, 10&amp;#125;, &amp;#123;15, 18&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : &amp;#123;1, 6&amp;#125;, &amp;#123;8, 10&amp;#125;, &amp;#123;15, 18&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : intervals = &amp;#123;&amp;#123;1, 4&amp;#125;, &amp;#123;4, 18&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : &amp;#123;1, 18&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : intervals = &amp;#123;1, 4&amp;#125;, &amp;#123;0, 4&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : &amp;#123;0, 4&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : intervals = &amp;#123;1, 4&amp;#125;, &amp;#123;2, 3&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : &amp;#123;1, 4&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
    <category term="数组" scheme="https://hexo.flower48237.com/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="排序" scheme="https://hexo.flower48237.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
    <category term="列表" scheme="https://hexo.flower48237.com/tags/%E5%88%97%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题008.字符串转换整数 (atoi)</title>
    <link href="https://hexo.flower48237.com/2021/11/08/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98008.%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%95%B4%E6%95%B0%20(atoi)/"/>
    <id>https://hexo.flower48237.com/2021/11/08/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98008.%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%95%B4%E6%95%B0%20(atoi)/</id>
    <published>2021-11-08T15:45:40.711Z</published>
    <updated>2021-11-08T15:42:21.394Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 atoi 函数）。</li><li>函数 myAtoi(string s) 的算法如下：</li><li>1、读入字符串并丢弃无用的前导空格</li><li>2、检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。</li><li>3、读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。</li><li>4、将前面步骤读入的这些数字转换为整数（即，”123” -&gt; 123， “0032” -&gt; 32）。如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。</li><li>5、如果整数数超过 32 位有符号整数范围 [−231,  231 − 1] ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 −231 的整数应该被固定为 −231 ，大于 231 − 1 的整数应该被固定为 231 − 1 。</li><li>6、返回整数作为最终结果。</li><li>本题中的空白字符只包括空格字符 ‘ ‘ 。</li><li>除前导空格或数字后的其余字符串外，请勿忽略 任何其他字符。</li><li>0 &lt;= s.length &lt;= 200</li><li>s 由英文字母（大写和小写）、数字（0-9）、’ ‘、’+’、’-‘ 和 ‘.’ 组成</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">example</span><br><span class="line">input  : s = <span class="string">"42"</span></span><br><span class="line">output : 42</span><br><span class="line">note   : 加粗的字符串为已经读入的字符，插入符号是当前读取的字符。</span><br><span class="line">         第 1 步：<span class="string">"42"</span>（当前没有读入字符，因为没有前导空格）</span><br><span class="line">                  ^</span><br><span class="line">         第 2 步：<span class="string">"42"</span>（当前没有读入字符，因为这里不存在 <span class="string">'-'</span> 或者 <span class="string">'+'</span>）</span><br><span class="line">                  ^</span><br><span class="line">         第 3 步：<span class="string">"42"</span>（读入 <span class="string">"42"</span>）</span><br><span class="line">                    ^</span><br><span class="line">         解析得到整数 42 。</span><br><span class="line">         由于 <span class="string">"42"</span> 在范围 [-231, 231 - 1] 内，最终结果为 42 。</span><br><span class="line">input  : s = <span class="string">"   -42"</span></span><br><span class="line">output : -42</span><br><span class="line">note   : 第 1 步：<span class="string">"   -42"</span>（读入前导空格，但忽视掉）</span><br><span class="line">                     ^</span><br><span class="line">         第 2 步：<span class="string">"   -42"</span>（读入 <span class="string">'-'</span> 字符，所以结果应该是负数）</span><br><span class="line">                      ^</span><br><span class="line">         第 3 步：<span class="string">"   -42"</span>（读入 <span class="string">"42"</span>）</span><br><span class="line">                        ^</span><br><span class="line">         解析得到整数 -42 。</span><br><span class="line">         由于 <span class="string">"-42"</span> 在范围 [-231, 231 - 1] 内，最终结果为 -42 。</span><br><span class="line">input  : s = <span class="string">"4193 with words"</span></span><br><span class="line">output : 4193</span><br><span class="line">note   : 第 1 步：<span class="string">"4193 with words"</span>（当前没有读入字符，因为没有前导空格）</span><br><span class="line">                  ^</span><br><span class="line">         第 2 步：<span class="string">"4193 with words"</span>（当前没有读入字符，因为这里不存在 <span class="string">'-'</span> 或者 <span class="string">'+'</span>）</span><br><span class="line">                  ^</span><br><span class="line">         第 3 步：<span class="string">"4193 with words"</span>（读入 <span class="string">"4193"</span>；由于下一个字符不是一个数字，所以读入停止）</span><br><span class="line">                      ^</span><br><span class="line">         解析得到整数 4193 。</span><br><span class="line">         由于 <span class="string">"4193"</span> 在范围 [-231, 231 - 1] 内，最终结果为 4193 。</span><br><span class="line">input  : s = <span class="string">"words and 987"</span></span><br><span class="line">output : 0</span><br><span class="line">note   : 第 1 步：<span class="string">"words and 987"</span>（当前没有读入字符，因为没有前导空格）</span><br><span class="line">                  ^</span><br><span class="line">         第 2 步：<span class="string">"words and 987"</span>（当前没有读入字符，因为这里不存在 <span class="string">'-'</span> 或者 <span class="string">'+'</span>）</span><br><span class="line">                  ^</span><br><span class="line">         第 3 步：<span class="string">"words and 987"</span>（由于当前字符 <span class="string">'w'</span> 不是一个数字，所以读入停止）</span><br><span class="line">                  ^</span><br><span class="line">         解析得到整数 0 ，因为没有读入任何数字。</span><br><span class="line">         由于 0 在范围 [-231, 231 - 1] 内，最终结果为 0 。</span><br><span class="line">input  : s = <span class="string">"-91283472332"</span></span><br><span class="line">output : -2147483648</span><br><span class="line">note   : 第 1 步：<span class="string">"-91283472332"</span>（当前没有读入字符，因为没有前导空格）</span><br><span class="line">                  ^</span><br><span class="line">         第 2 步：<span class="string">"-91283472332"</span>（读入 <span class="string">'-'</span> 字符，所以结果应该是负数）</span><br><span class="line">                   ^</span><br><span class="line">         第 3 步：<span class="string">"-91283472332"</span>（读入 <span class="string">"91283472332"</span>）</span><br><span class="line">                              ^</span><br><span class="line">         解析得到整数 -91283472332 。</span><br><span class="line">         由于 -91283472332 小于范围 [-231, 231 - 1] 的下界，最终结果被截断为 -231 = -2147483648 。</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路1 借助Long</strong></p><ul><li>1、去空格</li><li>2、获取正负号</li><li>3、借助stringBuilder获取数字字符</li><li>4、删除前缀0</li><li>5、长度判断，过长则截取</li><li>6、判断是否越界</li><li>7、返回结果</li></ul><p><strong>思路2 借助字符串</strong></p><ul><li>1、去空格</li><li>2、获取正负号</li><li>3、借助stringBuilder获取数字字符</li><li>4、删除前缀0</li><li>5、借助字符串和int类型整数进行数值转换，提前进行越界判断，对界值进行缩小来和当前值比较，而不是放大当前值去和界值比较，因为会越界。</li><li>6、返回结果</li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 去空格</span></span><br><span class="line">        String string = s.trim();</span><br><span class="line">        <span class="keyword">if</span> (string.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> length = string.length();</span><br><span class="line">        <span class="comment">// 获取正负号</span></span><br><span class="line">        <span class="keyword">int</span> symbol = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (string.charAt(<span class="number">0</span>) == <span class="string">'-'</span>) &#123;</span><br><span class="line">            symbol = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (symbol == -<span class="number">1</span> || string.charAt(<span class="number">0</span>) == <span class="string">'+'</span>) &#123;</span><br><span class="line">            index = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取数字字符</span></span><br><span class="line">        <span class="keyword">while</span> (index &lt; length &amp;&amp; string.charAt(index) &gt;= <span class="string">'0'</span> &amp;&amp; string.charAt(index) &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">            stringBuilder.append(string.charAt(index));</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (stringBuilder.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 删除前缀0</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; stringBuilder.length() &amp;&amp; stringBuilder.charAt(i++) == <span class="string">'0'</span>) ;</span><br><span class="line">        String input = stringBuilder.toString().substring(i - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 长度判断，过长则截取</span></span><br><span class="line">        <span class="keyword">long</span> number;</span><br><span class="line">        <span class="keyword">if</span> (input.length() &gt; <span class="number">10</span>) &#123;</span><br><span class="line">            number = Long.parseLong(input.substring(<span class="number">0</span>, <span class="number">11</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            number = Long.parseLong(input);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断是否越界</span></span><br><span class="line">        <span class="keyword">if</span> (symbol == <span class="number">1</span> &amp;&amp; number &gt; ((<span class="keyword">int</span>) (Math.pow(<span class="number">2</span>, <span class="number">31</span>)) - <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2147483647</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (symbol == -<span class="number">1</span> &amp;&amp; -number &lt; -((<span class="keyword">int</span>) (Math.pow(<span class="number">2</span>, <span class="number">31</span>)) + <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">2147483648</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) (symbol * number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路2代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 去空格</span></span><br><span class="line">        String string = s.trim();</span><br><span class="line">        <span class="keyword">if</span> (string.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取正负号</span></span><br><span class="line">        <span class="keyword">int</span> symbol = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (string.charAt(<span class="number">0</span>) == <span class="string">'-'</span>) &#123;</span><br><span class="line">            symbol = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (symbol == -<span class="number">1</span> || string.charAt(<span class="number">0</span>) == <span class="string">'+'</span>) &#123;</span><br><span class="line">            index = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> length = string.length();</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span> (index &lt; length &amp;&amp; string.charAt(index) &gt;= <span class="string">'0'</span> &amp;&amp; string.charAt(index) &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">            stringBuilder.append(string.charAt(index));</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (stringBuilder.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 去除前导0</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; stringBuilder.length() &amp;&amp; stringBuilder.charAt(i++) == <span class="string">'0'</span>) ;</span><br><span class="line">        String input = stringBuilder.toString().substring(i - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 有效数值转换</span></span><br><span class="line">        <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; input.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (symbol == <span class="number">1</span> &amp;&amp; (number &gt; Integer.MAX_VALUE / <span class="number">10</span></span><br><span class="line">                    || (number == Integer.MAX_VALUE / <span class="number">10</span> &amp;&amp; (input.charAt(i) - <span class="string">'0'</span>) &gt; Integer.MAX_VALUE % <span class="number">10</span>))) &#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (symbol == -<span class="number">1</span> &amp;&amp; (number &gt; Integer.MIN_VALUE / (-<span class="number">10</span>)</span><br><span class="line">                    || (number == Integer.MIN_VALUE / (-<span class="number">10</span>) &amp;&amp; (input.charAt(i) - <span class="string">'0'</span>) &gt; -(Integer.MIN_VALUE % <span class="number">10</span>)))) &#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.MIN_VALUE;</span><br><span class="line">            &#125;</span><br><span class="line">            number = number * <span class="number">10</span> + (input.charAt(i) - <span class="string">'0'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> symbol * number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 atoi 函数）。&lt;/li&gt;
&lt;li&gt;函数 myAtoi(string s) 的算法如下：&lt;/li&gt;
&lt;li&gt;1、读入字符串并丢弃无用的前导空格&lt;/li&gt;
&lt;li&gt;2、检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。&lt;/li&gt;
&lt;li&gt;3、读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。&lt;/li&gt;
&lt;li&gt;4、将前面步骤读入的这些数字转换为整数（即，”123” -&amp;gt; 123， “0032” -&amp;gt; 32）。如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。&lt;/li&gt;
&lt;li&gt;5、如果整数数超过 32 位有符号整数范围 [−231,  231 − 1] ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 −231 的整数应该被固定为 −231 ，大于 231 − 1 的整数应该被固定为 231 − 1 。&lt;/li&gt;
&lt;li&gt;6、返回整数作为最终结果。&lt;/li&gt;
&lt;li&gt;本题中的空白字符只包括空格字符 ‘ ‘ 。&lt;/li&gt;
&lt;li&gt;除前导空格或数字后的其余字符串外，请勿忽略 任何其他字符。&lt;/li&gt;
&lt;li&gt;0 &amp;lt;= s.length &amp;lt;= 200&lt;/li&gt;
&lt;li&gt;s 由英文字母（大写和小写）、数字（0-9）、’ ‘、’+’、’-‘ 和 ‘.’ 组成&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;example&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : s = &lt;span class=&quot;string&quot;&gt;&quot;42&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : 42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;note   : 加粗的字符串为已经读入的字符，插入符号是当前读取的字符。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         第 1 步：&lt;span class=&quot;string&quot;&gt;&quot;42&quot;&lt;/span&gt;（当前没有读入字符，因为没有前导空格）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         第 2 步：&lt;span class=&quot;string&quot;&gt;&quot;42&quot;&lt;/span&gt;（当前没有读入字符，因为这里不存在 &lt;span class=&quot;string&quot;&gt;&#39;-&#39;&lt;/span&gt; 或者 &lt;span class=&quot;string&quot;&gt;&#39;+&#39;&lt;/span&gt;）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         第 3 步：&lt;span class=&quot;string&quot;&gt;&quot;42&quot;&lt;/span&gt;（读入 &lt;span class=&quot;string&quot;&gt;&quot;42&quot;&lt;/span&gt;）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         解析得到整数 42 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         由于 &lt;span class=&quot;string&quot;&gt;&quot;42&quot;&lt;/span&gt; 在范围 [-231, 231 - 1] 内，最终结果为 42 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : s = &lt;span class=&quot;string&quot;&gt;&quot;   -42&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : -42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;note   : 第 1 步：&lt;span class=&quot;string&quot;&gt;&quot;   -42&quot;&lt;/span&gt;（读入前导空格，但忽视掉）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         第 2 步：&lt;span class=&quot;string&quot;&gt;&quot;   -42&quot;&lt;/span&gt;（读入 &lt;span class=&quot;string&quot;&gt;&#39;-&#39;&lt;/span&gt; 字符，所以结果应该是负数）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         第 3 步：&lt;span class=&quot;string&quot;&gt;&quot;   -42&quot;&lt;/span&gt;（读入 &lt;span class=&quot;string&quot;&gt;&quot;42&quot;&lt;/span&gt;）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         解析得到整数 -42 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         由于 &lt;span class=&quot;string&quot;&gt;&quot;-42&quot;&lt;/span&gt; 在范围 [-231, 231 - 1] 内，最终结果为 -42 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : s = &lt;span class=&quot;string&quot;&gt;&quot;4193 with words&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : 4193&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;note   : 第 1 步：&lt;span class=&quot;string&quot;&gt;&quot;4193 with words&quot;&lt;/span&gt;（当前没有读入字符，因为没有前导空格）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         第 2 步：&lt;span class=&quot;string&quot;&gt;&quot;4193 with words&quot;&lt;/span&gt;（当前没有读入字符，因为这里不存在 &lt;span class=&quot;string&quot;&gt;&#39;-&#39;&lt;/span&gt; 或者 &lt;span class=&quot;string&quot;&gt;&#39;+&#39;&lt;/span&gt;）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         第 3 步：&lt;span class=&quot;string&quot;&gt;&quot;4193 with words&quot;&lt;/span&gt;（读入 &lt;span class=&quot;string&quot;&gt;&quot;4193&quot;&lt;/span&gt;；由于下一个字符不是一个数字，所以读入停止）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         解析得到整数 4193 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         由于 &lt;span class=&quot;string&quot;&gt;&quot;4193&quot;&lt;/span&gt; 在范围 [-231, 231 - 1] 内，最终结果为 4193 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : s = &lt;span class=&quot;string&quot;&gt;&quot;words and 987&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;note   : 第 1 步：&lt;span class=&quot;string&quot;&gt;&quot;words and 987&quot;&lt;/span&gt;（当前没有读入字符，因为没有前导空格）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         第 2 步：&lt;span class=&quot;string&quot;&gt;&quot;words and 987&quot;&lt;/span&gt;（当前没有读入字符，因为这里不存在 &lt;span class=&quot;string&quot;&gt;&#39;-&#39;&lt;/span&gt; 或者 &lt;span class=&quot;string&quot;&gt;&#39;+&#39;&lt;/span&gt;）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         第 3 步：&lt;span class=&quot;string&quot;&gt;&quot;words and 987&quot;&lt;/span&gt;（由于当前字符 &lt;span class=&quot;string&quot;&gt;&#39;w&#39;&lt;/span&gt; 不是一个数字，所以读入停止）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         解析得到整数 0 ，因为没有读入任何数字。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         由于 0 在范围 [-231, 231 - 1] 内，最终结果为 0 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : s = &lt;span class=&quot;string&quot;&gt;&quot;-91283472332&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : -2147483648&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;note   : 第 1 步：&lt;span class=&quot;string&quot;&gt;&quot;-91283472332&quot;&lt;/span&gt;（当前没有读入字符，因为没有前导空格）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         第 2 步：&lt;span class=&quot;string&quot;&gt;&quot;-91283472332&quot;&lt;/span&gt;（读入 &lt;span class=&quot;string&quot;&gt;&#39;-&#39;&lt;/span&gt; 字符，所以结果应该是负数）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         第 3 步：&lt;span class=&quot;string&quot;&gt;&quot;-91283472332&quot;&lt;/span&gt;（读入 &lt;span class=&quot;string&quot;&gt;&quot;91283472332&quot;&lt;/span&gt;）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         解析得到整数 -91283472332 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         由于 -91283472332 小于范围 [-231, 231 - 1] 的下界，最终结果被截断为 -231 = -2147483648 。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://hexo.flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="字符串" scheme="https://hexo.flower48237.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题162.寻找峰值</title>
    <link href="https://hexo.flower48237.com/2021/11/01/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98162.%E5%AF%BB%E6%89%BE%E5%B3%B0%E5%80%BC/"/>
    <id>https://hexo.flower48237.com/2021/11/01/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98162.%E5%AF%BB%E6%89%BE%E5%B3%B0%E5%80%BC/</id>
    <published>2021-11-01T13:45:18.397Z</published>
    <updated>2021-11-01T13:43:53.544Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>峰值元素是指其值严格大于左右相邻值的元素。</li><li>给你一个整数数组 nums，找到峰值元素并返回其索引。数组可能包含多个峰值，在这种情况下，返回 任何一个峰值 所在位置即可。</li><li>可以假设 nums[-1] = nums[n] = -∞ 。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">example</span><br><span class="line">input  : nums = &#123;1,2,3,1&#125;</span><br><span class="line">output : 2</span><br><span class="line">input  : nums = &#123;1,2,1,3,5,6,4&#125;</span><br><span class="line">output : 1 (或 5， 都对输出一个即可)</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路1 顺序遍历</strong></p><ul><li>找到第一个大于其后相邻元素值的元素返回下标即可</li><li>若遍历结束没有找到，则直接返回 nums.length - 1，即数组的最后一个元素即是一个峰值，只不过没有右邻元素做比较</li><li>因为元素值各不相等，所以找到第一个大于其后相邻元素值的元素（A）的时候，隐含的信息是A一定大于其前的所有元素</li><li>如果在A之前，有B大于A，不管B是不是A的左邻元素 【 如 ： 1，4（B），2，3（A），0；或者 1，4（B），3（A），0】，B的下标肯定早就因为大于B的值右邻元素值被返回了</li><li>时间复杂度O(n)</li></ul><p><strong>思路 二分查找</strong></p><ul><li>评论区大佬们把这方法叫做爬坡法</li><li>使用二分查找的方式，比较 nums[middle] 和  nums[middle + 1] 的大小</li><li>若 nums[middle] &gt; nums[middle + 1] 说明坡在左边，right 置为 middle</li><li>若 nums[middle] &lt;= nums[middle + 1] 说明坡在右边，left 置为 middle + 1</li><li>等号在哪侧都可以</li><li>时间复杂度O(log n)</li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findPeakElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums.length - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路2代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findPeakElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">int</span> middle = (right + left) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">// System.out.println(left + " , " + middle + " , "+ right);</span></span><br><span class="line">            <span class="keyword">if</span> (nums[middle] &gt; nums[middle + <span class="number">1</span>]) &#123;</span><br><span class="line">                right = middle;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[middle] &lt;= nums[middle + <span class="number">1</span>]) &#123;</span><br><span class="line">                left = middle + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;峰值元素是指其值严格大于左右相邻值的元素。&lt;/li&gt;
&lt;li&gt;给你一个整数数组 nums，找到峰值元素并返回其索引。数组可能包含多个峰值，在这种情况下，返回 任何一个峰值 所在位置即可。&lt;/li&gt;
&lt;li&gt;可以假设 nums[-1] = nums[n] = -∞ 。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;example&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : nums = &amp;#123;1,2,3,1&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : nums = &amp;#123;1,2,1,3,5,6,4&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : 1 (或 5， 都对输出一个即可)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://hexo.flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="数组" scheme="https://hexo.flower48237.com/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="二分查找" scheme="https://hexo.flower48237.com/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题034.在排序数组中查找元素的第一个和最后一个位置</title>
    <link href="https://hexo.flower48237.com/2021/10/31/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98034.%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE/"/>
    <id>https://hexo.flower48237.com/2021/10/31/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98034.%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE/</id>
    <published>2021-10-31T14:23:18.079Z</published>
    <updated>2021-10-31T14:21:06.185Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。</li><li>如果数组中不存在目标值 target，返回 [-1, -1]。</li><li>可以设计并实现时间复杂度为 O(log n) 的算法解决此问题吗？<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">example</span><br><span class="line">input  : nums = &#123;5,7,7,8,8,10&#125;, target = 8</span><br><span class="line">output : &#123;3,4&#125;</span><br><span class="line">input  : nums = &#123;5,7,7,8,8,10&#125;, target = 6</span><br><span class="line">output : &#123;-1,-1&#125;</span><br><span class="line">input  : nums = &#123;&#125;, target = 0</span><br><span class="line">output : &#123;-1,-1&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3></li></ul><p><strong>思路1 二分查找</strong></p><ul><li>第一个位置是找nums[i] &gt;= target</li><li>最后一个位置是找nums[i] &gt; target</li><li>时间复杂度O(log n)</li></ul><p><strong>思路2 双指针</strong></p><ul><li>双向遍历，向中间收缩</li><li>第一个位置找第一个不小于 target 的元素下标</li><li>最后一个位置找第一个不大于 target 的元素下标</li><li>时间复杂度O(n)</li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] searchRange(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span> || target &lt; nums[<span class="number">0</span>] || target &gt; nums[nums.length - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left = findIndex(nums, target);</span><br><span class="line">        <span class="keyword">int</span> right = findIndex(nums, target + <span class="number">1</span>) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (left &gt; right) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;left, right&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">findIndex</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="comment">// System.out.println(left + " , " + right);</span></span><br><span class="line">            <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt;= target) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路2代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] searchRange(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] result = &#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> length = nums.length;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span> || target &lt; nums[<span class="number">0</span>] || target &gt; nums[length - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (nums[left] &lt; target) &#123;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums[left] == target) &#123;</span><br><span class="line">            result[<span class="number">0</span>] = left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (nums[right] &gt; target) &#123;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums[right] == target) &#123;</span><br><span class="line">            result[<span class="number">1</span>] = right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 执行到此处，若left为-1，说明数组中没有target元素，则right一定为-1，不需要额外的判断了。</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。&lt;/li&gt;
&lt;li&gt;如果数组中不存在目标值 target，返回 [-1, -1]。&lt;/li&gt;
&lt;li&gt;可以设计并实现时间复杂度为 O(log n) 的算法解决此问题吗？&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;example&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : nums = &amp;#123;5,7,7,8,8,10&amp;#125;, target = 8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : &amp;#123;3,4&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : nums = &amp;#123;5,7,7,8,8,10&amp;#125;, target = 6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : &amp;#123;-1,-1&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : nums = &amp;#123;&amp;#125;, target = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : &amp;#123;-1,-1&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
  </entry>
  
</feed>
