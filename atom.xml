<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>鸡排大仙儿的个人博客</title>
  
  <subtitle>记录学习过程</subtitle>
  <link href="https://flower48237.com/atom.xml" rel="self"/>
  
  <link href="https://flower48237.com/"/>
  <updated>2021-10-21T12:55:14.037Z</updated>
  <id>https://flower48237.com/</id>
  
  <author>
    <name>鸡排大仙儿</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode精选TOP面试题66.加一</title>
    <link href="https://flower48237.com/2021/10/21/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%9866.%E5%8A%A0%E4%B8%80/"/>
    <id>https://flower48237.com/2021/10/21/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%9866.%E5%8A%A0%E4%B8%80/</id>
    <published>2021-10-21T12:55:58.020Z</published>
    <updated>2021-10-21T12:55:14.037Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。<br>最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。<br>假设除了整数 0 之外，这个整数不会以零开头</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">example</span><br><span class="line">input  : &#123;0&#125;</span><br><span class="line">output : &#123;1&#125;</span><br><span class="line">input  : &#123;1,9&#125;</span><br><span class="line">output : &#123;2,0&#125;</span><br><span class="line">input  : &#123;9,9,9&#125;</span><br><span class="line">output : &#123;1,0,0,0&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路1 借助大数BigDecimal</strong></p><ul><li>先将数组转换为StringBuilder sb</li><li>再借助sb生成大数bd，使用大数的运算规则做加一</li><li>将大数bd转换为字符串s，再将s转换为数组</li><li>时间复杂度O(n)</li><li>空间复杂度O(n)</li></ul><p><strong>思路2 逆序遍历做加法</strong></p><ul><li>按照最基本的想法，做逆向遍历，做加法</li><li>若最后一位加1后等于10则置0并进位，进入循环计算，直至某次计算不需要进位，或者进位到数组开头（此时需要扩展数组长度都+1，并将首位置1，后续全为0）</li><li>若最后一位加1后不为10则直接为其赋新值并返回数组</li><li>时间复杂度O(n)</li><li>空间复杂度O(n)</li></ul><p><strong>思路3 逆向遍历找最长的后缀“9……9”串</strong></p><ul><li>逆向遍历，找最长的连续“999……9”串string，直至找到第一个不为9的数值（记录位置index），或者全部为9逆向遍历到数组开头</li><li>若string的长度不等于数组长度，则使index位置的数值加1，并置其后续所有数组元素为0</li><li>若string的长度等于数组长度，则扩展数组长度+1，置首位为1，后续全为0</li><li>时间复杂度O(n)</li><li>空间复杂度O(n)<h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3></li></ul><p><strong>思路1代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] plusOne(<span class="keyword">int</span>[] digits) &#123;</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; digits.length; i++) &#123;</span><br><span class="line">            stringBuilder.append(digits[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        BigDecimal bigDecimal = <span class="keyword">new</span> BigDecimal(stringBuilder.toString());</span><br><span class="line">        bigDecimal = bigDecimal.add(<span class="keyword">new</span> BigDecimal(<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">"big decimal:"</span> + bigDecimal);</span><br><span class="line">        String string = bigDecimal.toString();</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[string.length()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; string.length(); i++) &#123;</span><br><span class="line">            result[i] = string.charAt(i) - <span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路2代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] plusOne(<span class="keyword">int</span>[] digits) &#123;</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; digits.length; i ++) &#123;</span><br><span class="line">            stringBuilder.append(digits[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> add = stringBuilder.charAt(stringBuilder.length() - <span class="number">1</span>) - <span class="string">'0'</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (add != <span class="number">10</span>) &#123;</span><br><span class="line">            stringBuilder.setCharAt(stringBuilder.length() - <span class="number">1</span>,String.valueOf(add).charAt(<span class="number">0</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (stringBuilder.length() == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span>[] result = &#123;<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stringBuilder.length() &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">                stringBuilder.setCharAt(stringBuilder.length() - <span class="number">1</span>,<span class="string">'0'</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = stringBuilder.length() - <span class="number">2</span>; j &gt;= <span class="number">0</span>; j --) &#123;</span><br><span class="line">                    add = stringBuilder.charAt(j) - <span class="string">'0'</span> + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (add == <span class="number">10</span>) &#123;</span><br><span class="line">                        stringBuilder.setCharAt(j, <span class="string">'0'</span>);</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        stringBuilder.setCharAt(j, String.valueOf(add).charAt(<span class="number">0</span>));</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(add == <span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[stringBuilder.length() + <span class="number">1</span>];</span><br><span class="line">            result[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; result.length; k ++) &#123;</span><br><span class="line">                result[k] = stringBuilder.charAt(k - <span class="number">1</span>) - <span class="string">'0'</span>;</span><br><span class="line">                System.out.print(result[k]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[stringBuilder.length()];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; result.length; k ++) &#123;</span><br><span class="line">                result[k] = stringBuilder.charAt(k) - <span class="string">'0'</span>;</span><br><span class="line">                System.out.print(result[k]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路3代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] plusOne(<span class="keyword">int</span>[] digits) &#123;</span><br><span class="line">        <span class="keyword">int</span> length = digits.length;</span><br><span class="line">        <span class="keyword">int</span> last = length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (last &gt;= <span class="number">0</span> &amp;&amp; digits[last] == <span class="number">9</span>) &#123;</span><br><span class="line">            last--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (last + <span class="number">1</span> != length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (last == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[digits.length + <span class="number">1</span>];</span><br><span class="line">                result[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (last != -<span class="number">1</span>) &#123;</span><br><span class="line">                digits[last]++;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = last + <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">                    digits[i] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> digits;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (last + <span class="number">1</span> == length) &#123;</span><br><span class="line">            digits[length - <span class="number">1</span>]++;</span><br><span class="line">            <span class="keyword">return</span> digits;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> digits;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。&lt;br&gt;最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。&lt;br&gt;假设除了整数 0 之外，这个整数不会以零开头&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;example&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : &amp;#123;0&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : &amp;#123;1&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : &amp;#123;1,9&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : &amp;#123;2,0&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : &amp;#123;9,9,9&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : &amp;#123;1,0,0,0&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="数值计算" scheme="https://flower48237.com/tags/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    
    <category term="数组" scheme="https://flower48237.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选面试题326.3的幂</title>
    <link href="https://flower48237.com/2021/10/20/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98326.3%E7%9A%84%E5%B9%82/"/>
    <id>https://flower48237.com/2021/10/20/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98326.3%E7%9A%84%E5%B9%82/</id>
    <published>2021-10-20T12:16:14.687Z</published>
    <updated>2021-10-20T12:13:45.046Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个整数，写一个函数来判断它是否是 3 的幂次方。若是，返回 true ；否则，返回 false 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">example</span><br><span class="line">input  : n = 0</span><br><span class="line">output : <span class="literal">false</span></span><br><span class="line">input  : n = 9</span><br><span class="line">output : <span class="literal">true</span></span><br><span class="line">input  : n = 45</span><br><span class="line">output : <span class="literal">false</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路1</strong><br>从n往1做除法<br><strong>思路2</strong><br>从1往n做乘法</p><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">0</span> &amp;&amp; n % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            n /= <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路2代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">3</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 防止超时，先做一次判断，把不能整除3的都筛除，对3取余是0的数值包含了3的幂次方</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">            i *= <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n == i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;给定一个整数，写一个函数来判断它是否是 3 的幂次方。若是，返回 true ；否则，返回 false 。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;example&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : n = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : n = 9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : n = 45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="数值计算" scheme="https://flower48237.com/tags/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题234.回文链表</title>
    <link href="https://flower48237.com/2021/10/19/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98234.%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/"/>
    <id>https://flower48237.com/2021/10/19/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%98234.%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/</id>
    <published>2021-10-19T14:41:51.052Z</published>
    <updated>2021-10-19T13:54:48.780Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">example</span><br><span class="line">input  : head = 1-&gt;2-&gt;2-&gt;1</span><br><span class="line">output : <span class="literal">true</span></span><br><span class="line">input  : head = 1-&gt;2</span><br><span class="line">output : <span class="literal">false</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路1</strong></p><ul><li>头插法改变后半部分链表</li><li>时间复杂度O(n)</li><li>空间复杂度O(n)</li></ul><p><strong>思路2</strong></p><ul><li>头插法改变前半部分链表</li><li>时间复杂度O(n)</li><li>空间复杂度O(n)</li></ul><p><strong>思路3</strong></p><ul><li>借助栈，不改变链表结构，只对比节点数值。</li><li>时间复杂度O(n)</li><li>空间复杂度O(n)<h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3></li></ul><p><strong>思路1代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 改变后半部分节点，头插法</span></span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">        ListNode p = head;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            length++;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        p = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (length % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode q = p;</span><br><span class="line">        ListNode newHead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        newHead.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length / <span class="number">2</span> &amp;&amp; p != <span class="keyword">null</span>; i++) &#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">            q.next = newHead;</span><br><span class="line">            newHead = q;</span><br><span class="line">            q = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length / <span class="number">2</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (newHead.val != head.val) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            head = head.next;</span><br><span class="line">            newHead = newHead.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路2代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 改变前半部分节点，头插法</span></span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">        ListNode p = head;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            length++;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        p = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode newList = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        newList.next = <span class="keyword">null</span>;</span><br><span class="line">        p = head;</span><br><span class="line">        ListNode q = p;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">            q.next = newList.next;</span><br><span class="line">            newList.next = q;</span><br><span class="line">            q = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (length % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        q = newList.next;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length / <span class="number">2</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (q.val != p.val) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p.next;</span><br><span class="line">            q = q.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路2代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">        ListNode p = head;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            length++;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        p = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            stack.push(p.val);</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (length % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length / <span class="number">2</span> &amp;&amp; p != <span class="keyword">null</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (stack.pop() != p.val) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>链表类定义</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode next;</span><br><span class="line"></span><br><span class="line">    ListNode() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ListNode(<span class="keyword">int</span> val) &#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ListNode(<span class="keyword">int</span> val, ListNode next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>** Main函数 **</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ListNode head = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        head.next = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        head.next.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        head.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        head.next.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        head.next.next.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        ListNode p = head;</span><br><span class="line"></span><br><span class="line">        p = head.next;</span><br><span class="line">        <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(p.val + <span class="string">"-&gt;"</span>);</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(p.val);</span><br><span class="line">        System.out.println(<span class="string">"solution3 and solution2 will not change the structure of list, solution1 will change it.\n"</span>);</span><br><span class="line">        System.out.println(<span class="string">"==solution3============="</span>);</span><br><span class="line">        Solution3 solution3 = <span class="keyword">new</span> Solution3();</span><br><span class="line">        <span class="keyword">boolean</span> result3 = solution3.isPalindrome(head.next);</span><br><span class="line">        System.out.println(<span class="string">"result3 : "</span> + result3);</span><br><span class="line">        System.out.println(<span class="string">"==after solution3======="</span>);</span><br><span class="line">        p = head.next;</span><br><span class="line">        <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(p.val + <span class="string">"-&gt;"</span>);</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(p.val);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * solution 2 和 solution 3 不能同时调用</span></span><br><span class="line"><span class="comment">         * 因为使用其中一个后会改变链表结构。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">"\n==solution2============="</span>);</span><br><span class="line">        Solution2 solution2 = <span class="keyword">new</span> Solution2();</span><br><span class="line">        <span class="keyword">boolean</span> result2 = solution2.isPalindrome(head.next);</span><br><span class="line">        System.out.println(<span class="string">"result2 : "</span> + result2);</span><br><span class="line">        System.out.println(<span class="string">"==after solution2======="</span>);</span><br><span class="line">        p = head.next;</span><br><span class="line">        <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(p.val + <span class="string">"-&gt;"</span>);</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(p.val);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"\n==solution1============="</span>);</span><br><span class="line">        Solution1 solution1 = <span class="keyword">new</span> Solution1();</span><br><span class="line">        <span class="keyword">boolean</span> result1 = solution1.isPalindrome(head.next);</span><br><span class="line">        System.out.println(<span class="string">"result1 : "</span> + result1);</span><br><span class="line">        System.out.println(<span class="string">"==after solution1======="</span>);</span><br><span class="line">        p = head.next;</span><br><span class="line">        <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(p.val + <span class="string">"-&gt;"</span>);</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(p.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;example&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : head = 1-&amp;gt;2-&amp;gt;2-&amp;gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : head = 1-&amp;gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="链表" scheme="https://flower48237.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选面试题14.最长公共前缀</title>
    <link href="https://flower48237.com/2021/10/18/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%9814.%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/"/>
    <id>https://flower48237.com/2021/10/18/LeetCode%E7%B2%BE%E9%80%89TOP%E9%9D%A2%E8%AF%95%E9%A2%9814.%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/</id>
    <published>2021-10-18T13:59:36.286Z</published>
    <updated>2021-10-18T14:05:22.705Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>编写一个函数来查找字符串数组中的最长公共前缀。如果不存在公共前缀，返回空字符串 “”。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">example</span><br><span class="line">input  : str1 = &#123;<span class="string">"flower"</span>,<span class="string">"flow"</span>,<span class="string">"flight"</span>&#125;</span><br><span class="line">output : <span class="string">"fl"</span></span><br><span class="line">input  : str2 = &#123;<span class="string">"dog"</span>,<span class="string">"race"</span>,<span class="string">"car"</span>&#125;</span><br><span class="line">output : <span class="string">""</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路1</strong></p><ul><li>纵向扫描，直接遍历对比。从前向后遍历所有字符串的每一列，比较相同列上的字符是否相同。<br>如果相同则继续对下一列进行比较，如果不相同则当前列不再属于公共前缀，当前列之前的部分就是最长公共前缀。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1   2   3   4   5   6</span><br><span class="line">---------------------</span><br><span class="line">f   l   o   w   e   r</span><br><span class="line"></span><br><span class="line">f   l   o   w</span><br><span class="line"></span><br><span class="line">f   l   i   g   h   t</span><br></pre></td></tr></table></figure></li><li>时间复杂度：O(mn)，m是数组中的字符串的平均长度，n是字符串数量。最坏情况下数组中每个字符串的每个字符都会被比较一次。</li><li>空间复杂度：O(1)。使用的额外空间复杂度为常数。</li></ul><p><strong>思路2</strong></p><ul><li><p>分治策略</p></li><li><p>最长公共前缀（LCP）的计算满足结合律</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LCP(S1,……,Sn) = LCP(LCP(S1,……,Sk),LCP(Sk+1,……,Sn))</span><br></pre></td></tr></table></figure></li><li><p>时间复杂度：O(mn)，m是数组中的字符串的平均长度，n是字符串数量。<br>递推公式：T(n) = 2 × T(n/2)+O(m) =&gt; T(n)=O(mn)</p></li><li><p>空间复杂度：O(m × log n)，其中m是字符串数组中的字符串的平均长度，n是字符串的数量。<br>空间复杂度主要取决于递归调用的层数，层数最大为log n，每层需要m的空间存储返回结果。</p><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3></li></ul><p><strong>思路1代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (strs == <span class="keyword">null</span> || strs.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// solution1</span></span><br><span class="line">        <span class="keyword">int</span> length = strs[<span class="number">0</span>].length();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; length; k ++)&#123;</span><br><span class="line">            <span class="keyword">char</span> ch = strs[<span class="number">0</span>].charAt(k);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(k == strs[i].length() || strs[i].charAt(k) != ch)&#123;</span><br><span class="line">                    <span class="keyword">return</span> strs[<span class="number">0</span>].substring(<span class="number">0</span>, k);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> strs[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路2代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (strs == <span class="keyword">null</span> || strs.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * solution2 divide and conquer</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> divideAndConquer(strs, <span class="number">0</span>, strs.length - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">divideAndConquer</span><span class="params">(String[] strings, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start == end) &#123;</span><br><span class="line">            <span class="keyword">return</span> strings[start];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 防止加法溢出</span></span><br><span class="line">            <span class="keyword">int</span> middle = (end - start) / <span class="number">2</span> + start;</span><br><span class="line">            String lcpLeft = divideAndConquer(strings, start, middle);</span><br><span class="line">            String lcpRight = divideAndConquer(strings, middle + <span class="number">1</span>, end);</span><br><span class="line">            <span class="keyword">return</span> commonPrefix(lcpLeft, lcpRight);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">commonPrefix</span><span class="params">(String lcpLeft, String lcpRight)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> minLength = Math.min(lcpLeft.length(), lcpRight.length());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; minLength; index++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (lcpLeft.charAt(index) != lcpRight.charAt(index)) &#123;</span><br><span class="line">                <span class="keyword">return</span> lcpLeft.substring(<span class="number">0</span>, index);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lcpLeft.substring(<span class="number">0</span>, minLength);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Main代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] strings = &#123;<span class="string">"abc"</span>,<span class="string">"ab"</span>, <span class="string">"abd"</span>&#125;;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> Solution();</span><br><span class="line">        String result = solution.longestCommonPrefix(strings);</span><br><span class="line">        System.out.println(<span class="string">"result: "</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;编写一个函数来查找字符串数组中的最长公共前缀。如果不存在公共前缀，返回空字符串 “”。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;example&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : str1 = &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;flower&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;flow&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;flight&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : &lt;span class=&quot;string&quot;&gt;&quot;fl&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input  : str2 = &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;dog&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;race&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;car&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output : &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="字符串" scheme="https://flower48237.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="分治" scheme="https://flower48237.com/tags/%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>《The Book of Why》 — Chapter10</title>
    <link href="https://flower48237.com/2021/10/01/The%20Book%20of%20Why%20-%20Chapter%20(10)/"/>
    <id>https://flower48237.com/2021/10/01/The%20Book%20of%20Why%20-%20Chapter%20(10)/</id>
    <published>2021-10-01T08:45:00.000Z</published>
    <updated>2021-10-01T08:45:30.566Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="第十章-大数据，人工智能和大问题"><a href="#第十章-大数据，人工智能和大问题" class="headerlink" title="第十章 大数据，人工智能和大问题"></a>第十章 大数据，人工智能和大问题</h3><blockquote><p>CHAPTER 10 Big Data, Artificial Intelligence, and the  Big Questions</p></blockquote><a id="more"></a><ul><li>借助贝叶斯网络，教会了机器在灰色地带进行思考，这是贝叶斯网络迈向强人工智能的重要一步。但目前仍无法教会机器理解事情的前因后果。（323）</li><li>因果革命的星火逐渐覆盖包括流行病学、心理学、遗传学、生态学、地质学、气候科学等在内的多个专业领域。（324）</li></ul><h4 id="因果模型与大数据"><a href="#因果模型与大数据" class="headerlink" title="因果模型与大数据"></a>因果模型与大数据</h4><ul><li><p>因果问题从来不能单靠数据来回答，他要求我们构建关于数据生成过程的模型，或者至少要构建关于该过程的某些方面的模型。（325）</p></li><li><p>解释数据就意味着做出一种假设，这种假设建基于事物在现实世界中的运作方式。（326）</p></li><li><p>当变量较多时，统计估计这一步的难度不容小觑，只有借助大数据和现代机器学习技术，才有可能真正应对维度灾难。（326）</p></li><li><p>因果推断能屏蔽不相关的特征，也能从不同的研究中把这些在关键方面相似的个体聚集起来，而大数据则能让我们收集到的关于这些个体的充分信息。（326）</p></li><li><p>在一些案例中，无法将任何一项以往的相关研究所得出的效应迁移出去，但可以从这些效应的某种形式的组合中估计出目标总体的效应。（329）</p></li><li><p>do演算提供了一种确定可迁移性的一般标准：如果可以执行一系列的有效do演算，将目标效应的表达式转换为一个新的表达式，其中任何涉及S的因子都不包含do算子，则这一估计值就是可迁移的。</p><p>其遵循的逻辑很简单：任何此类因子都可以从现有数据中估计出来，且不受差异因子S的影响。（329）</p></li></ul><h4 id="强人工智能和自由意志"><a href="#强人工智能和自由意志" class="headerlink" title="强人工智能和自由意志"></a>强人工智能和自由意志</h4><ul><li>在贝叶斯网络中，信息被有意地设计为在因果和诊断两个方向上来回流动。事实上，贝叶斯网络甚至无法解释因果方向是什么。（332）</li><li>因果不对称在某些学科领域的重要性。（332）</li><li>深度学习最主要地局限体现在其无法超越因果关系之梯地第一层级（335）</li><li>谈论强人工智能时，因果模型就从奢侈品变成了必需品，强人工智能应该是能反思其行为，并能从过去的错误中吸取教训的机器，它应该能够理解“我本应该采取不同的行为”这句话，无论这句话是由人类告诉它的还是由它自己分析得出的。（336）</li><li>理解自己的意图，并用它作为因果推断的证据，具备这一能力就说明行为主体的智能已经达到了自我察觉的水平。（336）</li><li>在涉及高度自动化的人工智能系统时，应当确保其目标和行为在整个运行过程中与人类价值观保持一致。（342）</li></ul><blockquote><p>《THE BOOK OF WHY: THE NEW SCIENCE OF CAUSE AND EFFECT》</p><p>——JUDEA PEARL AND DANA MACKENZIE</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;第十章-大数据，人工智能和大问题&quot;&gt;&lt;a href=&quot;#第十章-大数据，人工智能和大问题&quot; class=&quot;headerlink&quot; title=&quot;第十章 大数据，人工智能和大问题&quot;&gt;&lt;/a&gt;第十章 大数据，人工智能和大问题&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;CHAPTER 10 Big Data, Artificial Intelligence, and the  Big Questions&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Causality" scheme="https://flower48237.com/categories/Causality/"/>
    
    
    <category term="Causality" scheme="https://flower48237.com/tags/Causality/"/>
    
    <category term="因果推断" scheme="https://flower48237.com/tags/%E5%9B%A0%E6%9E%9C%E6%8E%A8%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title>《The Book of Why》 — Chapter9</title>
    <link href="https://flower48237.com/2021/10/01/The%20Book%20of%20Why%20-%20Chapter%20(9)/"/>
    <id>https://flower48237.com/2021/10/01/The%20Book%20of%20Why%20-%20Chapter%20(9)/</id>
    <published>2021-10-01T08:45:00.000Z</published>
    <updated>2021-10-01T08:45:13.177Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="第九章-中介：寻找蕴藏的作用机制"><a href="#第九章-中介：寻找蕴藏的作用机制" class="headerlink" title="第九章 中介：寻找蕴藏的作用机制"></a>第九章 中介：寻找蕴藏的作用机制</h3><blockquote><p>CHAPTER 9 — Mediation: The Search for a Mechanism</p></blockquote><a id="more"></a><ul><li>关于中介物，一个典型的问题是：他是否可以解释全部结果？（276）</li><li>总效应、直接效应（不通过中介物）、间接效应（通过中介物）（276）</li><li>“中介”使我们能够（更经常地从匮乏的数据中）量化由任何期望路径介导的效应的比例。（276）</li><li>因果革命提供了一套明确而简单的规则，用以量化一个给定效应中直接效应和间接效应所占的比例。（277）</li></ul><h4 id="坏血病：错误的中介物"><a href="#坏血病：错误的中介物" class="headerlink" title="坏血病：错误的中介物"></a>坏血病：错误的中介物</h4><ul><li>中介分析绝不仅仅是一个抽象的数学联系。（280）</li></ul><h4 id="先天因素与后天培养：巴巴拉·伯克斯的悲剧"><a href="#先天因素与后天培养：巴巴拉·伯克斯的悲剧" class="headerlink" title="先天因素与后天培养：巴巴拉·伯克斯的悲剧"></a>先天因素与后天培养：巴巴拉·伯克斯的悲剧</h4><h4 id="寻找一种语言（伯克利大学招生悖论）"><a href="#寻找一种语言（伯克利大学招生悖论）" class="headerlink" title="寻找一种语言（伯克利大学招生悖论）"></a>寻找一种语言（伯克利大学招生悖论）</h4><ul><li><p>悖论的正确解决很大程度上取决于要回答的问题是什么。（285）</p></li><li><p>偏倚是一个不稳定的统计概念，如果采用不同的方法切分数据，偏倚就会消失。而作为一种因果概念，其实反映的是事实，因而必须保持稳定。（290）</p></li><li><p>中介谬误：以中介物为条件（对中介物进行变量控制）而不是保持中介物恒定（设其为常量）。（290）</p><p>若中介物和结果之间没有混杂，则这一错误无实际危害；</p><p>若中介物和结果之间有混杂，则这一错误完全可以反转分析结果。</p></li><li><p>总体的直接效应根据其定义就应取决于子总体直接效应的总和。</p><p>简言之，每个局部的公平就意味着总体的公平！（291）</p></li></ul><h4 id="黛西、小猫和间接效应"><a href="#黛西、小猫和间接效应" class="headerlink" title="黛西、小猫和间接效应"></a>黛西、小猫和间接效应</h4><ul><li><p>受控直接效应CDE（controlled direct effect）</p><p>CDE(0) = P(Y=1|do(X=1), do(M=0))- P(Y=1|do(X=0),do(M=0))</p><p>CDE(1) = P(Y=1|do(X=1), do(M=1)) - P(Y=1|do(X=0),do(M=1))  (9.1)</p></li><li><p>自然直接效应NDE（natural direct effect）</p><p>NDE = P(Y<del>M=M0</del>=1|do(X=1)) - P(Y<del>M=M0</del>=1|do(X=0))  (9.2)</p></li><li><p>自然间接效应NIE（natural indirect effect），指的是结果的预期变化。</p><p>NIE = P(Y<del>M=M1</del>=1|do(X=0)) - P(Y<del>M=M0</del>=1|do(X=0))  (9.3)</p></li><li><p>中介公式使NDE成为一种真正实用的工具。实现了从观测到的数据中将其直接估算出来的目标。（293-294）</p></li><li><p>SCM中的方程具有确定性性质（296）</p></li></ul><h4 id="线性“仙境”中的中介"><a href="#线性“仙境”中的中介" class="headerlink" title="线性“仙境”中的中介"></a>线性“仙境”中的中介</h4><ul><li><p>对于线性模型：总效应 = 直接效应 + 间接效应   (9.4)（297）</p></li><li><p>线性模型的中介分析十分简单的首要原因：直接效应CDE不取决于中介物的水平，即CDE(m)对于所有m值来说都是相同的。（297-298）</p></li><li><p>中介效应可以通过纯粹的统计学方法来定义和计算。（299）</p></li><li><p>相加性原则的“自然效应”版本（其实是相减性原则）可在非线性函数中成立：</p><p>总效应(X=0 —&gt; X=1)  = NDE(X=0 —&gt; X=1)   - NIE(X=0 —&gt; X=1)  </p></li><li><p>在线性模型之外，间接效应对回归分析来说就不再有意义了，其仅剩的意义就是代数步骤的结果（“路径系数的乘积”）。</p></li></ul><h4 id="拥抱假如世界"><a href="#拥抱假如世界" class="headerlink" title="拥抱假如世界"></a>拥抱假如世界</h4><ul><li><p>两个行动有时比一个行动更容易分析，因为行动对应于删除图上的某些箭头，两个行动可以让图示变得更稀疏，更简单。（304）</p></li><li><p>每一种直接效应和间接效应都可以转化为反事实表达式。（306）</p></li><li><p>中介公式，实际上包含了两个公式，分别用于计算自然直接效应和自然间接效应。当其满足因果图所明确、透明地显示出的假设时，就能展示如何根据数据估算出两个效应的值。</p></li><li><p>下图适用的中介公式（306）：</p><p>NIE = Σ<del>m</del>[P(M=m|X=1)-P(M=m|X=0)] × P(Y=1|X=0,M=m)   (9.5)</p><p>中括号内的表达式代表X对M的影响，乘号后的表达式代表了M对Y的影响（当X=0时）。由此就揭示了系数乘积规则的起源，并展示了两个非线性效应的乘积具体应当如何计算。与方程(9.3)不同，方程 (9.5)没有下标和do算子，因此其结果可以直接根据第一层的数据估计出来。</p><img src="C:\Users\Q\AppData\Roaming\Typora\typora-user-images\image-20210920103655423.png" alt="image-20210920103655423" style="zoom:50%;" /></li><li><p>从中介公式中，可以一目了然的看到有关直接效应和间接效应的一切：使它们变大或者变小都需要什么，什么时候回可以从观察或干预数据中估算它们，什么时候可以认为 一个中介物要对将观察到的变化传递给结果变量这件事“负责”。</p></li></ul><h4 id="中介个案研究"><a href="#中介个案研究" class="headerlink" title="中介个案研究"></a>中介个案研究</h4><h5 id="“全民学代数”：一套方案和它的副作用"><a href="#“全民学代数”：一套方案和它的副作用" class="headerlink" title="“全民学代数”：一套方案和它的副作用"></a>“全民学代数”：一套方案和它的副作用</h5><ul><li><img src="C:\Users\Q\AppData\Roaming\Typora\typora-user-images\image-20210920152808915.png" alt="image-20210920152808915" style="zoom:50%;" /></li></ul><h5 id="吸烟基因：中介与干预"><a href="#吸烟基因：中介与干预" class="headerlink" title="吸烟基因：中介与干预"></a>吸烟基因：中介与干预</h5><ul><li><img src="C:\Users\Q\AppData\Roaming\Typora\typora-user-images\image-20210920152923030.png" alt="image-20210920152923030" style="zoom:50%;" /><img src="C:\Users\Q\AppData\Roaming\Typora\typora-user-images\image-20210920153141569.png" alt="image-20210920153141569" style="zoom:50%;" />=&gt;</li></ul><h5 id="止血带：隐藏的谬误"><a href="#止血带：隐藏的谬误" class="headerlink" title="止血带：隐藏的谬误"></a>止血带：隐藏的谬误</h5><img src="C:\Users\Q\AppData\Roaming\Typora\typora-user-images\image-20210920160639076.png" alt="image-20210920160639076" style="zoom:33%;" /><blockquote><p>《THE BOOK OF WHY: THE NEW SCIENCE OF CAUSE AND EFFECT》</p><p>——JUDEA PEARL AND DANA MACKENZIE</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;第九章-中介：寻找蕴藏的作用机制&quot;&gt;&lt;a href=&quot;#第九章-中介：寻找蕴藏的作用机制&quot; class=&quot;headerlink&quot; title=&quot;第九章 中介：寻找蕴藏的作用机制&quot;&gt;&lt;/a&gt;第九章 中介：寻找蕴藏的作用机制&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;CHAPTER 9 — Mediation: The Search for a Mechanism&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Causality" scheme="https://flower48237.com/categories/Causality/"/>
    
    
    <category term="Causality" scheme="https://flower48237.com/tags/Causality/"/>
    
    <category term="因果推断" scheme="https://flower48237.com/tags/%E5%9B%A0%E6%9E%9C%E6%8E%A8%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title>《The Book of Why》 — Chapter7</title>
    <link href="https://flower48237.com/2021/09/29/The%20Book%20of%20Why%20-%20Chapter%20(7)/"/>
    <id>https://flower48237.com/2021/09/29/The%20Book%20of%20Why%20-%20Chapter%20(7)/</id>
    <published>2021-09-29T07:20:00.000Z</published>
    <updated>2021-09-29T07:19:50.713Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="第七章-超越统计调整：征服干预之峰"><a href="#第七章-超越统计调整：征服干预之峰" class="headerlink" title="第七章 超越统计调整：征服干预之峰"></a>第七章 超越统计调整：征服干预之峰</h3><blockquote><p>CHAPTER 7 — Beyond Adjustment: The Conquest of  Mount Intervention</p></blockquote><a id="more"></a><ul><li>因果之梯的第二层：对未尝试过的行动和策略的效果进行预测。<strong>混杂因子是导致我们预测混淆的主要障碍</strong>。在用“路径阻断”工具和后门标准消除这一障碍后，就能精确而系统地绘制出登上干预之峰地路线图。（路径阻断工具是d-separation）（195）</li><li>do演算允许研究者探索并绘制出通往干预之峰的所有可能的路线。（195）</li></ul><h4 id="最简单的路线：后门调整公式"><a href="#最简单的路线：后门调整公式" class="headerlink" title="最简单的路线：后门调整公式"></a>最简单的路线：后门调整公式</h4><ul><li><p>最常用的预测干预效果的方法是使用统计调整公式“控制”混杂因子，如果确定已经掌握了变量的一个充分集（去混因子）的数据就可以用来阻断干预和结果之间的所有后门路径，就可以使用此方法。为了做到这一点，需要首先估计去混因子在每个“水平”或数据分层中产生的效应，并据此测算出干预的平均因果效应。然后需要计算这些层的因果效应的加权平均值，为此需要对每个层都按期在总体中的分布频率进行加权。（195-196）</p></li><li><p>后门准则在估算平均因果效应的过程中所起的作用是，保证去混因子在各层中的因果效应与我们在这一层观察到的趋势相一致。据此可以从数据中逐层估计出因果效应，若没有后门准则，研究者就无法保证所有的统计调整都是合理的。(196)</p></li><li><p>当有多个混杂因子和多个数据分层时，就很难将所有的可能性都罗列出来，一个补救办法是将数值分成有限并且数目可控的类别，但是这种分类方式的选择上可能存在主观性，如果需要进行统计调整的变量比较多，那么类别的数量就会呈指数增长，这将使计算过程变得难以执行，更糟糕的是，在分类完成后，很可能会发现许多层缺乏样本，因此无法对其进行任何概率估计。为应对“维度灾难”问题，设计了数据外推法，即通过一个与数据拟合的光滑函数来填充空的层所形成的洞。运用最为广泛的光滑函数是线性近似，使用时每个因果效应都可以用一个数字（因果系数）来表示，并且根据统计调整公式进行计算的过程非常简单。（197）</p></li><li><p>无论是否经过统计调整，回归系数只表示一种统计趋势，其自身并不能传递因果信息。（198）</p><p>回归系数有时可以体现因果效应，有时则无法体现，而其中的差异无法仅依靠数据来说明。还需要具备另外两个条件才能赋予偏回归系数r<del>YXZ</del> 以因果合法性：</p><p>​    （1）所绘制的相应的因果图能够合理地解释现实情况；</p><p>​    （2）需要据其进行统计调整的变量Z应该满足后门准则。（198）</p></li><li><p>基于回归的统计调整只适用于线性模型：</p><p>（1）一旦使用了线性模型，就失去了为非线性的相互作用建模的能力；（2）即使不知道图中箭头背后的函数是什么，后门调整仍有效。（199）</p></li><li><p>后门准则和后门调整公式的关系：</p><p>后门准则用于判定哪些变量集可以用来去除数据中的混杂；</p><p>后门调整公式所做的实际上就是去混杂。（199）</p></li><li><p>如果因缺乏必要的数据而无法阻断某条后台路径，统计调整公式就会完全失灵。（199）</p></li></ul><h4 id="前门准则"><a href="#前门准则" class="headerlink" title="前门准则"></a>前门准则</h4><ul><li><img src="C:\Users\Q\AppData\Roaming\Typora\typora-user-images\image-20210920194445099.png" alt="image-20210920194445099" style="zoom:50%;" /><p>由于缺乏混杂因子的数据，不能阻断“吸烟 &lt;— 混杂因子 —&gt; 癌症”的后门路径，因此不能使用后门调整来控制混杂因子的影响。（200）</p><p>前门指的是直接的因果路径“吸烟 —&gt; 焦油沉积 —&gt; 癌症”。（201）</p></li><li><p>可以用纯数学的方式在不引入do算子本身（不进行实际干预）的情况下算出概率结果。（202）</p></li><li><p>在不引入do算子的前提下表示 <strong>P（癌症 | do （吸烟））</strong> 就被称作<strong>前门调整</strong>（202）</p></li><li><p>依据上图，设X代表吸烟，Y代表癌症，Z代表焦油沉积，U代表不可观测的变量（未出现在公式中），公式如下</p><ul><li><p>前门调整公式：</p><p>​         P(Y|do(X)) = Σ<del>z</del> P(Z=z,X)Σ<del>x</del> P(Y|X=x,Z=z)P(X=x)</p></li><li><p>后门调整公式：</p><p>​         P(Y|do(X)) = Σ<del>z</del> P(Y|X,Z=z)P(Z=z)</p></li><li><p>从前门公式中可知：</p><p>（1）在公式的任何地方都看不到U，这是整个问题的关键；</p><p>（2）将被估量视为一种针对问题中的目标量的计算方法。</p></li></ul></li><li><p>因果图的一个主要优势就算让假设变得透明，以供专家和决策者探讨和辩论。（203）</p></li><li><p>在假设正确的情况下，即使没有混杂因子的数据，仍然可以用数学方式消除混杂因子的影响。（203）</p></li><li><p>前门调整是一个强大的工具，因为：</p><p>它允许我们控制混杂因子，并且这些混杂因子可以是我们无法观测（如“动机”）甚至无法命名的。也正是因为同样的原因，随机对照试验被认为是估计因果效应的黄金标准。（206）</p></li></ul><h4 id="do演算，或者心胜于物"><a href="#do演算，或者心胜于物" class="headerlink" title="do演算，或者心胜于物"></a>do演算，或者心胜于物</h4><ul><li><p>前门调整公式和后门调整公式的最终目标是根据P（Y|X,A,B,Z,……）此类不涉及do算子的数据估算干预的效果，即P（Y|do（X））。</p><p>如果可以成功消除计算过程中的do概率，就可以利用观测数据来估计因果效应，就可以从因果关系之梯的第一层踏上第二层。（206）</p></li><li><p>三条合法的do表达式变换⭐：（209）</p><ul><li><p>规则1：如果我们观察到变量W和Y无关（其前提可能是以其他变量Z为条件），那么Y的概率分布就不会随W而改变。等式成立的条件是，在删除了指向X的所有箭头之后，变量集Z会阻断所有从W到Y的路径。</p><p>句法解释：允许增加或删除某个观察结果。</p><p>P(Y|do(X), Z, W) = P(Y|do(X),Z)</p></li><li><p>规则2：如果变量Z阻断了X到Y的的所有后门路径，那么以Z为条件（对Z进行变量控制），则do（X）等同于see（X）。即在控制了一个充分的去混因子之后，留下的相关性就是真正的因果效应。</p><p>句法解释：允许用观察替换干预。</p><p>P(Y|do(X),Z) = P(Y|X,Z)</p></li><li><p>规则3：如果没有从X到Y的因果路径，就可以将do(X)和从P(Y|do(X))中移除。即如果我们实施的干预行动（do）不会影响Y，那么Y的概率分布就不会改变。</p><p>句法解释：允许删除或添加干预。</p><p>P(Y|do(X)) = P(Y)</p></li></ul></li><li><p>有了上述三条规则，就可以推导出前门调整公式。这是一个不以控制混杂因子为手段来估计因果效应的方法。（210）</p></li><li><p>如果我们在规则1到3中找不到根据数据估计P(Y|do(X))的方法，那么对于这个问题，解决方案就是不存在的。</p><p>在此情况下，除了进行随机对照试验别无选择。这三条规则还能告诉我们，对于某个特定的问题，什么样的额外假设或实验可以使因果效应从不可估计变为可估计。（212）</p></li><li><p>伊利亚·斯皮塞=&gt;发现可以用于确定某个解决方案是否存在“多项式时间”的算法。（213）</p></li></ul><h4 id="案例：斯诺医生的离奇案例"><a href="#案例：斯诺医生的离奇案例" class="headerlink" title="案例：斯诺医生的离奇案例"></a>案例：斯诺医生的离奇案例</h4><ul><li><p>工具变量（222）如图，Z就是一个工具变量：</p><p>（1）Z和U之间没有箭头（二者独立）</p><p>（2）Z和X之间有一个箭头</p><p>（3）Z和Y之间没有直接箭头</p><img src="C:\Users\Q\AppData\Roaming\Typora\typora-user-images\image-20210919171432493.png" alt="image-20210919171432493" style="zoom:50%;" /></li><li><p>工具变量允许我们执行与前门调整相同的处理：在无法控制混杂因子或收集其数据的情况下估计X对Y的效应。（223）</p></li><li><p>路径图所体现的假设在本质上是因果关系。（223）</p></li></ul><h4 id="好胆固醇与坏胆固醇"><a href="#好胆固醇与坏胆固醇" class="headerlink" title="好胆固醇与坏胆固醇"></a>好胆固醇与坏胆固醇</h4><ul><li><p>“未履行问题”，如受试者虽然随机地接受了药物安排，但实际上并没有复用被分配的药物。（226）</p></li><li><p>当变量都是二元变量，而不是数值变量时，意味着不能使用线性模型，因此工具变量公式也不适用。在这种情况下，通常可以使用被称为“单调性”的弱相关来代替线性假设。但在这么做之前，需要先确保工具变量的三个假设都是有效的（226-227）：</p><p>（1）工具变量Z独立于混杂因子</p><p>（2）Z到Y无直接路径</p><p>（3）Z和X之间存在强关联</p></li><li><p>取最好和最坏情况的做法通常会得到一个估计结果的取值范围。（228）</p></li><li><p>在做任何干预研究之前，都要看我们实际操作的变量（如低密度脂蛋白的终生水平）是否与我们认为自己正在操作的变量（如低密度脂蛋白的当前水平）相同。</p><p>工具变量是一个重要的工具，他能我们帮助我们揭示do演算无法解释的因果信息，do演算强调的是点估计，而非不等式。</p><p>相比工具变量，do演算具有更强大的灵活性，因为在do演算中，我们不需要对因果模型中函数的性质做任何假设。而如果我们的确有足够的科学依据证实类似单调性或线性这样的假设的话，那么像工具变量这种针对性更强的工具就更值得考虑。（230-231）</p></li></ul><blockquote><p>《THE BOOK OF WHY: THE NEW SCIENCE OF CAUSE AND EFFECT》</p><p>——JUDEA PEARL AND DANA MACKENZIE</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;第七章-超越统计调整：征服干预之峰&quot;&gt;&lt;a href=&quot;#第七章-超越统计调整：征服干预之峰&quot; class=&quot;headerlink&quot; title=&quot;第七章 超越统计调整：征服干预之峰&quot;&gt;&lt;/a&gt;第七章 超越统计调整：征服干预之峰&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;CHAPTER 7 — Beyond Adjustment: The Conquest of  Mount Intervention&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Causality" scheme="https://flower48237.com/categories/Causality/"/>
    
    
    <category term="Causality" scheme="https://flower48237.com/tags/Causality/"/>
    
    <category term="因果推断" scheme="https://flower48237.com/tags/%E5%9B%A0%E6%9E%9C%E6%8E%A8%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title>《The Book of Why》 — Chapter8</title>
    <link href="https://flower48237.com/2021/09/29/The%20Book%20of%20Why%20-%20Chapter%20(8)/"/>
    <id>https://flower48237.com/2021/09/29/The%20Book%20of%20Why%20-%20Chapter%20(8)/</id>
    <published>2021-09-29T07:20:00.000Z</published>
    <updated>2021-09-29T07:19:55.129Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="第八章-反事实：探索关于假如的世界"><a href="#第八章-反事实：探索关于假如的世界" class="headerlink" title="第八章 反事实：探索关于假如的世界"></a>第八章 反事实：探索关于假如的世界</h3><blockquote><p>CHAPTER 8 — Counterfactuals: Mining Worlds That  Could Have Been</p></blockquote><a id="more"></a><ul><li>我们已经见识了几种方法，可以用于在各种情景设定和条件下确定干预的效果。在第四章我们讨论了随机对照试验，他被誉为医学临床试验的黄金标准，我们还看到了一些适用于观察性研究的方法，其中处理组和对照组的成员不是随机分配的。对此，如果我们可以采集到能够阻断所有后门路径的变量集的数据，我们就可以使用后门调整公式来估算出干预效果。如果能找到一个被混杂因子“屏蔽”的前门路径，我们就可以引入前门调整。如果我们愿意接受线性或者单调性假设，那么我们就可以使用工具变量（假设该变量可以从因果图中找到，或研究者可以根据试验设计提出一个合适的变量）。此外，那些真正富有冒险精神的研究者还可以使用do演算或者其衍生算法，绘制出一条通往干预之峰的新路线。（235）</li><li>随机对照试验、后门调整公式、前门调整公式、工具变量、do演算等努力目标都是找到研究中处理的某个总效应或者在某些典型个体或子总体中的效应（平均因果效应）。（235）</li><li>责任和过失、遗憾和信誉——这些概念都可以被纳入因果思维之中。（235）</li><li>人类具有想象不存在的世界的能力，我们的天赋是能看到“假如……则本可能是什么”。（236）</li><li>因果关系的理论框架——休厄尔·赖特的路径图及其衍生产物结构因果模型（SCMs）。（236）</li><li>三种不同的因果关系：必要因果关系、充分因果关系、充要因果关系。（237）</li></ul><h4 id="从修昔底德和亚伯拉罕到休谟和刘易斯"><a href="#从修昔底德和亚伯拉罕到休谟和刘易斯" class="headerlink" title="从修昔底德和亚伯拉罕到休谟和刘易斯"></a>从修昔底德和亚伯拉罕到休谟和刘易斯</h4><ul><li>剂量—阈值曲线 或 “阈值效应”（239）</li></ul><h4 id="潜在结果、结构方程和反事实的算法化"><a href="#潜在结果、结构方程和反事实的算法化" class="headerlink" title="潜在结果、结构方程和反事实的算法化"></a>潜在结果、结构方程和反事实的算法化</h4><ul><li><p>唐纳德·鲁宾将潜在结果作为一种回答因果问题的语言加以介绍，这一理论成果为研究人员提供乐了一种高度灵活的语言，使其可以在总体和个体层面上表述出几乎所有他们想问的问题。（245）</p></li><li><p>假设X的值为x，则变量Y一定会取某个与之对应的值Y<del>X=x</del>(u)也可写为Y<del>x</del>，其客观存在性与Y在现实中实际取的值相当。潜在结果，或反事实，是在个体层面而非总体层面上定义的。（245）</p></li><li><p>将因果推断问题看作是数据缺失问题，可能会造成非常严重的误导。（248）</p></li><li><p>匹配、线性回归等插值方法在本质上是有缺陷的，它们是数据驱动的，不是模型驱动的。没有哪种纯粹基于数据的方法（第一层级）可以回答反事实的问题（第三层级）。即使是标准的数据缺失问题也需要借助因果建模来解决。（249-250）</p></li><li><p>将中介物误认作混杂因子是因果推断中最知名的错误之一，混淆因子要求统计调整，而中介物禁止统计调整。（251）</p></li><li><p>方程的创建者必须承诺他所写的方程真实反映了他所认定的现实世界中谁听从于谁的观点。这种承诺或信念上的差异赋予了结构方程支持反事实假设的力量和否定回归方程的力量。（252）</p></li><li><p>从结构模型中推导反事实的三个步骤（253）：</p><ul><li>（1）外展：估计特质因子（外生变量）</li><li>（2）干预：利用do算子改变模型，以反映反事实假设</li><li>（3）预测：利用修改后的模型及有关外生变量的更新信息来估算结果。</li></ul></li><li><p>上述三个步骤中，步骤2告诉我们要用do算子删除指向被赋予了反事实值的变量的箭头，那些可能通过干预变量影响结果的变量，在相应的箭头被删除后就不再被允许以这种方式传递信息了。（253）</p></li><li><p>以上三个步骤被概况为<strong>“因果推断第一定律”：Y<del>x</del></strong>(u) = Y<del>Mx</del>(u)。</p><p>潜在结果Y<del>x</del>(u)可以通过下述方法来推断：构建模型M<del>x</del>（确保删除所有指向X的箭头），并计算结果Y(u)。因果关系之梯的第二层级和第三层级中的所有可估量都由此产生。简言之，将反事实简化为一个算法使我们得以在数学所允许的范围内征服第三层级的一大片版图。（254）</p></li><li><p>有效估计：若模型假设是有效的，潜在的结果与估计值会重合。（254）</p></li><li><p>借助结构方程得到的任何反事实（潜在）结果，都合乎逻辑地遵循了模型所体现地假设，而根据数据驱动方法所获得地答案就像伪相关一样反复无常，因为它无法被用来解释重要的建模假设。（254）</p></li><li><p>利用模型和数据结合，可以成功预测个体在某个假设条件下（在反事实的世界中）的表现。但前提是我们做出了强有力的假设，除了断定观察到的变量之间的因果关系，还假设了函数关系是线性的。（—爱丽丝的例子）但<strong>事实上我们并不总能获得这些函数的信息</strong>。（254）</p></li></ul><h4 id="看到你的假设的好处"><a href="#看到你的假设的好处" class="headerlink" title="看到你的假设的好处"></a>看到你的假设的好处</h4><ul><li>珀尔为计算反事实所展示的结构因果模型方法与鲁宾所使用的潜在因果方法不同，一个主要区别就是前者使用了因果图，因果图允许研究者用他们自己能理解的方式表示因果假设，并把所有的反事实作为其世界模型的一种衍生属性。（255）</li><li>如何利用因果图来判断（条件的）可忽略性，以一组匹配变量Z为条件，要确定对于结果Y来说是否可忽略，只需要测试Z是否阻断了X和Y之间的所有后门路径，同时Z的成员都不是X的后代即可。（257）</li><li>我们可以很容易地测试出以因果图为基础建立的模型与数据的兼容性。（258）</li><li>可测试性：无论何时，只要图中X和Y之间的所有路径都被一组节点Z阻断，那么在以Z为条件的前提下，数据中的X和Y就应该是条件独立的。这就是d-separation。这个属性允许我们在数据未能显示出相应的独立性时否定并放弃模型。（258）</li><li>响应函数是赋予结构因果模型处理反事实的能力的关键因素。同时又是结构因果模型和因果贝叶斯模型的一个主要区别点。（258）</li><li>结构因果模型与概率贝叶斯网络、因果贝叶斯网络的不同之处在于，SCM没有条件概率表，指向Y的箭头只简单地表示Y是其父变量和外生变量U<del>Y</del>的一个函数：Y = f<del>Y</del>(X,A,B,C,…,U<del>Y</del>)。（258）</li><li>结构方程模型SEM和结构因果模型SCM的一个重要区别是，SCM中的因果关系不一定是线性的。SCM分析所用到的方法对非线性函数、线性函数和离散变量、连续变量同样有效。（260）</li></ul><h4 id="反事实与法律"><a href="#反事实与法律" class="headerlink" title="反事实与法律"></a>反事实与法律</h4><ul><li>PN（probability of necessity）必要性概率</li><li>PS（probability of sufficiency）充分性概率</li><li>必要性概率涉及两个不同世界之间的对比，X=1的现实世界和X=0的反事实世界。是否有事后判断（知道现实世界中发生了什么事）是反事实和干预之间的关键区别。没有事后判断，P(Y<del>X=0</del>=0)和P(Y=0|do(X=0))之间就没有区别。（262）</li></ul><h4 id="必要因、充分因和气候变化"><a href="#必要因、充分因和气候变化" class="headerlink" title="必要因、充分因和气候变化"></a>必要因、充分因和气候变化</h4><ul><li>选择线性模型通常是出于方便，而不是出于什么可靠的理由。（270）</li></ul><h4 id="反事实的世界"><a href="#反事实的世界" class="headerlink" title="反事实的世界"></a>反事实的世界</h4><ul><li><p>将反事实纳入考虑后，因果推断引擎提出的因果问题的多样性和丰富性就会大大加强。（270）</p></li><li><p>现在反事实方法最受欢迎的一种应用形式就是“中介分析”。（271）</p></li><li><p>中介物或者中间变量指的是将处理效应传递给结果的事物。</p><p>人们感兴趣的主要问题是，中介变量是否解释了处理变量的全部影响，或者处理变量的部分效果是否可以不通过中介变量传递给结果。（271）</p></li><li><p>中介分析的目的是将直接效应（未通过中介物介导）从间接效应（通过中介物介导）中解析出来。（271）</p></li><li><p>直接效应和间接效应都涉及反事实陈述。（271）</p></li></ul><blockquote><p>《THE BOOK OF WHY: THE NEW SCIENCE OF CAUSE AND EFFECT》</p><p>——JUDEA PEARL AND DANA MACKENZIE</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;第八章-反事实：探索关于假如的世界&quot;&gt;&lt;a href=&quot;#第八章-反事实：探索关于假如的世界&quot; class=&quot;headerlink&quot; title=&quot;第八章 反事实：探索关于假如的世界&quot;&gt;&lt;/a&gt;第八章 反事实：探索关于假如的世界&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;CHAPTER 8 — Counterfactuals: Mining Worlds That  Could Have Been&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Causality" scheme="https://flower48237.com/categories/Causality/"/>
    
    
    <category term="Causality" scheme="https://flower48237.com/tags/Causality/"/>
    
    <category term="因果推断" scheme="https://flower48237.com/tags/%E5%9B%A0%E6%9E%9C%E6%8E%A8%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title>《The Book of Why》 — Chapter5</title>
    <link href="https://flower48237.com/2021/09/28/The%20Book%20of%20Why%20-%20Chapter%20(5)/"/>
    <id>https://flower48237.com/2021/09/28/The%20Book%20of%20Why%20-%20Chapter%20(5)/</id>
    <published>2021-09-28T12:50:00.000Z</published>
    <updated>2021-09-28T12:50:10.950Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="第五章-烟雾缭绕的争论：消除迷雾，澄清事实"><a href="#第五章-烟雾缭绕的争论：消除迷雾，澄清事实" class="headerlink" title="第五章 烟雾缭绕的争论：消除迷雾，澄清事实"></a>第五章 烟雾缭绕的争论：消除迷雾，澄清事实</h3><blockquote><p>CHAPTER 5 The Smoke-Filled Debate:  Clearing the Air</p></blockquote><a id="more"></a><ul><li>时间序列对于因果关系的证明来说是一种非常糟糕的证据。（147）</li><li>因果图的美在于它<strong>让偏倚的源头变得显而易见</strong>。（159）</li></ul><blockquote><p>《THE BOOK OF WHY: THE NEW SCIENCE OF CAUSE AND EFFECT》</p><p>——JUDEA PEARL AND DANA MACKENZIE</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;第五章-烟雾缭绕的争论：消除迷雾，澄清事实&quot;&gt;&lt;a href=&quot;#第五章-烟雾缭绕的争论：消除迷雾，澄清事实&quot; class=&quot;headerlink&quot; title=&quot;第五章 烟雾缭绕的争论：消除迷雾，澄清事实&quot;&gt;&lt;/a&gt;第五章 烟雾缭绕的争论：消除迷雾，澄清事实&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;CHAPTER 5 The Smoke-Filled Debate:  Clearing the Air&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Causality" scheme="https://flower48237.com/categories/Causality/"/>
    
    
    <category term="Causality" scheme="https://flower48237.com/tags/Causality/"/>
    
    <category term="因果推断" scheme="https://flower48237.com/tags/%E5%9B%A0%E6%9E%9C%E6%8E%A8%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title>《The Book of Why》 — Chapter6</title>
    <link href="https://flower48237.com/2021/09/28/The%20Book%20of%20Why%20-%20Chapter%20(6)/"/>
    <id>https://flower48237.com/2021/09/28/The%20Book%20of%20Why%20-%20Chapter%20(6)/</id>
    <published>2021-09-28T12:50:00.000Z</published>
    <updated>2021-09-28T12:50:36.310Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="第六章-大量的悖论⭐（实例）"><a href="#第六章-大量的悖论⭐（实例）" class="headerlink" title="第六章 大量的悖论⭐（实例）"></a>第六章 大量的悖论⭐（实例）</h3><blockquote><p>CHAPTER 6 — Paradoxes Galore!</p></blockquote><a id="more"></a><ul><li>出生体重悖论反映了因果关系和相关关系之间的张力，这种张力源自于二者处于因果关系之梯的两个不同层级上，又因为人类的直觉在因果逻辑下运作而数据遵从的则是概率和比例的逻辑而进一步加剧。（165）</li><li>当我们在一个领域所学到的规则误用到其他的领域时，悖论就出现了。（165）</li><li>因果悖论突出强调了直觉性的因果推理模式与概率统计逻辑相冲突的地方。（165）</li></ul><h4 id="令人费解的“蒙提·霍尔悖论”"><a href="#令人费解的“蒙提·霍尔悖论”" class="headerlink" title="令人费解的“蒙提·霍尔悖论”"></a>令人费解的“蒙提·霍尔悖论”</h4><ul><li><p>问题：三个门，两羊一车，选一个，主持人打开另外两个中有羊的一个，此时，换门是否更有利于赢得车？（166）</p></li><li><p>解决这一悖论的关键是，不仅需要考虑数据，也需要注意数据生成的过程。（167）</p></li><li><p>习惯“数据约简”而忽略数据的生成过程是不可取的。（168）</p></li><li><img src="C:\Users\Q\AppData\Roaming\Typora\typora-user-images\image-20210920194134974.png" alt="image-20210920194134974" style="zoom:50%;" /><p>上图为该悖论的因果图，“主持人打开的门”是一个对撞因子，一旦我们获得了关于这个变量的信息，图中所有的概率都变成了关于这一信息的条件概率。但是，当我们以对撞因子为条件时，就会在两个父节点之间制造出一种虚假的依存关系（伪相关）。（169）</p></li><li><p>贝叶斯分析的一个普遍主题：任何通过了威胁其有效性的测试的假设，其可能性都会变大。威胁越大，幸存下来的假设的可能性就越大。（170）</p></li></ul><h4 id="更多的对撞偏倚：伯克森悖论"><a href="#更多的对撞偏倚：伯克森悖论" class="headerlink" title="更多的对撞偏倚：伯克森悖论"></a>更多的对撞偏倚：伯克森悖论</h4><ul><li><p>问题：两种疾病即使在一般人群中彼此不存在实际联系，在医院的病人中也会形成某种似是而非的关联。（172）</p></li><li><p>同类型的悖论现象：扔硬币游戏，同时扔两个硬币100次，只在至少一次正面的情况下记录结果，根据这些记录，会发现两枚硬币的抛掷结果并不独立，每次当硬币1为反面落地时，硬币2必为正面落地。</p><p>事实上，这些结果是删除了所有两枚硬币都是背面朝上的结果后得到的，换句话说：对这个对撞因子进行了变量控制。（174）⭐</p></li><li><p>最纯粹的、最本质的意义上：我们观察到的相关就是一种错觉，我们选择哪些事件进入数据集同时忽略另一些事的做法给我们自己带来了错觉。（175）</p></li></ul><h4 id="辛普森悖论"><a href="#辛普森悖论" class="headerlink" title="辛普森悖论"></a>辛普森悖论</h4><ul><li>问题：BBG药物，服用药物对男性患者群体有害，对女性患者群体也有害，但对整体的患者群体有益。（176）</li><li>确凿性原则：假设无论事件C是否发生，某个行动都会增加某一结果的可能性，则该行动也将在我们不知道C是否发生的情况下增加这个结果的可能性，条件是该行动不改变C的概率。（181）</li><li>使用聚合数据或者分割数据，哪种做法更合适，取决于数据的生成过程。（182）</li><li>只有当每个子总体的相对比例在各群组之间一致的情况下，确凿性原则才起作用。（189）</li></ul><blockquote><p>《THE BOOK OF WHY: THE NEW SCIENCE OF CAUSE AND EFFECT》</p><p>——JUDEA PEARL AND DANA MACKENZIE</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;第六章-大量的悖论⭐（实例）&quot;&gt;&lt;a href=&quot;#第六章-大量的悖论⭐（实例）&quot; class=&quot;headerlink&quot; title=&quot;第六章 大量的悖论⭐（实例）&quot;&gt;&lt;/a&gt;第六章 大量的悖论⭐（实例）&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;CHAPTER 6 — Paradoxes Galore!&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Causality" scheme="https://flower48237.com/categories/Causality/"/>
    
    
    <category term="Causality" scheme="https://flower48237.com/tags/Causality/"/>
    
    <category term="因果推断" scheme="https://flower48237.com/tags/%E5%9B%A0%E6%9E%9C%E6%8E%A8%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title>《The Book of Why》 — Chapter3</title>
    <link href="https://flower48237.com/2021/09/27/The%20Book%20of%20Why%20-%20Chapter%20(3)/"/>
    <id>https://flower48237.com/2021/09/27/The%20Book%20of%20Why%20-%20Chapter%20(3)/</id>
    <published>2021-09-27T12:21:00.000Z</published>
    <updated>2021-09-27T12:25:53.334Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="第三章-从证据到因：当贝叶斯牧师遇见福尔摩斯先生"><a href="#第三章-从证据到因：当贝叶斯牧师遇见福尔摩斯先生" class="headerlink" title="第三章 从证据到因：当贝叶斯牧师遇见福尔摩斯先生"></a>第三章 从证据到因：当贝叶斯牧师遇见福尔摩斯先生</h3><blockquote><p>CHAPTER 3 — From Evidence to Causes: Reverend  Bayes Meets Mr. Holmes</p></blockquote><a id="more"></a><h4 id="电脑侦探波拿巴"><a href="#电脑侦探波拿巴" class="headerlink" title="电脑侦探波拿巴"></a>电脑侦探波拿巴</h4><ul><li>贝叶斯网络与因果图的关系很简单：因果图就是一个贝叶斯网络，其中的每个箭头都表示一个直接的因果关系，或者至少表明了存在某个因果关系的可能性。反过来，并不是所有的贝叶斯网络都是因果关系网络。而在很多实际应用中这一点并不重要。（75）</li></ul><h4 id="贝叶斯牧师与逆概率问题"><a href="#贝叶斯牧师与逆概率问题" class="headerlink" title="贝叶斯牧师与逆概率问题"></a>贝叶斯牧师与逆概率问题</h4><ul><li>贝叶斯的理论表明可以从一个果推断某个因的概率，即逆概率推理。从因到果是前向概率。（77）</li><li>数据对于因果不对称是不敏感的。（79）</li><li>贝叶斯法则在统计学中最重要的应用：可以在判断较为可靠的一个方向上直接估算出条件概率，并利用数学工具推导处在判断较为模糊的另一个方向上的概率。</li><li>还可以将贝叶斯法则看作一种方法，用以更新对某一特定假设的信念。（81）</li><li>“主观性”，有时被看作贝叶斯网络的一个缺点，但也有一些人认为这是贝叶斯推理的一个强大优势，它允许我们在数学上表达我们的个人经验，并以条理化、易懂的方式将其与数据结合起来。在普通直觉不起作用或情绪可能会导致我们误入歧途的情况下，贝叶斯网络能够引导我们进行正确的推理。（83）</li></ul><h4 id="从贝叶斯法则到贝叶斯网络"><a href="#从贝叶斯法则到贝叶斯网络" class="headerlink" title="从贝叶斯法则到贝叶斯网络"></a>从贝叶斯法则到贝叶斯网络</h4><ul><li>贝叶斯法则无可争议的优势：可以同时在诊断模式（结果推原因，逆概率）和预测模式（原因推结果，前向概率）中运行。（88）</li><li>任何人工智能都必须建立在模拟我们所知道的人类神经信息处理过程的基础上，并且不确定性下的机器推理必须借助类似的信息传递的体系结构来构建。信息是一个方向上的条件概率和另一个方向上的似然比。（89）</li></ul><h4 id="贝叶斯网络：应如何看待数据"><a href="#贝叶斯网络：应如何看待数据" class="headerlink" title="贝叶斯网络：应如何看待数据"></a>贝叶斯网络：应如何看待数据</h4><ul><li><p>贝叶斯的逆概率规则是一种形式作为简单的贝叶斯网络。（91）</p></li><li><p>贝叶斯法则告诉我们是如何逆转正向推理的过程，具体做法就是用先验概率×似然比。（91）</p></li><li><p>包含两个连接的三节点网络——“接合”，是所有贝叶斯网络（以及因果网络）的构建模块。（92-94）</p><ul><li><p>A—&gt;B—&gt;C ：链</p></li><li><p>A&lt;—B—&gt;C ：叉</p><p>B通常被视作A和C的共因，或混杂因子，<strong>混杂因子会使A和C在统计学上发生关联，即使他们之间没有直接的因果关系。</strong></p></li><li><p>A—&gt;B&lt;—C ：对撞</p><p>与“<strong>对撞偏倚</strong>”（“辩解效应”）有关</p></li></ul></li></ul><h4 id="我的行李箱在哪里？从亚琛到桑给巴尔"><a href="#我的行李箱在哪里？从亚琛到桑给巴尔" class="headerlink" title="我的行李箱在哪里？从亚琛到桑给巴尔"></a>我的行李箱在哪里？从亚琛到桑给巴尔</h4><ul><li>贝叶斯网络的两个方面：图示和条件概率表。（95）</li><li>图示以定性的方式描述了变量之间的关系，条件概率作为定量的输入可以使贝叶斯网络得到一个定量的结果。（95）</li></ul><h4 id="真实世界中的贝叶斯网络"><a href="#真实世界中的贝叶斯网络" class="headerlink" title="真实世界中的贝叶斯网络"></a>真实世界中的贝叶斯网络</h4><ul><li>贝叶斯网络一旦建立，就不需要对其进行干预，告诉它该如何评估新的数据片段。整个网络的更新可以很快完成。这个网络是一体化的，这意味着它作为一个整体对所有的新信息作出反应。（102-103）</li><li>贝叶斯网络的透明性使它有别于其他机器学习的模型，后者更倾向于制造高深莫测的“黑盒”。（103）</li><li>因果推断科学的一个目标就是创建更为顺畅的人机接口，比如将调查人员的直觉也纳入信念传播的计算过程。（103）</li></ul><h4 id="从贝叶斯网络到因果图⭐"><a href="#从贝叶斯网络到因果图⭐" class="headerlink" title="从贝叶斯网络到因果图⭐"></a>从贝叶斯网络到因果图⭐</h4><ul><li>从理论和实践的角度看，贝叶斯网络抓住了实现因果图与数据的交互的关键。贝叶斯网络的所有概率性质和在其基础上发展起来的信念传播算法在因果图中仍然有效。（106）</li><li>贝叶斯网络与因果图的主要区别在于他们的构造和用途。实际上，贝叶斯网络不过是一张巨大的概率表的简洁表示形式。（106）</li><li>因果图的假设不能是心血来潮地虚构，它必须经过数据地审查，并且是可证伪的。（107）</li><li>解读因果模型的另一种更加便捷的方法是假设实验。因果图中的每个箭头可以被看作一个假设实验的结果陈述。（107）</li><li>因果图的图形结构与它所代表的数据之间的关系，允许我们在不进行实际操作的情况下进行模拟调整。（108）</li><li>A &lt;- B -&gt; C，在<strong>不进行任何观测的情况下，A和C伪相关</strong>。（108）⭐</li></ul><blockquote><p>《THE BOOK OF WHY: THE NEW SCIENCE OF CAUSE AND EFFECT》</p><p>——JUDEA PEARL AND DANA MACKENZIE</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;第三章-从证据到因：当贝叶斯牧师遇见福尔摩斯先生&quot;&gt;&lt;a href=&quot;#第三章-从证据到因：当贝叶斯牧师遇见福尔摩斯先生&quot; class=&quot;headerlink&quot; title=&quot;第三章 从证据到因：当贝叶斯牧师遇见福尔摩斯先生&quot;&gt;&lt;/a&gt;第三章 从证据到因：当贝叶斯牧师遇见福尔摩斯先生&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;CHAPTER 3 — From Evidence to Causes: Reverend  Bayes Meets Mr. Holmes&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Causality" scheme="https://flower48237.com/categories/Causality/"/>
    
    
    <category term="Causality" scheme="https://flower48237.com/tags/Causality/"/>
    
    <category term="因果推断" scheme="https://flower48237.com/tags/%E5%9B%A0%E6%9E%9C%E6%8E%A8%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title>《The Book of Why》 — Chapter4</title>
    <link href="https://flower48237.com/2021/09/27/The%20Book%20of%20Why%20-%20Chapter%20(4)/"/>
    <id>https://flower48237.com/2021/09/27/The%20Book%20of%20Why%20-%20Chapter%20(4)/</id>
    <published>2021-09-27T12:21:00.000Z</published>
    <updated>2021-09-27T12:26:25.892Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="第四章-混杂和去混杂：或者，消灭潜伏变量"><a href="#第四章-混杂和去混杂：或者，消灭潜伏变量" class="headerlink" title="第四章 混杂和去混杂：或者，消灭潜伏变量"></a>第四章 混杂和去混杂：或者，消灭潜伏变量</h3><blockquote><p>CHAPTER 4 — Confounding and Deconfounding:  Or, Slaying the Lurking Variable</p></blockquote><a id="more"></a><ul><li><p>当一个变量同时影响到选择接受处理的对象以及实验结果时，混杂偏倚就产生了。（115）⭐</p></li><li><img src="C:\Users\Q\AppData\Roaming\Typora\typora-user-images\image-20210920193220443.png" alt="image-20210920193220443" style="zoom:33%;" /><p>如上图所示，位于叉接合中心的变量Z就是X和Y的<strong>混杂因子</strong>。真正的因果效应X-&gt;Y与由叉接合X&lt;-Z-&gt;Y诱导的X和Y之间的伪相关混合在一起。（115）</p></li><li><p>本章的目标之一就是从因果图的角度来解释，为什么随机对照实验能估计出X-&gt;Y的因果效应，同时免除混杂偏倚的影响。因果图使分析重心从混杂因子向<strong>去混杂因子</strong>的转变成为可能（117）</p></li><li><p>因果革命允许我们超越费舍尔的随机对照实验，通过非实验性研究推断因果效应，其主要途径就来自这种分析重点的转变。（117）</p></li><li><p>“后门准则”（back-door criterion）可以明确识别出因果图中哪些变量是去混因子。（118）</p></li><li><p>目前的普遍共识：（1）混杂需要，也具备一个因果解决方案；（2）因果图提供了一种完整的、系统的方法引领我们找到那个解决方案。（118）</p></li></ul><h4 id="对混杂的长期恐惧"><a href="#对混杂的长期恐惧" class="headerlink" title="对混杂的长期恐惧"></a>对混杂的长期恐惧</h4><ul><li>掌握既定结论背后的假设比试图用随机对照试验来规避这些假设更有价值。且随机对照试验本身也由局限性。（120）</li></ul><h4 id="对自然的巧妙询问：随机对照试验为何有效"><a href="#对自然的巧妙询问：随机对照试验为何有效" class="headerlink" title="对自然的巧妙询问：随机对照试验为何有效"></a>对自然的巧妙询问：随机对照试验为何有效</h4><h4 id="混杂的新范式"><a href="#混杂的新范式" class="headerlink" title="混杂的新范式"></a>混杂的新范式</h4><ul><li>已知条件概率P(Y | X)、X与Y之间的因果关系P(Y | do(X))，混杂可定义为导致P(Y | X) ≠ P(Y | do(X))，即两个概率出现差异的所有因素。（127）</li><li>“后门准则”将定义混杂、识别混杂因子和根据混杂因子进行统计调整这些问题变成了一个简单的过程。（133）</li></ul><h4 id="do算子和后门准则⭐（本节有很多图示例子可参考学习）"><a href="#do算子和后门准则⭐（本节有很多图示例子可参考学习）" class="headerlink" title="do算子和后门准则⭐（本节有很多图示例子可参考学习）"></a>do算子和后门准则⭐（本节有很多图示例子可参考学习）</h4><ul><li><p>可以将链接看作一个管道，找个管道将信息从起点X传递到终点Y。（133）</p></li><li><p>事实上，非因果路径是混杂的根源。（之前将混杂定义为任何使得P(Y | X) ≠ P(Y | do(X))的因素），do算子会清除指向X的所有箭头，这样它就可以防止有关X的任何信息在非因果方向流动。（133）</p></li><li><p>需要牢记的一条基本规则：（134）</p><p>控制一个变量的后代节点（或替代物）如同“部分地”控制变量本身；</p><p>控制一个中介物的某个后代节点意味着部分的关闭了信息管道；</p><p>控制一个对撞变量的某个后代节点意味着部分地打开了信息管道。</p></li><li><p>A&lt;—B&lt;—C—&gt;D&lt;—E—&gt;F—&gt;G&lt;—H—&gt;I—&gt;J</p><p>如上面的因果图，如果这条路径的一个接合被阻断，那么J就无法通过这条路径“找到”A。</p><p>因此有很多办法阻断A和J之间的信息流通：控制B、控制C、不控制D、控制E、控制F、不控制G、控制H、控制I等，并且只需要做到一项就足够了。这就是为什么常规的统计过程——控制我们可以测量的一切，造成了如此严重的误导。</p><p>事实上，对上图所示的路径来说，在不控制任何变量的前提下，这条路径本身就算被阻断的！D和G的对撞在没有任何外部帮助的情况下阻断了这条路径。而控制D和G将打开这条路径，使A和J能完成信息流通。（134）</p></li><li><p>更确切地说，后门准则（back-door criterion）定义为<strong>所有X和Y之间以指向X的箭头为开始的路径</strong>；如果阻断了后门路径（这些路径允许X和Y之间的伪相关信息在管道中流动），就完成了对X和Y的去混杂。</p><p>如果试图通过控制某一组变量Z来实现这一点，还需要确保Z的任何成员都不是X的后代，否则可能部分或完全地关闭这条X和Y之间地因果路径。（135）</p></li><li><p>“M偏倚”指出了传统方法的一个错误：仅仅因为某个变量与X和Y都相关就将该变量视为混杂因子是错误的。（137）</p></li><li><p><strong>混杂问题的完整解决方案是因果革命的主要两点之一</strong>。（140）</p></li><li><img src="C:\Users\Q\AppData\Roaming\Typora\typora-user-images\image-20210920193347790.png" alt="image-20210920193347790" style="zoom:33%;" /></li><li><img src="C:\Users\Q\AppData\Roaming\Typora\typora-user-images\image-20210920193428216.png" alt="image-20210920193428216" style="zoom:33%;" /><img src="C:\Users\Q\AppData\Roaming\Typora\typora-user-images\image-20210920193516109.png" alt="image-20210920193516109" style="zoom: 42%;" /></li></ul><blockquote><p>《THE BOOK OF WHY: THE NEW SCIENCE OF CAUSE AND EFFECT》</p><p>——JUDEA PEARL AND DANA MACKENZIE</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;第四章-混杂和去混杂：或者，消灭潜伏变量&quot;&gt;&lt;a href=&quot;#第四章-混杂和去混杂：或者，消灭潜伏变量&quot; class=&quot;headerlink&quot; title=&quot;第四章 混杂和去混杂：或者，消灭潜伏变量&quot;&gt;&lt;/a&gt;第四章 混杂和去混杂：或者，消灭潜伏变量&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;CHAPTER 4 — Confounding and Deconfounding:  Or, Slaying the Lurking Variable&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Causality" scheme="https://flower48237.com/categories/Causality/"/>
    
    
    <category term="Causality" scheme="https://flower48237.com/tags/Causality/"/>
    
    <category term="因果推断" scheme="https://flower48237.com/tags/%E5%9B%A0%E6%9E%9C%E6%8E%A8%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title>《The Book of Why》 — Preface &amp; Chapter1</title>
    <link href="https://flower48237.com/2021/09/26/The%20Book%20of%20Why%20-%20Chapter%20(1)/"/>
    <id>https://flower48237.com/2021/09/26/The%20Book%20of%20Why%20-%20Chapter%20(1)/</id>
    <published>2021-09-26T03:17:00.000Z</published>
    <updated>2021-09-27T12:21:56.590Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h3><blockquote><p>Preface</p></blockquote><a id="more"></a><ul><li>因果革命最重要的成果之一就是解释了如何在不实际实施干预的情况下预测干预效果。如果拥有一个因果模型，就可以在大部分情况下从未经干预处理的数据中预测干预的效果了。（XVI）</li><li>“反事实的算法化”是因果革命的另一项宝贵的成果。（XVII）</li><li>因果推断引擎是一种问题处理机器，他接收三种不同的输入——假设、问题、数据。（XVIII）</li><li>以因果模型的路径来表示变量之间的听从模式通常会导向数据中某种显而易见的模式或相关关系（也被称为可被验证的蕴涵），将D和L之间没有连接路径翻译成统计学语言，就是D和L相互独立，也就是说，发现D的存在不会改变L发生的可能性。（XX）</li><li>如果拥有一个因果模型，就可以在大部分情况下从未经干预处理的数据中预测干预的结果了。（XXIII）</li><li>第一章：因果关系之梯，观察、干预、反事实（XXIV）</li><li>第二章：发展历史</li><li>第三章：贝叶斯网络及实例</li><li>第四章：随机对照试验</li><li>第五章：因果论发展史重要节点</li><li>第六章：悖论</li><li>第七章：干预</li><li>第八章：反事实</li><li>第九章：中介</li><li>第十章：人类智能的自动化（强人工智能）</li></ul><h3 id="第一章-因果关系之梯"><a href="#第一章-因果关系之梯" class="headerlink" title="第一章 因果关系之梯"></a>第一章 因果关系之梯</h3><blockquote><p>CHAPTER 1 — The Ladder of Causation</p></blockquote><ul><li>没有哪台机器可以从原始数据中获得解释。对数据的解释需要借助外部推力。（4）</li><li>因果模型的一个关键特征：模块性（6）</li><li>因果图是因果推理引擎的计算核心（6）</li></ul><h4 id="因果关系的三个层级"><a href="#因果关系的三个层级" class="headerlink" title="因果关系的三个层级"></a>因果关系的三个层级</h4><blockquote><p>观察能力seeing、行动能力doing、想象能力imaging </p><p>观察、                    干预、                 反事实</p></blockquote><img src="C:\Users\Q\AppData\Roaming\Typora\typora-user-images\image-20210916214238294.png" alt="image-20210916214238294" style="zoom: 50%;" /><ul><li><p>关联 ： 观察寻找规律，如果观察到某一事件改变了观察到的另一个事件的可能性，则称这两个事件关联。（7）</p></li><li><p>因果关系之梯的第一层级要求我们基于被动观察做出预测（7）</p></li><li><p>相关分析和回归分析是典型的关联度量之法。（9）</p></li><li><p>强人工智能的目标是制造出拥有类人智能的机器，让它们能与人类交流并指导人类的探索方向。而深度学习只是让机器具备了高超的能力，而非智能，这种差异是巨大的，原因就在于后者缺少现实模型。（9）</p></li><li><p>干预涉及主动改变现状。（10）</p></li><li><p>无论数据集多大或者神经网络多深，只要使用的是被动收集的数据，都无法回答有关干预的问题。（10）</p></li><li><p>因果关系之梯第二层级的典型问题是：“如果我们实施……行动，将会怎样？”即我们改变环境会发生什么？记作P(Y|do(X))。另一个热门问题是怎么做。（11）</p></li><li><p>数据就是事实。（12）</p></li><li><p>反事实位于因果关系之梯的顶层。（13）</p><h4 id="迷你图灵测试"><a href="#迷你图灵测试" class="headerlink" title="迷你图灵测试"></a>迷你图灵测试</h4></li><li><p>无论何时，如果想使某件事发生，那么就删除指向该事件的所有箭头，之后继续按照逻辑规则进行分析，就好像那些箭头从未出现过一样。（19）</p></li><li><p>使某件事发生就意味着将它从所有其他影响因子中解放出来，并使它受限于唯一的影响因子——能强制其发生的那个因子。（19）</p></li><li><p>构建因果模型不仅仅是画箭头，箭头背后还隐藏着概率。（23）</p></li><li><p>通常情况下，因果图自身的结构就足以让我们推测出各种因果关系和反事实：简单的或复杂的，确定的或概率的，线性的或非线性的。（23）</p></li></ul><h4 id="论概率与因果关系"><a href="#论概率与因果关系" class="headerlink" title="论概率与因果关系"></a>论概率与因果关系</h4><ul><li>因果关系不能被简化为概率！（25）</li><li>概率提高这个概念确实不能单纯的用概率来表示。（27）</li><li>贝叶斯网络是一种关于不确定性的推理方法，它可以根据我们观察到的某些事实迅速推算出某些其他事实为真或为假的概率。（28）</li><li>贝叶斯网络适用于一个所有问题都被简化为概率或者变量间的关联程度的世界，他无法自动升级到因果关系之梯的第二层或第三层。（29）</li><li>作者的主要观点：概率能将我们对静态世界的信念进行编码，而因果论则告诉我们，当世界被改变时，无论改变是通过干预还是通过想象实现的，概率是否会发生改变以及如何改变。（29）</li></ul><blockquote><p>《THE BOOK OF WHY: THE NEW SCIENCE OF CAUSE AND EFFECT》</p><p> ——JUDEA PEARL AND DANA MACKENZIE</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Preface&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Causality" scheme="https://flower48237.com/categories/Causality/"/>
    
    
    <category term="Causality" scheme="https://flower48237.com/tags/Causality/"/>
    
    <category term="因果推断" scheme="https://flower48237.com/tags/%E5%9B%A0%E6%9E%9C%E6%8E%A8%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title>《The Book of Why》 — Chapter2</title>
    <link href="https://flower48237.com/2021/09/26/The%20Book%20of%20Why%20-%20Chapter%20(2)/"/>
    <id>https://flower48237.com/2021/09/26/The%20Book%20of%20Why%20-%20Chapter%20(2)/</id>
    <published>2021-09-26T03:17:00.000Z</published>
    <updated>2021-09-27T12:21:55.032Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="第二章-从海盗到豚鼠：因果推断的起源"><a href="#第二章-从海盗到豚鼠：因果推断的起源" class="headerlink" title="第二章 从海盗到豚鼠：因果推断的起源"></a>第二章 从海盗到豚鼠：因果推断的起源</h3><blockquote><p>Chapter2  — From Buccaneers to Guinea Pigs:  The Genesis of Causal Inference</p></blockquote><a id="more"></a><h4 id="高尔顿和被丢弃的探索"><a href="#高尔顿和被丢弃的探索" class="headerlink" title="高尔顿和被丢弃的探索"></a>高尔顿和被丢弃的探索</h4><h4 id="皮尔逊：狂热者的愤怒"><a href="#皮尔逊：狂热者的愤怒" class="headerlink" title="皮尔逊：狂热者的愤怒"></a>皮尔逊：狂热者的愤怒</h4><ul><li>使用因果透镜可知在某些情况下，正确的分析只能来自于聚合数据而非来自分组数据。因果推断的逻辑能够在事实上告诉我们应该信任哪个结果。（50）</li><li>休厄尔·赖特首次建立了一套根据数据回答因果关系的数学方法，被称为路径图或者路径分析。赖特首次证明了“相关关系不等于因果关系”这个判定应该让位于“某些相关关系确实意味着因果关系”。（53）</li></ul><h4 id="但它仍在动"><a href="#但它仍在动" class="headerlink" title="但它仍在动"></a>但它仍在动</h4><ul><li>因果关系绝不仅是针对数据的关系，在因果分析中，必须将对数据生成过程的理解体现出来，并以此得出初始数据不包含的内容。（63）</li><li>结构方程建模（SEM）（64）</li></ul><h4 id="从主观性到客观性——贝叶斯连接"><a href="#从主观性到客观性——贝叶斯连接" class="headerlink" title="从主观性到客观性——贝叶斯连接"></a>从主观性到客观性——贝叶斯连接</h4><ul><li>与相关性分析和大多数主流统计学不同，因果分析要求研究者<strong>做出主观判断</strong>。绘制的因果图是对于某个研究课题所涉及的因果过程拓扑结构的定性判断，在因果关系方面，睿智的主观性比任何客观性都更能阐明我们所处的这个真实世界。（67）</li><li>贝叶斯分析的原型：先验判断+新的证据-&gt;经过修正的判断。（67）</li><li>许多例子已经证明，随着数据量的增加，先验判断的影响会越来越小，乃至彻底消失，这就让我们最终得到的那个结论仍然是客观的。（68）</li></ul><blockquote><p>《THE BOOK OF WHY: THE NEW SCIENCE OF CAUSE AND EFFECT》</p><p>——JUDEA PEARL AND DANA MACKENZIE</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;第二章-从海盗到豚鼠：因果推断的起源&quot;&gt;&lt;a href=&quot;#第二章-从海盗到豚鼠：因果推断的起源&quot; class=&quot;headerlink&quot; title=&quot;第二章 从海盗到豚鼠：因果推断的起源&quot;&gt;&lt;/a&gt;第二章 从海盗到豚鼠：因果推断的起源&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Chapter2  — From Buccaneers to Guinea Pigs:  The Genesis of Causal Inference&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Causality" scheme="https://flower48237.com/categories/Causality/"/>
    
    
    <category term="Causality" scheme="https://flower48237.com/tags/Causality/"/>
    
    <category term="因果推断" scheme="https://flower48237.com/tags/%E5%9B%A0%E6%9E%9C%E6%8E%A8%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title>SQL学习：INDEX、DROP、ALTER、 AUTO INCREMENT</title>
    <link href="https://flower48237.com/2020/07/31/sql%E5%AD%A6%E4%B9%A00731-INDEX%E3%80%81DROP%E3%80%81ALTER%E3%80%81%20AUTO%20INCREMENT/"/>
    <id>https://flower48237.com/2020/07/31/sql%E5%AD%A6%E4%B9%A00731-INDEX%E3%80%81DROP%E3%80%81ALTER%E3%80%81%20AUTO%20INCREMENT/</id>
    <published>2020-07-31T10:02:00.000Z</published>
    <updated>2021-06-02T14:23:42.330Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>在不读取整个表的情况下，索引能更加快速地查找数据。用户无法看到索引，他们只能被用来提高查询效率。更新一个带有索引的表比更新一个不带索引的表花费更多时间，这是由于索引本身也需要更新导致的。因此，理想的做法是仅在经常被搜索的表上创建索引。</p><a id="more"></a><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">创建简单索引，允许重复</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> index_name</span><br><span class="line"><span class="keyword">ON</span> table_name (column_name);</span><br><span class="line"></span><br><span class="line">创建简单索引（在多个列上），允许重复</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> index_name</span><br><span class="line"><span class="keyword">ON</span> table_name (column_name1, column_name2);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">创建唯一索引，不允许重复，唯一索引意味着两个行不能拥有同一个索引值</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> index_name</span><br><span class="line"><span class="keyword">ON</span> table_name (column_name)</span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> PIndex</span><br><span class="line"><span class="keyword">ON</span> Persons (LastName);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> PIndex</span><br><span class="line"><span class="keyword">ON</span> Persons (LastName, FirstName);</span><br></pre></td></tr></table></figure><h1 id="DROP"><a href="#DROP" class="headerlink" title="DROP"></a>DROP</h1><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><p>通过DROP语句可以删除索引、表、数据库</p><h2 id="语法1-撤销索引-DROP-INDEX"><a href="#语法1-撤销索引-DROP-INDEX" class="headerlink" title="语法1 撤销索引 DROP INDEX"></a>语法1 撤销索引 DROP INDEX</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(Oracle)</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> index_name;</span><br></pre></td></tr></table></figure><h2 id="语法2-撤销表-DROP-TABLE"><a href="#语法2-撤销表-DROP-TABLE" class="headerlink" title="语法2 撤销表 DROP TABLE"></a>语法2 撤销表 DROP TABLE</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> table_name;</span><br></pre></td></tr></table></figure><h2 id="语法3-撤销数据库-DROP-DATABASE"><a href="#语法3-撤销数据库-DROP-DATABASE" class="headerlink" title="语法3 撤销数据库 DROP DATABASE"></a>语法3 撤销数据库 DROP DATABASE</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> database_name;</span><br></pre></td></tr></table></figure><h2 id="语法4-TRUNCATE-TABLE语句"><a href="#语法4-TRUNCATE-TABLE语句" class="headerlink" title="语法4 TRUNCATE TABLE语句"></a>语法4 TRUNCATE TABLE语句</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">只删除表中内容，不删除表</span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> table_name;</span><br></pre></td></tr></table></figure><h1 id="ALTER-TABLE"><a href="#ALTER-TABLE" class="headerlink" title="ALTER TABLE"></a>ALTER TABLE</h1><h2 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h2><p>ALTER TABLE 语句用于在已有的表中 添加、删除 或 修改 各个列。</p><h2 id="语法1-在表中添加列"><a href="#语法1-在表中添加列" class="headerlink" title="语法1 在表中添加列"></a>语法1 在表中添加列</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line"><span class="keyword">ADD</span> column_name data_type;</span><br></pre></td></tr></table></figure><h2 id="语法2-删除表中的列"><a href="#语法2-删除表中的列" class="headerlink" title="语法2 删除表中的列"></a>语法2 删除表中的列</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> column_name;</span><br></pre></td></tr></table></figure><h2 id="语法3-改变表中的数据类中"><a href="#语法3-改变表中的数据类中" class="headerlink" title="语法3 改变表中的数据类中"></a>语法3 改变表中的数据类中</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line"><span class="keyword">MODIFY</span> column_name data_type;</span><br></pre></td></tr></table></figure><h2 id="举例Persons表"><a href="#举例Persons表" class="headerlink" title="举例Persons表"></a>举例Persons表</h2><table><thead><tr><th>P_id</th><th>LastName</th><th>FirstName</th><th>City</th></tr></thead><tbody><tr><td>1</td><td>san</td><td>zhang</td><td>BeiJing</td></tr><tr><td>2</td><td>si</td><td>li</td><td>ShangHai</td></tr><tr><td>3</td><td>wu</td><td>wang</td><td>GuangZhou</td></tr></tbody></table><h2 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在 "Persons" 表中添加一个名为 "DateOfBirth" 的列</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">ADD</span> DateOfBirth <span class="built_in">date</span>;</span><br></pre></td></tr></table></figure><p>操作后的表如下：<br>| P_id | LastName | FirstName | City | DateOfBirth |<br>|–|–|–|–|–|<br>| 1 | san | zhang | BeiJing ||<br>| 2 | si | li | ShangHai ||<br>| 3 | wu | wang | GuangZhou ||</p><h2 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">改变 "Persons" 表中 "DateOfBirth" 列的数据类型</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">MODIFY</span> DateOfBirth <span class="keyword">year</span>;</span><br></pre></td></tr></table></figure><h2 id="实例3"><a href="#实例3" class="headerlink" title="实例3"></a>实例3</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">删除 "Person" 表中的 "DateOfBirth" 列</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> DataOfBirth;</span><br></pre></td></tr></table></figure><p>操作后的表如下：<br>| P_id | LastName | FirstName | City |<br>|–|–|–|–|<br>| 1 | san | zhang | BeiJing |<br>| 2 | si | li | ShangHai |<br>| 3 | wu | wang | GuangZhou |</p><h1 id="AUTO-INCREMENT-字段"><a href="#AUTO-INCREMENT-字段" class="headerlink" title="AUTO INCREMENT 字段"></a>AUTO INCREMENT 字段</h1><h2 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h2><p>我们通常希望在每次插入新记录时，自动地创建主键字段的值。<br>AUTO INCREMENT 字段可以在新记录插入到表中的时候生成一个唯一的数字</p><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">在 Oracle 中，必须通过 sequence 对象（该对象生成数字序列）创建 AUTO INCREMENT 字段:</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">SEQUENCE</span> seq_person</span><br><span class="line"><span class="keyword">MINVALUE</span>        <span class="number">1</span></span><br><span class="line"><span class="keyword">START</span> <span class="keyword">WITH</span>      <span class="number">1</span></span><br><span class="line"><span class="keyword">INCREMENT</span> <span class="keyword">BY</span>    <span class="number">1</span></span><br><span class="line"><span class="keyword">CACHE</span>           <span class="number">10</span></span><br></pre></td></tr></table></figure><p>上面的代码创建一个名为 seq_person 的 sequence 对象，它以1起始且以 1 为单位递增。该对象缓存10个值以提高性能。cache选项规定了为了提高访问速度要存储多少个序列值。</p><h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">要在 "Persons" 表中插入新记录，我们必须使用 nextval 函数（该函数从 seq_person 序列中取回下一个值）：</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Persons (<span class="keyword">ID</span>,FirstName,LastName)</span><br><span class="line"><span class="keyword">VALUES</span> (seq_person.nextval,<span class="string">'Lars'</span>,<span class="string">'Monsen'</span>)</span><br></pre></td></tr></table></figure><p>上面的 SQL 语句会在 “Persons” 表中插入一条新记录。<br>“ID” 列会被赋值为来自 seq_person 序列的下一个数字，所以使用了nextval函数；<br>“FirstName”列 会被设置为 “Lars”；”LastName” 列会被设置为 “Monsen”。</p><h1 id="VIEW-试图"><a href="#VIEW-试图" class="headerlink" title="VIEW(试图)"></a>VIEW(试图)</h1><h2 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h2><p>视图是可视化的表，下面主要介绍怎样创建、更新和删除视图</p><h2 id="创建视图-CREATE-VIEW"><a href="#创建视图-CREATE-VIEW" class="headerlink" title="创建视图 CREATE　VIEW"></a>创建视图 CREATE　VIEW</h2><h3 id="语法1-创建视图"><a href="#语法1-创建视图" class="headerlink" title="语法1 创建视图"></a>语法1 创建视图</h3><p>视图是基于SQL语句的结果集的可视化的表。</p><p>视图包含行和列，像一个真实的表（实际上并不是）。视图中的字段就是来自一个或多个数据库中的真实的表中的字段。</p><p>可以向视图添加WHERE语句、JOIN语句以及SQL函数，也可以呈现数据，就像这些数据来自于某个单一的表一样。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> view_name <span class="keyword">AS</span> <span class="comment">-- 创建 -- </span></span><br><span class="line"><span class="keyword">SELECT</span> column_name(s)    </span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> condition;</span><br></pre></td></tr></table></figure><blockquote><p>视图总是显示最新的数据，每次查询视图时，数据库引擎通过使用视图的SQL语句重建数据。</p></blockquote><h3 id="实例1-创建视图"><a href="#实例1-创建视图" class="headerlink" title="实例1 创建视图"></a>实例1 创建视图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">视图 &quot;Current Product List&quot; 会从 &quot;Products&quot; 表列出所有正在使用的产品</span><br><span class="line"></span><br><span class="line">CREATE VIEW [Current Product List] AS</span><br><span class="line">SELECT ProductID, ProductName</span><br><span class="line">FROM Products</span><br><span class="line">WHERE Discontinued&#x3D;No;</span><br></pre></td></tr></table></figure><h3 id="实例2-查询实例1中的视图"><a href="#实例2-查询实例1中的视图" class="headerlink" title="实例2 查询实例1中的视图"></a>实例2 查询实例1中的视图</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * </span><br><span class="line"><span class="keyword">FROM</span> [<span class="keyword">Current</span> Product <span class="keyword">List</span>];</span><br></pre></td></tr></table></figure><h2 id="更新视图-REPLACE-VIEW"><a href="#更新视图-REPLACE-VIEW" class="headerlink" title="更新视图 REPLACE VIEW"></a>更新视图 REPLACE VIEW</h2><h3 id="语法2"><a href="#语法2" class="headerlink" title="语法2"></a>语法2</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">VIEW</span> view_name <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> condition;</span><br></pre></td></tr></table></figure><h3 id="实例3-1"><a href="#实例3-1" class="headerlink" title="实例3"></a>实例3</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">向 "Current Product List" 视图添加 "Category" 列</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> [<span class="keyword">Current</span> Product <span class="keyword">List</span>] <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> ProductID, ProductName, <span class="keyword">Category</span></span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> Discontinued=<span class="keyword">No</span></span><br></pre></td></tr></table></figure><h2 id="撤销视图-DROP-VIEW"><a href="#撤销视图-DROP-VIEW" class="headerlink" title="撤销视图 DROP VIEW"></a>撤销视图 DROP VIEW</h2><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> view_name</span><br></pre></td></tr></table></figure><h1 id="NULL-值"><a href="#NULL-值" class="headerlink" title="NULL 值"></a>NULL 值</h1><h2 id="介绍-5"><a href="#介绍-5" class="headerlink" title="介绍"></a>介绍</h2><p>NULL值代表遗漏的未知数据。表的列默认是可以存放NULL值的。<br>下面介绍 IS NULL 和 IS NOT NULL 操作符。</p><h2 id="NULL-值-1"><a href="#NULL-值-1" class="headerlink" title="NULL 值"></a>NULL 值</h2><h3 id="介绍-6"><a href="#介绍-6" class="headerlink" title="介绍"></a>介绍</h3><ul><li><p>如果表中的某个列是可选的，那么我们可以在不向该列添加值的情况下，插入新记录或更新已有的记录。这意味着该字段将以 NULL值的形式来保存。</p></li><li><p>NULL 值的处理方式与其他值不同。</p></li><li><p>NULL 用作未知的 或 不适用 的 值 的 占位符。</p></li><li><p>无法比较 NULL 和 0，因为它们不等价。</p></li><li><p>也无法使用比较运算符来测试 NULL 值，比如 =、&lt; 或 &lt;&gt;。</p></li><li><p>必须使用 IS NULL 和 IS NOT NULL 操作符。</p></li></ul><h3 id="实例1-IS-NULL"><a href="#实例1-IS-NULL" class="headerlink" title="实例1 IS NULL"></a>实例1 IS NULL</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> LastName, FirstName, Address <span class="keyword">FROM</span> Persons</span><br><span class="line"><span class="keyword">WHERE</span> Address <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><h3 id="实例2-IS-NOT-NULL"><a href="#实例2-IS-NOT-NULL" class="headerlink" title="实例2 IS NOT NULL"></a>实例2 IS NOT NULL</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> LastName, FirstName, Address <span class="keyword">FROM</span> Persons</span><br><span class="line"><span class="keyword">WHERE</span> Address <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;创建索引&quot;&gt;&lt;a href=&quot;#创建索引&quot; class=&quot;headerlink&quot; title=&quot;创建索引&quot;&gt;&lt;/a&gt;创建索引&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;在不读取整个表的情况下，索引能更加快速地查找数据。用户无法看到索引，他们只能被用来提高查询效率。更新一个带有索引的表比更新一个不带索引的表花费更多时间，这是由于索引本身也需要更新导致的。因此，理想的做法是仅在经常被搜索的表上创建索引。&lt;/p&gt;</summary>
    
    
    
    <category term="SQL" scheme="https://flower48237.com/categories/SQL/"/>
    
    
    <category term="SQL" scheme="https://flower48237.com/tags/SQL/"/>
    
    <category term="基础" scheme="https://flower48237.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>SQL学习：CONSTRAINTS</title>
    <link href="https://flower48237.com/2020/07/30/sql%E5%AD%A6%E4%B9%A00730-Constraints%EF%BC%88%E7%BA%A6%E6%9D%9F%EF%BC%89/"/>
    <id>https://flower48237.com/2020/07/30/sql%E5%AD%A6%E4%B9%A00730-Constraints%EF%BC%88%E7%BA%A6%E6%9D%9F%EF%BC%89/</id>
    <published>2020-07-30T10:02:00.000Z</published>
    <updated>2021-09-27T12:20:05.408Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>SQL 约束用于规定表中的数据规则。</p><p>如果存在违反约束的数据行为，行为会被约束终止。</p><p>约束可以在创建表时规定（通过 CREATE TABLE 语句）；</p><p>或者在表创建之后规定（通过 ALTER TABLE 语句）。</p><h2 id="语法（CREATE-TABLE-CONSTRAINT）"><a href="#语法（CREATE-TABLE-CONSTRAINT）" class="headerlink" title="语法（CREATE TABLE + CONSTRAINT）"></a>语法（CREATE TABLE + CONSTRAINT）</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line">(</span><br><span class="line">column_name1 data_type(<span class="keyword">size</span>) constraint_name,</span><br><span class="line">column_name2 data_type(<span class="keyword">size</span>) constraint_name,</span><br><span class="line">column_name3 data_type(<span class="keyword">size</span>) constraint_name,</span><br><span class="line">....</span><br><span class="line">);</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="在-SQL-中，有以下6个约束："><a href="#在-SQL-中，有以下6个约束：" class="headerlink" title="在 SQL 中，有以下6个约束："></a>在 SQL 中，有以下6个约束：</h2><ul><li>NOT NULL          - 指示某列不能存储 NULL 值。</li><li>UNIQUE            - 保证某列的每行必须有唯一的值，独一无二的值。</li><li>PRIMARY KEY(主键) - NOT NULL和 UNIQUE的结合。确保某列（或两个列多个列的结合）有唯一标识，有助于更容易更快速地找到表中的一个特定的记录。</li><li>FOREIGN KEY(外键) - 保证一个表中的数据匹配另一个表中的值的参照完整性。</li><li>CHECK             - 保证列中的值符合指定的条件。</li><li>DEFAULT           - 规定没有给列赋值时的默认值。</li></ul><h2 id="NOT-NULL-约束"><a href="#NOT-NULL-约束" class="headerlink" title="NOT NULL 约束"></a>NOT NULL 约束</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>在默认的情况下，表的列 是接受 NULL 值的，但NOT NULL约束强制该列不接受 NULL值，强制字段始终包含非空值。如果不向字段添加值，就无法插入或更新记录。</p><h3 id="实例1-创建表时定义not-null约束"><a href="#实例1-创建表时定义not-null约束" class="headerlink" title="实例1 创建表时定义not null约束"></a>实例1 创建表时定义not null约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">下面的 SQL 语句强制 "ID" 列、 "LastName" 列以及 "FirstName" 列不能为NULL。</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons (</span><br><span class="line">    <span class="keyword">ID</span>          <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    LastName    <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    FirstName   <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    Age         <span class="built_in">int</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="实例2-在已经存在的表中添加-NOT-NULL-约束"><a href="#实例2-在已经存在的表中添加-NOT-NULL-约束" class="headerlink" title="实例2 在已经存在的表中添加 NOT NULL 约束"></a>实例2 在已经存在的表中添加 NOT NULL 约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在已创建的Persons表的 "Age" 字段中 添加 NOT NULL 约束</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">MODIFY</span> Age <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><h3 id="实例3-删除-NOT-NULL-约束"><a href="#实例3-删除-NOT-NULL-约束" class="headerlink" title="实例3 删除 NOT NULL 约束"></a>实例3 删除 NOT NULL 约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在一个已创建的表的 "Age" 字段中删除 NOT NULL 约束</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">MODIFY</span> Age <span class="built_in">int</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><h2 id="UNIQUE-约束"><a href="#UNIQUE-约束" class="headerlink" title="UNIQUE 约束"></a>UNIQUE 约束</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><ul><li><p>UNIQUE 约束唯一标识数据库表中的每条记录。</p></li><li><p>UNIQUE 和 PRIMARY KEY 约束均为列或列集合提供了唯一性的保证。</p></li><li><p>PRIMARY KEY 约束拥有自动定义的 UNIQUE 约束。</p></li><li><p>每个表可以有多个 UNIQUE 约束，但是每个表只能有一个 PRIMARY KEY 约束。</p></li></ul><h3 id="实例1-创建表时的UNIQUE约束"><a href="#实例1-创建表时的UNIQUE约束" class="headerlink" title="实例1 创建表时的UNIQUE约束"></a>实例1 创建表时的UNIQUE约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">(</span><br><span class="line">P_Id        <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span>,       <span class="comment">-- 直接说明了是UNIQUE -- </span></span><br><span class="line">LastName    <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">FirstName   <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">Address     <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">City        <span class="built_in">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">命名 UNIQUE 约束，并定义多个列的 UNIQUE 约束</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">(</span><br><span class="line">P_Id        <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">LastName    <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">FirstName   <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">Address     <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">City        <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="keyword">CONSTRAINT</span>  uc_PersonID <span class="keyword">UNIQUE</span> (P_Id, LastName)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="实例2-更改表时的UNIQUE约束"><a href="#实例2-更改表时的UNIQUE约束" class="headerlink" title="实例2 更改表时的UNIQUE约束"></a>实例2 更改表时的UNIQUE约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">表Persons已经存在，需要在P_ID列创建UNIQUE约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> (P_ID);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">表Persons已经存在，需要重命名UNIQE 约束，并定义多个列的约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> uc_PersonID (P_ID, LastName);</span><br></pre></td></tr></table></figure><h3 id="实例3-撤销UNIQUE约束"><a href="#实例3-撤销UNIQUE约束" class="headerlink" title="实例3 撤销UNIQUE约束"></a>实例3 撤销UNIQUE约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> uc_Person_ID;</span><br></pre></td></tr></table></figure><h2 id="PRIMARY-KEY-主键-约束"><a href="#PRIMARY-KEY-主键-约束" class="headerlink" title="PRIMARY KEY (主键) 约束"></a>PRIMARY KEY (主键) 约束</h2><h3 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h3><ul><li>PRIMARY KEY约束 唯一标识数据库表中的每条记录。</li><li>主键必须包含唯一的值。</li><li>主键列不能包含 NULL 值。</li><li>每个表都有且只能有一个主键。</li></ul><h3 id="实例1-创建表时的PRIMARY-约束"><a href="#实例1-创建表时的PRIMARY-约束" class="headerlink" title="实例1 创建表时的PRIMARY 约束"></a>实例1 创建表时的PRIMARY 约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">在 "Persons" 表创建时在 "P_Id" 列上创建 PRIMARY KEY 约束</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons(</span><br><span class="line">P_Id        <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span>,  <span class="comment">-- 主键定义 -- </span></span><br><span class="line">LastName    <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">FirstName   <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">Address     <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">City        <span class="built_in">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">在建表的同时命名 PRIMARY KEY 约束，并定义多个列的 PRIMARY KEY 约束</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">(</span><br><span class="line">P_Id        <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">LastName    <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">FirstName   <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">Address     <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">City        <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="keyword">CONSTRAINT</span>  pk_PersonID PRIMARY <span class="keyword">KEY</span> (P_Id,LastName)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="实例2-更改表时的-PRIMARY-约束"><a href="#实例2-更改表时的-PRIMARY-约束" class="headerlink" title="实例2 更改表时的 PRIMARY 约束"></a>实例2 更改表时的 PRIMARY 约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">表Persons 已经被创建，需在 "P_Id" 列创建 PRIMARY KEY 约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">ADD</span> PRIMARY <span class="keyword">KEY</span> (P_Id);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">需要命名 PRIMARY KEY 约束，并定义多个列的 PRIMARY KEY 约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> pk_PersonID PRIMARY <span class="keyword">KEY</span> (P_Id,LastName);</span><br></pre></td></tr></table></figure><blockquote><p>注意事项：使用 ALTER TABLE 语句添加主键的时候，必须把主键列声明为不包含 NULL 值（在表首次创建时）。</p></blockquote><h3 id="实例3-撤销-PRIMARY-KEY-约束"><a href="#实例3-撤销-PRIMARY-KEY-约束" class="headerlink" title="实例3 撤销 PRIMARY KEY 约束"></a>实例3 撤销 PRIMARY KEY 约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> pk_PersonID;</span><br></pre></td></tr></table></figure><h2 id="FOREIGN-KEY-外键约束"><a href="#FOREIGN-KEY-外键约束" class="headerlink" title="FOREIGN KEY (外键约束)"></a>FOREIGN KEY (外键约束)</h2><h3 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h3><ul><li>一个表中的 FOREIGN KEY 指向另一个表中的 UNIQUE KEY。</li><li>FOREIGN KEY 约束用于预防破坏表之间连接的行为。</li><li>FOREIGN KEY 约束能防止非法数据插入外键列，因为它必须是它指向的那个表中的值之一。</li></ul><h3 id="实例1-创建表时的-FOREIGN-KEY-约束"><a href="#实例1-创建表时的-FOREIGN-KEY-约束" class="headerlink" title="实例1 创建表时的 FOREIGN KEY 约束"></a>实例1 创建表时的 FOREIGN KEY 约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">下面的 SQL 在 "Orders" 表创建时在 "P_Id" 列上创建 FOREIGN KEY 约束</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Orders</span><br><span class="line">(</span><br><span class="line">O_Id    <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">OrderNo <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">P_Id    <span class="built_in">int</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> <span class="keyword">REFERENCES</span> Persons(P_Id) <span class="comment">-- 外键定义 -- </span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">命名 FOREIGN KEY 约束，并定义多个列的 FOREIGN KEY 约束</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Orders</span><br><span class="line">(</span><br><span class="line">O_Id    <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">OrderNo <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">P_Id    <span class="built_in">int</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (O_Id),</span><br><span class="line"><span class="keyword">CONSTRAINT</span> fk_PerOrders <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (P_Id) <span class="keyword">REFERENCES</span> Persons(P_Id) </span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="实例2-修改表时的-FOREIGN-KEY-约束"><a href="#实例2-修改表时的-FOREIGN-KEY-约束" class="headerlink" title="实例2 修改表时的 FOREIGN KEY 约束"></a>实例2 修改表时的 FOREIGN KEY 约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">已经创建"Orders"表，如果需要在 "P_Id" 列创建 FOREIGN KEY 约束</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Orders</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (P_Id) <span class="keyword">REFERENCES</span> Persons(P_Id); <span class="comment">-- 外键定义 --</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">命名 FOREIGN KEY 约束，并定义多个列的 FOREIGN KEY 约束</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Orders</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_PerOrders <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (P_Id) <span class="keyword">REFERENCES</span> Persons(P_Id);</span><br></pre></td></tr></table></figure><h3 id="实例3-撤销-FOREIGN-KEY-约束"><a href="#实例3-撤销-FOREIGN-KEY-约束" class="headerlink" title="实例3 撤销 FOREIGN KEY 约束"></a>实例3 撤销 FOREIGN KEY 约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Orders</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> fk_PerOrders</span><br></pre></td></tr></table></figure><blockquote><p>在创建外键约束时，必须先创建外键约束所依赖的表，并且该列为该表的主键</p></blockquote><h2 id="notes："><a href="#notes：" class="headerlink" title="notes："></a>notes：</h2><ul><li><p>子表：谁创建外键谁就是子表</p></li><li><p>父表：这个外键所依赖的表</p></li></ul><h2 id="CHECK-约束"><a href="#CHECK-约束" class="headerlink" title="CHECK 约束"></a>CHECK 约束</h2><h3 id="介绍-5"><a href="#介绍-5" class="headerlink" title="介绍"></a>介绍</h3><p>CHECK 约束用于限制列中的值的范围。</p><p>如果对单个列定义CHECK约束，那么该列只允许存在特定的值。</p><p>如果对一个表定义CHECK约束，那么此约束会基于行中其他列的值在特定的列中对值进行限制。</p><h3 id="实例1-创建表时的-CHECK-约束"><a href="#实例1-创建表时的-CHECK-约束" class="headerlink" title="实例1 创建表时的 CHECK 约束"></a>实例1 创建表时的 CHECK 约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">要求： 创建"Persons" 时，在 "P_Id" 列上创建 <span class="keyword">CHECK</span> 约束。</span><br><span class="line"><span class="keyword">CHECK</span> 约束规定 <span class="string">"P_Id"</span> 列只能存在大于 <span class="number">0</span> 的整数。</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">(</span><br><span class="line">P_Id        <span class="built_in">int</span>             <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">CHECK</span> (P_Id &gt; <span class="number">0</span>), <span class="comment">-- check定义 --</span></span><br><span class="line">LastName    <span class="built_in">varchar</span>(<span class="number">255</span>)    <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">FirstName   <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">Address     <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">City        <span class="built_in">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">命名 <span class="keyword">CHECK</span> 约束，并定义多个列的 <span class="keyword">CHECK</span> 约束</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">(</span><br><span class="line">P_Id        <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">LastName    <span class="built_in">varchar</span>(<span class="number">255</span>)    <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">FirstName   <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">Address     <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">City        <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="keyword">CONSTRAINT</span>  chk_Person <span class="keyword">CHECK</span> (P_Id &gt; <span class="number">0</span> <span class="keyword">AND</span> City = <span class="string">'QingDao'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="实例2-修改表时的-CHECK-约束"><a href="#实例2-修改表时的-CHECK-约束" class="headerlink" title="实例2 修改表时的 CHECK 约束"></a>实例2 修改表时的 CHECK 约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Person表已创建，在 "P_Id" 列创建 <span class="keyword">CHECK</span> 约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CHECK</span> (P_Id &gt; <span class="number">0</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">命名 <span class="keyword">CHECK</span> 约束，并定义多个列的 <span class="keyword">CHECK</span> 约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CHECK</span> chk_Person <span class="keyword">CHECK</span> (P_Id &gt; <span class="number">0</span> <span class="keyword">AND</span> City = <span class="string">'Sandnes'</span>);</span><br></pre></td></tr></table></figure><h3 id="实例3-撤销-CHECK-约束"><a href="#实例3-撤销-CHECK-约束" class="headerlink" title="实例3 撤销 CHECK 约束"></a>实例3 撤销 CHECK 约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> chk_Person;</span><br></pre></td></tr></table></figure><h2 id="DEFAULT-约束"><a href="#DEFAULT-约束" class="headerlink" title="DEFAULT 约束"></a>DEFAULT 约束</h2><h3 id="介绍-6"><a href="#介绍-6" class="headerlink" title="介绍"></a>介绍</h3><p>DEFAULT 约束用于向列中插入默认值。如果没有规定其他的值，那么会将默认值添加到所有的新记录。</p><h3 id="实例1-创建表时的DEFAULT约束"><a href="#实例1-创建表时的DEFAULT约束" class="headerlink" title="实例1 创建表时的DEFAULT约束"></a>实例1 创建表时的DEFAULT约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">创建"Persons" 表时，在 "City" 列上创建 DEFAULT 约束</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">(</span><br><span class="line">    P_Id        <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    LastName    <span class="built_in">varchar</span>(<span class="number">255</span>)    <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    FirstName   <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    Address     <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    City        <span class="built_in">varchar</span>(<span class="number">255</span>)    <span class="keyword">DEFAULT</span> <span class="string">'QingDao'</span> <span class="comment">-- DEFAULT约束定义 -- </span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="实例2-创建表时的DEFAULT约束"><a href="#实例2-创建表时的DEFAULT约束" class="headerlink" title="实例2 创建表时的DEFAULT约束"></a>实例2 创建表时的DEFAULT约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Persons表已经被创建，在 "City" 列创建 DEFAULT 约束</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Person</span><br><span class="line"><span class="keyword">MODIFY</span> City <span class="keyword">DEFAULT</span> <span class="string">'QingDao'</span>;</span><br></pre></td></tr></table></figure><h3 id="实例3-创建表时的DEFAULT约束"><a href="#实例3-创建表时的DEFAULT约束" class="headerlink" title="实例3 创建表时的DEFAULT约束"></a>实例3 创建表时的DEFAULT约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> City <span class="keyword">DROP</span> <span class="keyword">DEFAULT</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;约束&quot;&gt;&lt;a href=&quot;#约束&quot; class=&quot;headerlink&quot; title=&quot;约束&quot;&gt;&lt;/a&gt;约束&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;SQL 约束用于规定表中的数据规则。&lt;/p&gt;
&lt;p&gt;如果存在违反约束的数据行为，行为会被约束终止。&lt;/p&gt;
&lt;p&gt;约束可以在创建表时规定（通过 CREATE TABLE 语句）；&lt;/p&gt;
&lt;p&gt;或者在表创建之后规定（通过 ALTER TABLE 语句）。&lt;/p&gt;
&lt;h2 id=&quot;语法（CREATE-TABLE-CONSTRAINT）&quot;&gt;&lt;a href=&quot;#语法（CREATE-TABLE-CONSTRAINT）&quot; class=&quot;headerlink&quot; title=&quot;语法（CREATE TABLE + CONSTRAINT）&quot;&gt;&lt;/a&gt;语法（CREATE TABLE + CONSTRAINT）&lt;/h2&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; table_name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;column_name1 data_type(&lt;span class=&quot;keyword&quot;&gt;size&lt;/span&gt;) constraint_name,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;column_name2 data_type(&lt;span class=&quot;keyword&quot;&gt;size&lt;/span&gt;) constraint_name,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;column_name3 data_type(&lt;span class=&quot;keyword&quot;&gt;size&lt;/span&gt;) constraint_name,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;....&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="SQL" scheme="https://flower48237.com/categories/SQL/"/>
    
    
    <category term="SQL" scheme="https://flower48237.com/tags/SQL/"/>
    
    <category term="操作符" scheme="https://flower48237.com/tags/%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>SQL学习：增删改查</title>
    <link href="https://flower48237.com/2020/07/29/sql%E5%AD%A6%E4%B9%A00722-%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    <id>https://flower48237.com/2020/07/29/sql%E5%AD%A6%E4%B9%A00722-%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</id>
    <published>2020-07-29T10:02:00.000Z</published>
    <updated>2021-06-02T14:22:01.656Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>SELECT 语句用于从数据库中选取数据。</li><li>结果被存储在一个结果表中，称为结果集。<a id="more"></a><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name,column_name</span><br><span class="line">FROM table_name;</span><br></pre></td></tr></table></figure></li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT name,country FROM Store;</span><br></pre></td></tr></table></figure><h1 id="SELECT-DISTINCT"><a href="#SELECT-DISTINCT" class="headerlink" title="SELECT DISTINCT"></a>SELECT DISTINCT</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><ul><li>在表中，一个列可能会包含多个重复值，有时也许希望仅仅列出不同（distinct）的值。</li><li>DISTINCT 关键词用于返回唯一不同的值。</li></ul><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT column_name,column_name</span><br><span class="line">FROM table_name;</span><br></pre></td></tr></table></figure><h1 id="WHERE"><a href="#WHERE" class="headerlink" title="WHERE"></a>WHERE</h1><ul><li>WHERE 子句用于过滤记录。</li><li>用于提取满足指定条件的记录。</li></ul><h2 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name,column_name</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE column_name operator value;</span><br></pre></td></tr></table></figure><h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Store WHERE country&#x3D;&#39;China&#39;;</span><br></pre></td></tr></table></figure><h2 id="SQL-中的opreator运算符"><a href="#SQL-中的opreator运算符" class="headerlink" title="SQL 中的opreator运算符"></a>SQL 中的opreator运算符</h2><table><thead><tr><th>运算符</th><th>含义</th></tr></thead><tbody><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt; or !=</td><td>不等于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>等于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>is null</td><td>空值</td></tr><tr><td>BETWEEN</td><td>在某个范围内</td></tr><tr><td>LIKE</td><td>搜索某种模式</td></tr><tr><td>IN</td><td>指定针对某个列的多个可能值</td></tr><tr><td><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">examples:</span><br><span class="line"></span><br><span class="line">Select * from emp where comm is null;</span><br><span class="line">Select * from emp where sal between 1500 and 3000;</span><br><span class="line">Select * from emp where sal in (5000,3000,1500);</span><br><span class="line">Select * from emp where ename like &#39;M%&#39;;</span><br><span class="line">查询 EMP 表中 Ename 列中有 M 的值，M 为要查询内容中的模糊信息。</span><br><span class="line">% 表示多个字值，_ 下划线表示一个字符；</span><br><span class="line">M% : 为能配符，正则表达式，表示的意思为模糊查询信息为 M 开头的。</span><br><span class="line">%M% : 表示查询包含M的所有内容。</span><br><span class="line">%M_ : 表示查询以M在倒数第二位的所有内容。</span><br></pre></td></tr></table></figure></td><td></td></tr><tr><td>## 补充</td><td></td></tr><tr><td>+ SQL 使用单引号来环绕文本值。</td><td></td></tr><tr><td>+ 如果是数值字段，不能使用引号。</td><td></td></tr></tbody></table><h1 id="AND-和-OR-运算符"><a href="#AND-和-OR-运算符" class="headerlink" title="AND 和 OR 运算符"></a>AND 和 OR 运算符</h1><h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><p>AND 和 OR 运算符用于基于一个以上条件对记录进行过滤。</p><h2 id="AND"><a href="#AND" class="headerlink" title="AND"></a>AND</h2><p>如果第一个条件和第二个条件都成立，则 AND 运算符显示一条记录。</p><h2 id="OR-运算符"><a href="#OR-运算符" class="headerlink" title="OR 运算符"></a>OR 运算符</h2><p>如果第一个条件和第二个条件中只要有一个成立，则 OR 运算符显示一条记录。</p><h2 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">只用AND：</span><br><span class="line">SELECT * FROM Store</span><br><span class="line">WHERE country&#x3D;&#39;China&#39;</span><br><span class="line">AND price &gt; 50;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">只用OR：</span><br><span class="line">SELECT * FROM Store</span><br><span class="line">WHERE country&#x3D;&#39;China&#39;</span><br><span class="line">OR country&#x3D;&#39;Serbia&#39;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">混合使用AND和OR：</span><br><span class="line">SELECT * FROM Store</span><br><span class="line">WHERE price &gt; 15</span><br><span class="line">AND (country&#x3D;&#39;China&#39; OR country&#x3D;&#39;Serbia&#39;);</span><br></pre></td></tr></table></figure><h1 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h1><h2 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h2><p>用于对结果集按照一个列或者多个列进行排序。<br>默认按照升序，使用DESC关键词可以实现降序。</p><h2 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name,column_name</span><br><span class="line">FROM table_name</span><br><span class="line">ORDER BY column_name1, column_name2 ASC|DESC;</span><br></pre></td></tr></table></figure><p>按照多个列名的顺序来一步步进行排序，如上述例子中，先按照column _ name1进行排序得到若干小组，然后在这些小组中按照column _ name2进行排序。得到最终的结果</p><h1 id="INSERT-INTO"><a href="#INSERT-INTO" class="headerlink" title="INSERT INTO"></a>INSERT INTO</h1><h2 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h2><p>用于向表中插入记录</p><h2 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.不指定要插入数据的列名，只需提供被插入的值即可，此时需要列出新一行的每一列数据：</span><br><span class="line">INSERT INTO table_name</span><br><span class="line">VALUES (value1,value2,value3,...);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2.指定列名及被插入的值：</span><br><span class="line">INSERT INTO table_name (column1,column2,column3,...)</span><br><span class="line">VALUES (value1,value2,value3,...);</span><br></pre></td></tr></table></figure><h2 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO Store (name, url, price, country)</span><br><span class="line">VALUES (&#39;RY&#39;,&#39;https:&#x2F;&#x2F;www.baidu.com&#x2F;&#39;,&#39;520&#39;,&#39;China&#39;);</span><br></pre></td></tr></table></figure><h1 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h1><h2 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h2><p>用于更新表中已经存在的记录</p><h2 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE table_name </span><br><span class="line">SET column1 &#x3D; value1, column2 &#x3D; value2,……</span><br><span class="line">WHERE some_column_name &#x3D; some_concrete_value;</span><br></pre></td></tr></table></figure><h2 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE Store </span><br><span class="line">SET price&#x3D;&#39;500&#39;, country&#x3D;&#39;CHINA&#39; </span><br><span class="line">WHERE name&#x3D;&#39;拓展坞&#39;;</span><br></pre></td></tr></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>慎重执行没有 WHERE 子句的 UPDATE，不然很肯将表中所有数据都按照SET（或其他关键词）的内容给修改掉。</p><h1 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h1><h2 id="简介-6"><a href="#简介-6" class="headerlink" title="简介"></a>简介</h2><p>用于删除表中的行（记录）</p><h2 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM table_name</span><br><span class="line">WHERE some_column_name &#x3D; some_concrete_value;</span><br></pre></td></tr></table></figure><h2 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM Store</span><br><span class="line">WHERE name&#x3D;&#39;笔记本&#39; AND price&#x3D;&#39;4999&#39;;</span><br></pre></td></tr></table></figure><h2 id="补充-1"><a href="#补充-1" class="headerlink" title="补充"></a>补充</h2><p>管理员可以在不删除表的情况下，删除表中所有的行。这意味着表结构、属性、索引将保持不变：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM table_name;</span><br><span class="line">或者</span><br><span class="line">DELETE * FROM table_name;</span><br></pre></td></tr></table></figure><p>但是在删除记录时要小心，因为无法撤销操作。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;SELECT&quot;&gt;&lt;a href=&quot;#SELECT&quot; class=&quot;headerlink&quot; title=&quot;SELECT&quot;&gt;&lt;/a&gt;SELECT&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;SELECT 语句用于从数据库中选取数据。&lt;/li&gt;
&lt;li&gt;结果被存储在一个结果表中，称为结果集。</summary>
    
    
    
    <category term="SQL" scheme="https://flower48237.com/categories/SQL/"/>
    
    
    <category term="SQL" scheme="https://flower48237.com/tags/SQL/"/>
    
    <category term="基础" scheme="https://flower48237.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>SQL学习：SELECT INTO、INSERT INTO SELECT、CREATE DATABASE、CREATE TABLE</title>
    <link href="https://flower48237.com/2020/07/29/sql%E5%AD%A6%E4%B9%A00729-SELECT%20INTO%E3%80%81INSERT%20INTO%20SELECT%E3%80%81CREATE%20DATABASE%E3%80%81CREATE%20TABLE/"/>
    <id>https://flower48237.com/2020/07/29/sql%E5%AD%A6%E4%B9%A00729-SELECT%20INTO%E3%80%81INSERT%20INTO%20SELECT%E3%80%81CREATE%20DATABASE%E3%80%81CREATE%20TABLE/</id>
    <published>2020-07-29T10:02:00.000Z</published>
    <updated>2021-06-02T14:21:50.387Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SELECT-INTO"><a href="#SELECT-INTO" class="headerlink" title="SELECT INTO"></a>SELECT INTO</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>可以从一个表复制数据，然后把数据插入到另一个新表中。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * </span><br><span class="line"><span class="keyword">INTO</span> table2 [<span class="keyword">IN</span> externable]</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>　column_name(s)</span><br><span class="line"><span class="keyword">INTO</span> table2 [<span class="keyword">IN</span> externaldb]</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="实例1-创建website-表的备份"><a href="#实例1-创建website-表的备份" class="headerlink" title="实例1 创建website 表的备份"></a>实例1 创建website 表的备份</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">INTO</span> WebsitesBackup2020</span><br><span class="line"><span class="keyword">FROM</span> Websites</span><br></pre></td></tr></table></figure><h2 id="实例2-只复制一些列插入到新表中"><a href="#实例2-只复制一些列插入到新表中" class="headerlink" title="实例2 只复制一些列插入到新表中"></a>实例2 只复制一些列插入到新表中</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>, <span class="keyword">url</span></span><br><span class="line"><span class="keyword">INTO</span> WebsitesBackup2020</span><br><span class="line"><span class="keyword">FROM</span> Websites;</span><br></pre></td></tr></table></figure><h2 id="实例3-只复制中国的网站插入到新表中"><a href="#实例3-只复制中国的网站插入到新表中" class="headerlink" title="实例3 只复制中国的网站插入到新表中"></a>实例3 只复制中国的网站插入到新表中</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">INTO</span> WebsitesBackup2020</span><br><span class="line"><span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">WHERE</span> country = <span class="string">'China'</span>;</span><br></pre></td></tr></table></figure><h2 id="实例4-复制多个表中的数据插入到新表中"><a href="#实例4-复制多个表中的数据插入到新表中" class="headerlink" title="实例4 复制多个表中的数据插入到新表中"></a>实例4 复制多个表中的数据插入到新表中</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Websites.name, access_log.count, access_log.date</span><br><span class="line"><span class="keyword">INTO</span> WebsitesBackup2020</span><br><span class="line"><span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> access_log</span><br><span class="line"><span class="keyword">ON</span> Websites.id=access_log.site_id;</span><br></pre></td></tr></table></figure><h1 id="INSERT-INTO-SELECT"><a href="#INSERT-INTO-SELECT" class="headerlink" title="INSERT INTO SELECT"></a>INSERT INTO SELECT</h1><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><p>可以从一个表复制数据，然后把数据插入到一个已存在的表中。目标表中任何已存在的行都不会受影响。</p><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">可以从一个表中复制 所有的列 插入到另一个已存在的表中</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table2</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table1;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">可以从一个表中复制 特定的列 插入到另一个已存在的表中</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table2 (column_name(s))</span><br><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table1;</span><br></pre></td></tr></table></figure><h2 id="实例1-复制APP中的数据插入到Websites中"><a href="#实例1-复制APP中的数据插入到Websites中" class="headerlink" title="实例1 复制APP中的数据插入到Websites中"></a>实例1 复制APP中的数据插入到Websites中</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Websites (<span class="keyword">name</span>, country)</span><br><span class="line"><span class="keyword">SELECT</span> app_name, country <span class="keyword">FROM</span> apps;</span><br></pre></td></tr></table></figure><h2 id="实例2-复制-id-是-1-的-APP-到-“Websites”-中"><a href="#实例2-复制-id-是-1-的-APP-到-“Websites”-中" class="headerlink" title="实例2 复制 id 是 1 的 APP 到 “Websites” 中"></a>实例2 复制 id 是 1 的 APP 到 “Websites” 中</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Websites (<span class="keyword">name</span>, country)</span><br><span class="line"><span class="keyword">SELECT</span> app_name, country <span class="keyword">FROM</span> apps</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="note"><a href="#note" class="headerlink" title="note"></a>note</h2><p>select into from 和 insert into select 都是用来复制表</p><p>两者的主要区别为： </p><ul><li>select into from 要求目标表不存在，因为在插入时会自动创建；</li><li>insert into select from 要求目标表存在。</li></ul><h1 id="Create-Database"><a href="#Create-Database" class="headerlink" title="Create Database"></a>Create Database</h1><h2 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h2><p>创建数据库</p><h2 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h2><p>CREATE DATABASE database_name;</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>CREATE DATABASE Store;</p><h1 id="Create-Table"><a href="#Create-Table" class="headerlink" title="Create Table"></a>Create Table</h1><h2 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h2><p>创建表</p><h2 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line">(</span><br><span class="line">column_name1 data_type(<span class="keyword">size</span>),</span><br><span class="line">column_name2 data_type(<span class="keyword">size</span>),</span><br><span class="line">column_name3 data_type(<span class="keyword">size</span>),</span><br><span class="line">....</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">Store</span></span><br><span class="line">(</span><br><span class="line">gools_id    <span class="built_in">int</span>,</span><br><span class="line">goods_name  <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">goods_country <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">goods_price <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;SELECT-INTO&quot;&gt;&lt;a href=&quot;#SELECT-INTO&quot; class=&quot;headerlink&quot; title=&quot;SELECT INTO&quot;&gt;&lt;/a&gt;SELECT INTO&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;可以从一个表复制数据，然后把数据插入到另一个新表中。&lt;/p&gt;
&lt;h2 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h2&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; * &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;INTO&lt;/span&gt; table2 [&lt;span class=&quot;keyword&quot;&gt;IN&lt;/span&gt; externable]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; table1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;　column_name(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;INTO&lt;/span&gt; table2 [&lt;span class=&quot;keyword&quot;&gt;IN&lt;/span&gt; externaldb]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; table1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="SQL" scheme="https://flower48237.com/categories/SQL/"/>
    
    
    <category term="SQL" scheme="https://flower48237.com/tags/SQL/"/>
    
    <category term="操作符" scheme="https://flower48237.com/tags/%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>SQL学习：JOIN 操作符</title>
    <link href="https://flower48237.com/2020/07/28/sql%E5%AD%A6%E4%B9%A00728-JOIN%EF%BC%88INNER%20JOIN%E3%80%81LEFT%20JOIN%E3%80%81RIGHT%20JOIN%E3%80%81FULL%20OUTER%20JOIN%EF%BC%89/"/>
    <id>https://flower48237.com/2020/07/28/sql%E5%AD%A6%E4%B9%A00728-JOIN%EF%BC%88INNER%20JOIN%E3%80%81LEFT%20JOIN%E3%80%81RIGHT%20JOIN%E3%80%81FULL%20OUTER%20JOIN%EF%BC%89/</id>
    <published>2020-07-28T10:02:00.000Z</published>
    <updated>2021-06-02T14:20:49.334Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JOIN（连接）"><a href="#JOIN（连接）" class="headerlink" title="JOIN（连接）"></a>JOIN（连接）</h1><h2 id="总介绍"><a href="#总介绍" class="headerlink" title="总介绍"></a>总介绍</h2><p>把两个或多个表的行连接起来<br>有左连接，右连接，全连接，内连接，外连接等七个</p><h2 id="不同的-JOIN"><a href="#不同的-JOIN" class="headerlink" title="不同的 JOIN"></a>不同的 JOIN</h2><ul><li>INNER JOIN：如果表中有至少一个匹配，则返回行</li><li>LEFT JOIN：即使右表中没有匹配，也从左表返回所有的行</li><li>RIGHT JOIN：即使左表中没有匹配，也从右表返回所有的行</li><li>FULL JOIN：只要其中一个表中存在匹配，则返回行</li></ul><blockquote><p>连接的结果可以在逻辑上看作是由SELECT语句指定的列组成的新表。</p></blockquote><blockquote><p>左连接与右连接的左右指的是以两张表中的哪一张为基准，它们都是外连接。</p></blockquote><blockquote><p>外连接就好像是为非基准表添加了一行全为空值的万能行，用来与基准表中找不到匹配的行进行匹配。假设两个没有空值的表进行左连接，左表是基准表，左表的所有行都出现在结果中，右表则可能因为无法与基准表匹配而出现是空值的字段。<br>这部分主要涉及的是表连接的逻辑问题。</p></blockquote><a id="more"></a><h2 id="INNER-JOIN（简单的-JOIN）-最常见的-JOIN-类型"><a href="#INNER-JOIN（简单的-JOIN）-最常见的-JOIN-类型" class="headerlink" title="INNER JOIN（简单的 JOIN） 最常见的 JOIN 类型"></a>INNER JOIN（简单的 JOIN） 最常见的 JOIN 类型</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>INNER JOIN 关键字在表中存在至少一个匹配时返回行。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.column_name=table2.column_name;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.column_name=table2.column_name;</span><br></pre></td></tr></table></figure><blockquote><p>note:</p></blockquote><p>INNER JOIN 与 JOIN 是相同的<br>INNER JOIN 关键字在表中存在至少一个匹配时返回行。<br>如果 “table1” 表中的行在 “table2” 中没有匹配，则不会列出这些行。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Websites.name, access_log.count, access_log.date</span><br><span class="line"><span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> access_log</span><br><span class="line"><span class="keyword">ON</span> Websites.id=access_log.site_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> access_log.count;</span><br></pre></td></tr></table></figure><h3 id="在使用-join-时，on-和-where-条件的区别如下："><a href="#在使用-join-时，on-和-where-条件的区别如下：" class="headerlink" title="在使用 join 时，on 和 where 条件的区别如下："></a>在使用 join 时，on 和 where 条件的区别如下：</h3><ul><li>1.on 条件是在生成临时表时使用的条件，它不管 on 中的条件是否为真，都会返回左边表中的记录。</li><li>2.where 条件是在临时表生成好后，再对临时表进行过滤的条件。这时已经没有 left join 的含义（必须返回左边表的记录）了，条件不为真的就全部过滤掉。</li></ul><h2 id="LEFT-JOIN-左连接"><a href="#LEFT-JOIN-左连接" class="headerlink" title="LEFT JOIN(左连接)"></a>LEFT JOIN(左连接)</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>LEFT JOIN 关键字从左表（table1）返回所有的行，即使右表（table2）中没有匹配。如果右表中没有匹配，则结果为 NULL。</p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.column_name=table2.column_name;</span><br></pre></td></tr></table></figure><p>或：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.column_name=table2.column_name;</span><br></pre></td></tr></table></figure><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Websites.name, access_log.count, access_log.date</span><br><span class="line"><span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> access_log</span><br><span class="line"><span class="keyword">ON</span> Websites.id=access_log.site_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> access_log.count <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h2 id="RIGHT-JOIN-右连接"><a href="#RIGHT-JOIN-右连接" class="headerlink" title="RIGHT JOIN(右连接)"></a>RIGHT JOIN(右连接)</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><p>RIGHT JOIN 关键字从右表（table2）返回所有的行，即使左表（table1）中没有匹配。如果左表中没有匹配，则结果为 NULL。</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.column_name=table2.column_name;</span><br></pre></td></tr></table></figure><p>或：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.column_name=table2.column_name;</span><br></pre></td></tr></table></figure><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Websites.name, access_log.count, access_log.date</span><br><span class="line"><span class="keyword">FROM</span> access_log</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> Websites</span><br><span class="line"><span class="keyword">ON</span> access_log.site_id=Websites.id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> access_log.count <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h2 id="FULL-OUTER-JOIN-全外连接"><a href="#FULL-OUTER-JOIN-全外连接" class="headerlink" title="FULL OUTER JOIN(全外连接)"></a>FULL OUTER JOIN(全外连接)</h2><h3 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h3><p>FULL OUTER JOIN 关键字只要左表（table1）和右表（table2）其中一个表中存在匹配，则返回行.<br>简言之：FULL OUTER JOIN 关键字结合了 LEFT JOIN 和 RIGHT JOIN 的结果。</p><h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.column_name=table2.column_name;</span><br></pre></td></tr></table></figure><h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Websites.name, access_log.count, access_log.date</span><br><span class="line"><span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> access_log</span><br><span class="line"><span class="keyword">ON</span> Websites.id=access_log.site_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> access_log.count <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><blockquote><p>note：FULL OUTER JOIN 关键字返回左表（Websites）和右表（access_log）中所有的行。如果 “Websites” 表中的行在 “access_log” 中没有匹配或者 “access_log” 表中的行在 “Websites” 表中没有匹配，也会列出这些行。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;JOIN（连接）&quot;&gt;&lt;a href=&quot;#JOIN（连接）&quot; class=&quot;headerlink&quot; title=&quot;JOIN（连接）&quot;&gt;&lt;/a&gt;JOIN（连接）&lt;/h1&gt;&lt;h2 id=&quot;总介绍&quot;&gt;&lt;a href=&quot;#总介绍&quot; class=&quot;headerlink&quot; title=&quot;总介绍&quot;&gt;&lt;/a&gt;总介绍&lt;/h2&gt;&lt;p&gt;把两个或多个表的行连接起来&lt;br&gt;有左连接，右连接，全连接，内连接，外连接等七个&lt;/p&gt;
&lt;h2 id=&quot;不同的-JOIN&quot;&gt;&lt;a href=&quot;#不同的-JOIN&quot; class=&quot;headerlink&quot; title=&quot;不同的 JOIN&quot;&gt;&lt;/a&gt;不同的 JOIN&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;INNER JOIN：如果表中有至少一个匹配，则返回行&lt;/li&gt;
&lt;li&gt;LEFT JOIN：即使右表中没有匹配，也从左表返回所有的行&lt;/li&gt;
&lt;li&gt;RIGHT JOIN：即使左表中没有匹配，也从右表返回所有的行&lt;/li&gt;
&lt;li&gt;FULL JOIN：只要其中一个表中存在匹配，则返回行&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;连接的结果可以在逻辑上看作是由SELECT语句指定的列组成的新表。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;左连接与右连接的左右指的是以两张表中的哪一张为基准，它们都是外连接。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;外连接就好像是为非基准表添加了一行全为空值的万能行，用来与基准表中找不到匹配的行进行匹配。假设两个没有空值的表进行左连接，左表是基准表，左表的所有行都出现在结果中，右表则可能因为无法与基准表匹配而出现是空值的字段。&lt;br&gt;这部分主要涉及的是表连接的逻辑问题。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="SQL" scheme="https://flower48237.com/categories/SQL/"/>
    
    
    <category term="SQL" scheme="https://flower48237.com/tags/SQL/"/>
    
    <category term="操作符" scheme="https://flower48237.com/tags/%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>SQL学习：BETWEEN、AS、UNION 操作符</title>
    <link href="https://flower48237.com/2020/07/27/sql%E5%AD%A6%E4%B9%A00727-BETWEEN%E3%80%81AS%E3%80%81UNION/"/>
    <id>https://flower48237.com/2020/07/27/sql%E5%AD%A6%E4%B9%A00727-BETWEEN%E3%80%81AS%E3%80%81UNION/</id>
    <published>2020-07-27T10:02:00.000Z</published>
    <updated>2021-06-02T14:20:53.831Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="BETWEEN-操作符"><a href="#BETWEEN-操作符" class="headerlink" title="BETWEEN 操作符"></a>BETWEEN 操作符</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>sql操作符用于选取介于两个值之间的数据范围内的值。<br>这些值可以是数值、文本或者日期。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name </span><br><span class="line"><span class="keyword">WHERE</span> column_name <span class="keyword">BETWEEN</span> value1 <span class="keyword">AND</span> value2;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="实例1-BRTWEEN"><a href="#实例1-BRTWEEN" class="headerlink" title="实例1 BRTWEEN"></a>实例1 BRTWEEN</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">下面的 SQL 语句选取 价格（price） 介于 1 和 20 之间的所有商品</span><br><span class="line"><span class="keyword">SELECT</span> * </span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">Store</span> </span><br><span class="line"><span class="keyword">WHERE</span> price <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">49</span>;</span><br></pre></td></tr></table></figure><h2 id="实例2-NOT-BETWEEN"><a href="#实例2-NOT-BETWEEN" class="headerlink" title="实例2 NOT BETWEEN"></a>实例2 NOT BETWEEN</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">下面的 SQL 语句选取 价格（price） 不在 1 和 20 之间的所有商品</span><br><span class="line"><span class="keyword">SELECT</span> * </span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">Store</span> </span><br><span class="line"><span class="keyword">WHERE</span> price <span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">49</span>;</span><br></pre></td></tr></table></figure><h2 id="实例3-混合使用"><a href="#实例3-混合使用" class="headerlink" title="实例3 混合使用"></a>实例3 混合使用</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">下面的SQL语句选取价格peice在1 和 20 之间并且产地country不是中国也不是印度的所有商品</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">Store</span></span><br><span class="line"><span class="keyword">WHERE</span> (price <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">20</span>)</span><br><span class="line"><span class="keyword">AND</span> country <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">'China'</span>, <span class="string">'India'</span>);</span><br></pre></td></tr></table></figure><h2 id="带有文本值的-BETWEEN-操作符实例"><a href="#带有文本值的-BETWEEN-操作符实例" class="headerlink" title="带有文本值的 BETWEEN 操作符实例"></a>带有文本值的 BETWEEN 操作符实例</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">下面的 SQL 语句选取 name 以介于 'A' 和 'H' 之间字母作为起始字母的所有商品</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">Store</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">name</span> <span class="keyword">BETWEEN</span> <span class="string">'A'</span> <span class="keyword">AND</span> <span class="string">'H'</span>;</span><br></pre></td></tr></table></figure><h2 id="带有日期值的-BETWEEN-操作符实例"><a href="#带有日期值的-BETWEEN-操作符实例" class="headerlink" title="带有日期值的 BETWEEN 操作符实例"></a>带有日期值的 BETWEEN 操作符实例</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">下面的 SQL 语句选取 入库日期 介于 '2020-07-08' 和 '2020-07-27' 之间的所有商品</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">Store</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="built_in">date</span> <span class="keyword">BETWEEN</span> <span class="string">'2020-07-08'</span> <span class="keyword">AND</span> <span class="string">'2020-07-27'</span>;</span><br></pre></td></tr></table></figure><h1 id="AS（别名）"><a href="#AS（别名）" class="headerlink" title="AS（别名）"></a>AS（别名）</h1><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><p>通过使用AS，可以为表名称或列名称指定别名。使用别名是为了增强列名的可读性。</p><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><h3 id="表名："><a href="#表名：" class="headerlink" title="表名："></a>表名：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name <span class="keyword">AS</span> alias_name;</span><br></pre></td></tr></table></figure><h3 id="列名"><a href="#列名" class="headerlink" title="列名"></a>列名</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name <span class="keyword">AS</span> alias_name</span><br><span class="line"><span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure><blockquote><p>note:如果列名称包含空格，要求使用双引号或方括号</p></blockquote><h2 id="表的别名实例1"><a href="#表的别名实例1" class="headerlink" title="表的别名实例1"></a>表的别名实例1</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">下面的 SQL 语句选取 "电子商城" 的所访问记录。我们使用 "Store" 和 "access_log" 表，并分别为它们指定表别名 "s" 和 "a"</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> s.name, s.url, a.count, a.date</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">Store</span> <span class="keyword">AS</span> s, access_log <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">WHERE</span> a.site_id=s.id <span class="keyword">and</span> s.name=<span class="string">"牛轧糖"</span>;</span><br><span class="line"></span><br><span class="line">通过使用别名，可以使 SQL 语句更简短</span><br><span class="line"></span><br><span class="line">对比：</span><br><span class="line">不带别名的相同的 SQL 语句</span><br><span class="line"><span class="keyword">SELECT</span> Websites.name, Websites.url, access_log.count, access_log.date</span><br><span class="line"><span class="keyword">FROM</span> Websites, access_log</span><br><span class="line"><span class="keyword">WHERE</span> Websites.id=access_log.site_id <span class="keyword">and</span> Websites.name=<span class="string">"牛轧糖"</span>;</span><br></pre></td></tr></table></figure><h2 id="列的别名实例1"><a href="#列的别名实例1" class="headerlink" title="列的别名实例1"></a>列的别名实例1</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">下面的 SQL 语句指定了两个别名，一个是 name 列的别名 n，一个是 proce 列的别名p</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">AS</span> n, price <span class="keyword">AS</span> p</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">store</span>;</span><br></pre></td></tr></table></figure><h2 id="列的别名实例2"><a href="#列的别名实例2" class="headerlink" title="列的别名实例2"></a>列的别名实例2</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在下面的 SQL 语句中，把三个列（购买链接url、价格price 和 产地country）结合在一起，并创建一个名为 "gools_info" 的别名</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>, <span class="keyword">CONCAT</span>(<span class="keyword">url</span>, <span class="string">', '</span>, price, <span class="string">', '</span>, country) <span class="keyword">AS</span> site_info</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">Store</span>;</span><br></pre></td></tr></table></figure><h2 id="在下面的情况下，使用别名很有用："><a href="#在下面的情况下，使用别名很有用：" class="headerlink" title="在下面的情况下，使用别名很有用："></a>在下面的情况下，使用别名很有用：</h2><ul><li>在查询中涉及超过一个表</li><li>在查询中使用了函数</li><li>列名称很长或者可读性差</li><li>需要把两个列或者多个列结合在一起</li></ul><h1 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a>UNION</h1><h2 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h2><p>用于合并两个或多个SELECT 语句的结果集。</p><p>UNION 内部的每个 SELECT语句必须拥有相同数量的列。<br>列也必须拥有相似的数据类型。<br>同时，每个 SELECT 语句中的列的顺序必须相同。</p><h2 id="语法-UNION"><a href="#语法-UNION" class="headerlink" title="语法(UNION)"></a>语法(UNION)</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s) <span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> column_name(s) <span class="keyword">FROM</span> table2;</span><br></pre></td></tr></table></figure><p>注释：UNION 操作符默认选取不同的值。如果允许重复的值，需要使用 UNION ALL。</p><h2 id="语法-UNION-ALL"><a href="#语法-UNION-ALL" class="headerlink" title="语法(UNION ALL)"></a>语法(UNION ALL)</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s) <span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> column_name(s) <span class="keyword">FROM</span> table2;</span><br><span class="line">注释：UNION 结果集中的列名总是等于 UNION 中第一个 <span class="keyword">SELECT</span> 语句中的列名。</span><br></pre></td></tr></table></figure><h2 id="实例-UNION"><a href="#实例-UNION" class="headerlink" title="实例(UNION)"></a>实例(UNION)</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> country <span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> country <span class="keyword">FROM</span> apps</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> country;</span><br></pre></td></tr></table></figure><h2 id="实例-UNION-ALL"><a href="#实例-UNION-ALL" class="headerlink" title="实例(UNION ALL)"></a>实例(UNION ALL)</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> country <span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> country <span class="keyword">FROM</span> apps</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> country;</span><br><span class="line">注释：UNION ALL可以筛选出重复的值</span><br></pre></td></tr></table></figure><h2 id="实例-带有-WHERE-的-SQL-UNION-ALL"><a href="#实例-带有-WHERE-的-SQL-UNION-ALL" class="headerlink" title="实例(带有 WHERE 的 SQL UNION ALL)"></a>实例(带有 WHERE 的 SQL UNION ALL)</h2><p>下面的 SQL 语句使用 UNION ALL 从 “Websites” 和 “apps” 表中选取所有的中国(CN)的数据（包含重复的值）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> country, <span class="keyword">name</span> <span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">WHERE</span> country=<span class="string">'China'</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> country, app_name <span class="keyword">FROM</span> apps</span><br><span class="line"><span class="keyword">WHERE</span> country=<span class="string">'China'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> country;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;BETWEEN-操作符&quot;&gt;&lt;a href=&quot;#BETWEEN-操作符&quot; class=&quot;headerlink&quot; title=&quot;BETWEEN 操作符&quot;&gt;&lt;/a&gt;BETWEEN 操作符&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;sql操作符用于选取介于两个值之间的数据范围内的值。&lt;br&gt;这些值可以是数值、文本或者日期。&lt;/p&gt;
&lt;h2 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h2&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; column_name(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; table_name &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; column_name &lt;span class=&quot;keyword&quot;&gt;BETWEEN&lt;/span&gt; value1 &lt;span class=&quot;keyword&quot;&gt;AND&lt;/span&gt; value2;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="SQL" scheme="https://flower48237.com/categories/SQL/"/>
    
    
    <category term="SQL" scheme="https://flower48237.com/tags/SQL/"/>
    
    <category term="操作符" scheme="https://flower48237.com/tags/%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    
  </entry>
  
</feed>
