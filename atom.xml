<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>鸡排大仙儿的个人博客</title>
  
  <subtitle>记录学习过程</subtitle>
  <link href="https://hexo.flower48237.com/atom.xml" rel="self"/>
  
  <link href="https://hexo.flower48237.com/"/>
  <updated>2022-01-21T14:15:52.425Z</updated>
  <id>https://hexo.flower48237.com/</id>
  
  <author>
    <name>鸡排大仙儿</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>router-link跳转失败（Vue router命名路由）</title>
    <link href="https://hexo.flower48237.com/archives/6cb8f3c5.html"/>
    <id>https://hexo.flower48237.com/archives/6cb8f3c5.html</id>
    <published>2022-01-19T14:00:00.000Z</published>
    <updated>2022-01-21T14:15:52.425Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="问题及解决办法"><a href="#问题及解决办法" class="headerlink" title="问题及解决办法"></a>问题及解决办法</h2><ul><li>在.vue文件中，使用<code>router-link</code>并指定命名路由时跳转失败</li><li>router-link的:to后指定的命名路由参数name，需要和<code>src/router/index.js</code>文件中定义的路由的name和对应。例如想跳转到index.js文件中已定义好的命名路由A中，:to后的name就需要写成A。</li></ul><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a><a href="https://router.vuejs.org/zh/guide/essentials/named-routes.html">官方文档</a></h2><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>创建 Router 实例的时候，在 <code>routes</code> 配置中给某个路由设置名称。如在<code>src/router/index.js</code>文件中定义以下路由</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        path<span class="token operator">:</span> <span class="token string">'/blog/:blogId'</span><span class="token punctuation">,</span>        name<span class="token operator">:</span> <span class="token string">'BlogDetail'</span><span class="token punctuation">,</span>        component<span class="token operator">:</span> BlogDetail<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在.vue文件中链接到命名路由时，可以给 <code>router-link</code> 的 <code>to</code> 属性传一个对象：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;router-link :to&#x3D;&quot;&#123; name: &#39;BlogDetail&#39;, params: &#123; blogId: 123 &#125;&#125;&quot;&gt;文章标题&lt;&#x2F;router-link&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>与代码调用 <code>router.push()</code> 等价：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'BlogDetail'</span><span class="token punctuation">,</span> params<span class="token operator">:</span> <span class="token punctuation">&#123;</span> blogId<span class="token operator">:</span> <span class="token number">123</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="SpringBoot+Vue" scheme="https://hexo.flower48237.com/categories/SpringBoot-Vue/"/>
    
    
    <category term="Vue" scheme="https://hexo.flower48237.com/tags/Vue/"/>
    
    <category term="router-link" scheme="https://hexo.flower48237.com/tags/router-link/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题378.有序矩阵中第 K 小的元素</title>
    <link href="https://hexo.flower48237.com/archives/6443ff3e.html"/>
    <id>https://hexo.flower48237.com/archives/6443ff3e.html</id>
    <published>2022-01-14T13:00:00.000Z</published>
    <updated>2022-01-15T08:57:36.592Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定一个 n x n 矩阵 matrix ，其中每行和每列元素均按升序排序，找到矩阵中第 k 小的元素。</li><li>是 排序后 的第 k 小元素，而不是第 k 个 不同 的元素。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> matrix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1,5</span>,9<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">10,11</span>,13<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">12,13</span>,15<span class="token punctuation">]</span><span class="token punctuation">]</span>, k <span class="token operator">=</span> <span class="token number">8</span>output <span class="token builtin class-name">:</span> <span class="token number">13</span>input  <span class="token builtin class-name">:</span> matrix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>-5<span class="token punctuation">]</span><span class="token punctuation">]</span>, k <span class="token operator">=</span> <span class="token number">1</span>output <span class="token builtin class-name">:</span> -5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路1 排序</strong></p><ul><li>将二维数组转换为一维数组</li><li>对一维数组进行排序</li><li>第k小的元素即一维数组中第k个元素，下标为k-1</li></ul><p><strong>思路2 二分查找</strong></p><ul><li>因为二维数组在行和列方向上都是递增的，因此，第k小的元素的 左上方，都是小于或等于它的元素</li><li>即，假设 target 是矩阵中第k小的元素，则矩阵中有 k 个元素是小于或等于target的，这些元素在矩阵中的位置，都处于target的左上方</li><li>利用数组的行列递增性质，实现二分查找定位<ul><li>初始选中左上角元素和右下角元素作为区间两端，即left = matrix[0][0]，right = matrix[n - 1][n - 1]，则 mid = (left + right) / 2</li><li>可知矩阵中其他元素x都满足：left &lt; x &lt; right</li><li>⭐从左下角开始，统计矩阵中值小于或等于mid的元素个数 count ，此时的mid就可以看作target，当count = k时，说明有k个小于或等于mid的元素，此时的mid就是结果</li><li>利用数组性质完成count的计数<ul><li>当前元素 matrix[i][j] &lt;= mid 时，count 累加 i - 1，因为该行上面的所有行，在这第j列的值都小于mid，然后令j右移，扩大搜索范围</li><li>当前元素 matrix[i][j] &gt; mid 时，说明当前元素在mid的右下角矩阵中，令i上移，缩小所搜范围</li></ul></li><li>当 count &lt; k 时，说明有 不足k个 不大于mid的元素，即第k小的元素位于 mid 右下方的矩阵中，令left = mid + 1</li><li>当 count &gt;= k 时，说明有 超过（或刚好）k个 不大于mid的元素，即第k小的元素位于 mid 左上方的矩阵中，令right = mid</li><li>当 left = right 时，代表 mid 就是要找的第k小的元素target（同⭐）</li></ul></li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">kthSmallest</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">*</span> n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                array<span class="token punctuation">[</span>t<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> array<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路2代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">kthSmallest</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> matrix<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token function">findSmaller</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                right <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> right<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">findSmaller</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                count <span class="token operator">+=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                i<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定一个 n x n 矩阵 matrix ，其中每行和每列元素均按升序排序，找到矩阵中第 k 小的元素。&lt;/li&gt;
&lt;li&gt;是 排序后 的第 k 小元素，而不是第 k 个 不同 的元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; matrix &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1,5&lt;/span&gt;,9&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10,11&lt;/span&gt;,13&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;12,13&lt;/span&gt;,15&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;, k &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt;
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; matrix &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;-5&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;, k &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; -5&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
    <category term="数组" scheme="https://hexo.flower48237.com/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="排序" scheme="https://hexo.flower48237.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
    <category term="二分查找" scheme="https://hexo.flower48237.com/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
    <category term="矩阵" scheme="https://hexo.flower48237.com/tags/%E7%9F%A9%E9%98%B5/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题328.奇偶链表</title>
    <link href="https://hexo.flower48237.com/archives/298e7cdd.html"/>
    <id>https://hexo.flower48237.com/archives/298e7cdd.html</id>
    <published>2022-01-07T04:00:00.000Z</published>
    <updated>2022-01-15T08:57:36.595Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。</li><li>这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。</li><li>使用原地算法完成。空间复杂度应为 O(1)，时间复杂度应为 O(nodes)，nodes 为节点总数。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> <span class="token number">1</span>-<span class="token operator">></span><span class="token number">2</span>-<span class="token operator">></span><span class="token number">3</span>-<span class="token operator">></span><span class="token number">4</span>-<span class="token operator">></span><span class="token number">5</span>-<span class="token operator">></span>NULLoutput <span class="token builtin class-name">:</span> <span class="token number">1</span>-<span class="token operator">></span><span class="token number">3</span>-<span class="token operator">></span><span class="token number">5</span>-<span class="token operator">></span><span class="token number">2</span>-<span class="token operator">></span><span class="token number">4</span>-<span class="token operator">></span>NULLinput  <span class="token builtin class-name">:</span> <span class="token number">2</span>-<span class="token operator">></span><span class="token number">1</span>-<span class="token operator">></span><span class="token number">3</span>-<span class="token operator">></span><span class="token number">5</span>-<span class="token operator">></span><span class="token number">6</span>-<span class="token operator">></span><span class="token number">4</span>-<span class="token operator">></span><span class="token number">7</span>-<span class="token operator">></span>NULL output <span class="token builtin class-name">:</span> <span class="token number">2</span>-<span class="token operator">></span><span class="token number">3</span>-<span class="token operator">></span><span class="token number">6</span>-<span class="token operator">></span><span class="token number">7</span>-<span class="token operator">></span><span class="token number">1</span>-<span class="token operator">></span><span class="token number">5</span>-<span class="token operator">></span><span class="token number">4</span>-<span class="token operator">></span>NULL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>空链表直接返回</li><li>用odd代表奇位链表，even代表偶位链表</li><li>p起始指向链表头节点head，q起始指向链表头节点的第一个后继结点hexd.next</li><li>用p遍历奇位节点，q遍历偶位节点</li><li>最后当 q为空（防止节点总数为偶数时报错空指针）或者 q.next为空（防止节点总数为奇数时报错空指针）时，结束遍历</li><li>令p指向even，则可得到重新排序后的奇偶链表（头节点为odd）</li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">oddEvenList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">ListNode</span> odd <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> even <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> p <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> q <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>q <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            p<span class="token punctuation">.</span>next <span class="token operator">=</span> q<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            q<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            q <span class="token operator">=</span> q<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/*while (list1 != null)&#123;            System.out.print(list1.val + " ");            list1 = list1.next;        &#125;        System.out.println();        while (list2 != null)&#123;            System.out.print(list2.val + " ");            list2 = list2.next;        &#125;*/</span>        p<span class="token punctuation">.</span>next <span class="token operator">=</span> even<span class="token punctuation">;</span>        <span class="token keyword">return</span> odd<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。&lt;/li&gt;
&lt;li&gt;这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。&lt;/li&gt;
&lt;li&gt;使用原地算法完成。空间复杂度应为 O(1)，时间复杂度应为 O(nodes)，nodes 为节点总数。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;-&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;-&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;-&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;-&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;-&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;NULL
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;-&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;-&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;-&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;-&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;-&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;NULL
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;-&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;-&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;-&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;-&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;-&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;-&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;-&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;NULL 
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;-&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;-&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;-&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;-&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;-&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;-&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;-&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;NULL&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
    <category term="链表" scheme="https://hexo.flower48237.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题172.阶乘后的零</title>
    <link href="https://hexo.flower48237.com/archives/9149f718.html"/>
    <id>https://hexo.flower48237.com/archives/9149f718.html</id>
    <published>2022-01-06T04:00:00.000Z</published>
    <updated>2022-01-06T03:50:18.879Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定一个整数 n ，返回 n! 结果中尾随零的数量。</li><li>提示 n! = n * (n - 1) * (n - 2) * … * 3 * 2 * 1</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> n <span class="token operator">=</span> <span class="token number">3</span>output <span class="token builtin class-name">:</span> <span class="token number">0</span>note   <span class="token builtin class-name">:</span> <span class="token number">3</span><span class="token operator">!</span> <span class="token operator">=</span> <span class="token number">6</span> ，不含尾随 <span class="token number">0</span>input  <span class="token builtin class-name">:</span> n <span class="token operator">=</span> <span class="token number">5</span>output <span class="token builtin class-name">:</span> <span class="token number">1</span>note   <span class="token builtin class-name">:</span> <span class="token number">5</span><span class="token operator">!</span> <span class="token operator">=</span> <span class="token number">120</span> ，有一个尾随 <span class="token number">0</span>input  <span class="token builtin class-name">:</span> n <span class="token operator">=</span> <span class="token number">0</span>output <span class="token builtin class-name">:</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>基本思路：n中包含多少个5，其阶乘值就有多少个尾随的0</li><li>n的阶乘尾随0，可以理解为不断乘10得到的，所以找到n中包含多少因数10，就可以知道阶乘值有多少尾随0</li><li>将因数10拆分，是由因数5和因素2得到的，而因数2每隔两个数出现一次，因数5每隔5个数出现一次，故因数2的个数远多于因数5</li><li>所以，有多少个因数5，就有多少个尾随0</li><li>除了每隔5个数出现一次因数5之外，每隔25个数也会多出现一次因数5，因为25 = 5 × 5，即n中有多少个25，就多包含了几个因数5；以此类推，每隔125个数……</li><li>因此，n中包含的因数5的个数应当为： <ul><li><blockquote><p>n / 5 + n / 25 + n / 125 + ……</p></blockquote></li></ul></li><li>时间复杂度： O(log n)</li><li>空间复杂度：O(1)</li></ul><p>作者：LeetCode<br>链接：<a href="https://leetcode-cn.com/problems/factorial-trailing-zeroes/solution/jie-cheng-hou-de-ling-by-leetcode/">https://leetcode-cn.com/problems/factorial-trailing-zeroes/solution/jie-cheng-hou-de-ling-by-leetcode/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><p><strong>思路1 循环</strong></p><ul><li>循环，用n累除5，并把每次除以5的数量累加到结果上</li></ul><p><strong>思路2 递归</strong></p><ul><li>每次把 n / 5 作为新的参数投入到新一轮递归计算中</li><li>递归边界为 n = 0</li></ul><p><strong>思路3 BigInteger</strong></p><ul><li>借助Java的大数，先计算阶乘，再不断取余判断是否余数为0，若为0则结果加1，阶乘值除10</li><li>会超出时间限制</li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">trailingZeroes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            n <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">5</span><span class="token punctuation">;</span>            count <span class="token operator">+=</span> n<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路2代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">trailingZeroes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">trailingZeroes</span><span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路2代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution3</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">trailingZeroes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">BigInteger</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            x <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">mod</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span>TEN<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span>ZERO<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            count <span class="token operator">++</span><span class="token punctuation">;</span>            x <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span>TEN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定一个整数 n ，返回 n! 结果中尾随零的数量。&lt;/li&gt;
&lt;li&gt;提示 n! = n * (n - 1) * (n - 2) * … * 3 * 2 * 1&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
note   &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt; ，不含尾随 &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
note   &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;120&lt;/span&gt; ，有一个尾随 &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
    <category term="数学" scheme="https://hexo.flower48237.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="递归" scheme="https://hexo.flower48237.com/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题454.四数相加II</title>
    <link href="https://hexo.flower48237.com/archives/2565682e.html"/>
    <id>https://hexo.flower48237.com/archives/2565682e.html</id>
    <published>2022-01-01T15:00:00.000Z</published>
    <updated>2022-01-01T15:05:27.002Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定四个整数数组 nums1、nums2、nums3 和 nums4 ，数组长度都是 n ，请计算有多少个元组 (i, j, k, l) 能满足：</li><li>0 &lt;= i, j, k, l &lt; n</li><li>nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> nums1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1,2</span><span class="token punctuation">]</span>, nums2 <span class="token operator">=</span> <span class="token punctuation">[</span>-2,-1<span class="token punctuation">]</span>, nums3 <span class="token operator">=</span> <span class="token punctuation">[</span>-1,2<span class="token punctuation">]</span>, nums4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0,2</span><span class="token punctuation">]</span>output <span class="token builtin class-name">:</span> <span class="token number">2</span>note   <span class="token builtin class-name">:</span> 两个元组如下：         <span class="token number">1</span>. <span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">1</span><span class="token punctuation">)</span> -<span class="token operator">></span> nums1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> + nums2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> + nums3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> + nums4<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> + <span class="token punctuation">(</span>-2<span class="token punctuation">)</span> + <span class="token punctuation">(</span>-1<span class="token punctuation">)</span> + <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">0</span>         <span class="token number">2</span>. <span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">1</span>, <span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">)</span> -<span class="token operator">></span> nums1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> + nums2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> + nums3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> + nums4<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span> + <span class="token punctuation">(</span>-1<span class="token punctuation">)</span> + <span class="token punctuation">(</span>-1<span class="token punctuation">)</span> + <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">0</span>input  <span class="token builtin class-name">:</span> nums1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>, nums2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>, nums3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>, nums4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>output <span class="token builtin class-name">:</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路</strong></p><ul><li>将四个数组分成两部分 A 和 B 为一组，C 和 D 为另外一组。</li><li>对于 A 和 B，使用二重循环对它们进行遍历，得到所有 A[i]+B[j] 的值并存入哈希映射中，每个键表示一种 A[i]+B[j]，对应的值为 A[i]+B[j] 出现的次数。</li><li>对于 C 和 D，使用二重循环对它们进行遍历，当遍历到 C[k]+D[l] 时，如果 -(C[k]+D[l]) 出现在哈希映射中，那么将 -(C[k]+D[l]) 对应的值累加进答案中。</li><li>最终即可得到满足 A[i]+B[j]+C[k]+D[l]=0 的四元组数目</li><li>时间复杂度O(n^2)，二重循环</li><li>空间复杂度O(n^2)，最坏的情况下，A[i]+B[j] 的值均不相同，因此值的个数为 n^2</li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">fourSumCount</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums3<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums4<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> hashmap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num1 <span class="token operator">:</span> nums1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num2 <span class="token operator">:</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                hashmap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>num1 <span class="token operator">+</span> num2<span class="token punctuation">,</span> hashmap<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>num1 <span class="token operator">+</span> num2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num3 <span class="token operator">:</span> nums3<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num4 <span class="token operator">:</span> nums4<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>hashmap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token operator">-</span> num3 <span class="token operator">-</span> num4<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    result <span class="token operator">+=</span> hashmap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">-</span> num3 <span class="token operator">-</span> num4<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定四个整数数组 nums1、nums2、nums3 和 nums4 ，数组长度都是 n ，请计算有多少个元组 (i, j, k, l) 能满足：&lt;/li&gt;
&lt;li&gt;0 &amp;lt;= i, j, k, l &amp;lt; n&lt;/li&gt;
&lt;li&gt;nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; nums1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1,2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;, nums2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;-2,-1&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;, nums3 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;-1,2&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;, nums4 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0,2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
note   &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; 两个元组如下：
         &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;. &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; -&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; nums1&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; + nums2&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; + nums3&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; + nums4&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;-2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; + &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;-1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; + &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
         &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;. &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; -&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; nums1&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; + nums2&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; + nums3&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; + nums4&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;-1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; + &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;-1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; + &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; nums1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;, nums2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;, nums3 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;, nums4 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
    <category term="数组" scheme="https://hexo.flower48237.com/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="哈希表" scheme="https://hexo.flower48237.com/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题073.矩阵置零</title>
    <link href="https://hexo.flower48237.com/archives/4fc659f0.html"/>
    <id>https://hexo.flower48237.com/archives/4fc659f0.html</id>
    <published>2021-12-30T10:00:00.000Z</published>
    <updated>2021-12-30T13:49:28.488Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定一个 m x n 的矩阵，如果一个元素为 0 ，则将其所在行和列的所有元素原地都设为 0 。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> matrix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1,1</span>,1<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">1,0</span>,1<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">1,1</span>,1<span class="token punctuation">]</span><span class="token punctuation">]</span>output <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1,0</span>,1<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">0,0</span>,0<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">1,0</span>,1<span class="token punctuation">]</span><span class="token punctuation">]</span>input  <span class="token builtin class-name">:</span> matrix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0,1</span>,2,0<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">3,4</span>,5,2<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">1,3</span>,1,5<span class="token punctuation">]</span><span class="token punctuation">]</span>output <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0,0</span>,0,0<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">0,4</span>,5,0<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">0,3</span>,1,0<span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路1 辅助标记</strong></p><ul><li>定义两个标记变量，记录第一行、第一列是否初始时就存在0</li><li>以第一行和第一列作为该行/列是否存在0的标记空间</li><li>首先遍历第一行，若第一行初始就存在0，则置标记flagRow = true</li><li>然后遍历第一列，若第一列初始就存在0，则置标记flagCol = true</li><li>然后遍历数组中除了第一行和第一列之外的部分，若matrix[i][j] = 0，则置为该元素对应行、列的首元素为0，即令 matrix[i][0] = matrix[0][j] = 0</li><li>遍历数组中除了第一行和第一列之外的部分，若某元素matrix[i][j]对应行的首元素和该元素对应列的首元素均为0，即matrix[i][0] = matrix[0][j] = 0，则置matrix[i][j]=0</li><li>检查标记flagRow，若flagRow = true，则将首行元素全部置为0</li><li>检查标记flagCol，若flagCol = true，则将首列元素全部置为0</li><li>单独标记和遍历首行和首列元素，可能会导致不必要的置0操作，将不应该置为0的元素也置0了</li><li>空间复杂度 O(1)</li></ul><p><strong>思路2 辅助数组</strong></p><ul><li>定义两个标记数组flagRow[matrix.length]、flagCol[matrix[0].length]，分别记录发现0的行列位置</li><li>当某元素 matrix[i][j] = 0 时，置对应的行列标记数组中的元素为0，即flagRow[i] = flagCol[j] = true</li><li>遍历整个二维数组，以遍历到元素 matrix[i][j] 为例，当行 / 列标记数组对应位置元素值为 true 时，证明当前元素位于需要被全部置为0的 行 / 列，将该元素置为0，即matrix[i][j] = 0</li><li>空间复杂度O(m + n)</li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setZeroes</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">boolean</span> flagRow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flagCol <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                flagRow <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                flagCol <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"flagRow : "</span> <span class="token operator">+</span> flagRow<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"flagCol : "</span> <span class="token operator">+</span> flagCol<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"set flag---------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t          "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"set zero---------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t          "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"judge first ---------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flagRow<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flagCol<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路2代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution2</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 辅助数组</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setZeroes</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> flagRow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>matrix<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> flagCol <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    flagRow<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    flagCol<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"set zero---------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>flagRow<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">||</span> flagCol<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定一个 m x n 的矩阵，如果一个元素为 0 ，则将其所在行和列的所有元素原地都设为 0 。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; matrix &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1,1&lt;/span&gt;,1&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1,0&lt;/span&gt;,1&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1,1&lt;/span&gt;,1&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1,0&lt;/span&gt;,1&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0,0&lt;/span&gt;,0&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1,0&lt;/span&gt;,1&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; matrix &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0,1&lt;/span&gt;,2,0&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3,4&lt;/span&gt;,5,2&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1,3&lt;/span&gt;,1,5&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0,0&lt;/span&gt;,0,0&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0,4&lt;/span&gt;,5,0&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0,3&lt;/span&gt;,1,0&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
    <category term="数组" scheme="https://hexo.flower48237.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>d2lzh_pytorch包报错问题解决</title>
    <link href="https://hexo.flower48237.com/archives/78978eb1.html"/>
    <id>https://hexo.flower48237.com/archives/78978eb1.html</id>
    <published>2021-12-10T03:00:00.000Z</published>
    <updated>2021-12-21T14:40:39.277Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="报错："><a href="#报错：" class="headerlink" title="报错："></a>报错：</h4><ul><li>ModuleNotFoundError: No module named ‘d2lzh_pytorch’</li><li>d2lzh_pytorch包中找不到名为’xxx’的属性/函数，如  <pre class="line-numbers language-python" data-language="python"><code class="language-python">module <span class="token string">'d2lzh_pytorch'</span> has no attribute <span class="token string">'use_svg_display()'</span>module <span class="token string">'d2lzh_pytorch'</span> has no attribute 'load_data_fashion_mnist<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><span id="more"></span><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><ul><li>方法1、放到Jupyter工作目录<ul><li><a href="https://github.com/ShusenTang/Dive-into-DL-PyTorch/tree/master/code/d2lzh_pytorch">下载d2lzh_pytorch文件夹</a>，将其放置到当前Jupyter的工作目录的根目录中即可</li></ul></li><li>方法2、放到虚拟环境的包安装目录<ul><li><a href="https://github.com/ShusenTang/Dive-into-DL-PyTorch/tree/master/code/d2lzh_pytorch">下载d2lzh_pytorch文件夹</a>，将其放置到anaconda虚拟环境的包路径下，如：Anaconda/envs/pytorch(虚拟环境名)/Lib/site-packages/</li><li>注释代码中的sys.path.append(“..”)，使其从site-packages中找到d2lzh_pytorch包并引入</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;报错：&quot;&gt;&lt;a href=&quot;#报错：&quot; class=&quot;headerlink&quot; title=&quot;报错：&quot;&gt;&lt;/a&gt;报错：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;ModuleNotFoundError: No module named ‘d2lzh_pytorch’&lt;/li&gt;
&lt;li&gt;d2lzh_pytorch包中找不到名为’xxx’的属性/函数，如  &lt;pre class=&quot;line-numbers language-python&quot; data-language=&quot;python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;module &lt;span class=&quot;token string&quot;&gt;&#39;d2lzh_pytorch&#39;&lt;/span&gt; has no attribute &lt;span class=&quot;token string&quot;&gt;&#39;use_svg_display()&#39;&lt;/span&gt;
module &lt;span class=&quot;token string&quot;&gt;&#39;d2lzh_pytorch&#39;&lt;/span&gt; has no attribute &#39;load_data_fashion_mnist&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;


&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="D2L" scheme="https://hexo.flower48237.com/categories/D2L/"/>
    
    
    <category term="深度学习" scheme="https://hexo.flower48237.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="PyTorch" scheme="https://hexo.flower48237.com/tags/PyTorch/"/>
    
    <category term="Jupyter" scheme="https://hexo.flower48237.com/tags/Jupyter/"/>
    
    <category term="Python" scheme="https://hexo.flower48237.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Typora本地图片上传到图床</title>
    <link href="https://hexo.flower48237.com/archives/e43ae7cd.html"/>
    <id>https://hexo.flower48237.com/archives/e43ae7cd.html</id>
    <published>2021-12-09T12:00:00.000Z</published>
    <updated>2021-12-21T14:40:39.272Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><p>使用Typora写文档时上传图片的路径默认是本地磁盘的路径。导致文档上传到csdn等博客网站时，出现图片失效无法识别的问题。<br>设置Typora使用PicGo-Core将本地图片上传到图床，可以解决此问题（<a href="https://picgo.github.io/PicGo-Core-Doc/zh/guide/">PicGo-Core</a>，<a href="https://support.typora.io/Upload-Image/#picgo-core-command-line-opensource">Typora Upload Images</a>）。</p><span id="more"></span><p>步骤如下：</p><h3 id="1-修改插入图片设置"><a href="#1-修改插入图片设置" class="headerlink" title="1.修改插入图片设置"></a>1.修改插入图片设置</h3><ul><li>进入“文件 –&gt; 偏好设置 –&gt; 图像 –&gt;”</li><li>将 <strong>插入图片时的操作</strong> 修改为“==上传图片==”<img src="https://img-blog.csdnimg.cn/img_convert/bd8818aad79d16b3dadbdc422238ccf9.png" alt="image-20211209165704146" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://img-blog.csdnimg.cn/img_convert/bd8818aad79d16b3dadbdc422238ccf9.png" class="lozad post-image"></li></ul><h3 id="2-下载PicGo-Core"><a href="#2-下载PicGo-Core" class="headerlink" title="2.下载PicGo-Core"></a>2.下载PicGo-Core</h3><h4 id="2-1-选择上传服务"><a href="#2-1-选择上传服务" class="headerlink" title="2.1 选择上传服务"></a>2.1 选择上传服务</h4><ul><li>在偏好设置——图像中，选择上传服务为“==PicGo-Core(command line)==”<br><img src="https://img-blog.csdnimg.cn/img_convert/2041698e0d1741bb0d801a4401809123.png" alt="image-20211209165735991" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://img-blog.csdnimg.cn/img_convert/2041698e0d1741bb0d801a4401809123.png" class="lozad post-image"><h4 id="2-2-点击下载或更新"><a href="#2-2-点击下载或更新" class="headerlink" title="2.2 点击下载或更新"></a>2.2 点击下载或更新</h4></li><li>系统检测后会提示是否同意下载，同意下载即可<br><img src="https://img-blog.csdnimg.cn/img_convert/0bffb31e4ad60e8c2ad55749b60cae34.png" alt="image-20211209165926187" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://img-blog.csdnimg.cn/img_convert/0bffb31e4ad60e8c2ad55749b60cae34.png" class="lozad post-image"><h3 id="3-配置SM-MS"><a href="#3-配置SM-MS" class="headerlink" title="3.配置SM.MS"></a>3.配置SM.MS</h3><h4 id="3-1-在smms官网注册免费账号"><a href="#3-1-在smms官网注册免费账号" class="headerlink" title="3.1 在smms官网注册免费账号"></a>3.1 在smms官网注册免费账号</h4></li><li><a href="https://sm.ms/home/">smms官网链接</a></li><li>注册免费账号，会有5G免费内存<br><img src="https://img-blog.csdnimg.cn/img_convert/5eabcec973a5e253b7bb715225ba4a53.png" alt="image-20211209170201012" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://img-blog.csdnimg.cn/img_convert/5eabcec973a5e253b7bb715225ba4a53.png" class="lozad post-image"></li></ul><h4 id="3-2-获取token"><a href="#3-2-获取token" class="headerlink" title="3.2 获取token"></a>3.2 获取token</h4><ul><li>从dashboard的api token中复制token<img src="https://img-blog.csdnimg.cn/img_convert/b394a01e1f850d18761b44c3db747e50.png" alt="image-20211209170306173" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://img-blog.csdnimg.cn/img_convert/b394a01e1f850d18761b44c3db747e50.png" class="lozad post-image"><br><img src="https://img-blog.csdnimg.cn/img_convert/69edd6085a844eace1848d50052ac2ad.png" alt="image-20211209170408404" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://img-blog.csdnimg.cn/img_convert/69edd6085a844eace1848d50052ac2ad.png" class="lozad post-image"><h3 id="4-修改PicGo-Core配置文件"><a href="#4-修改PicGo-Core配置文件" class="headerlink" title="4.修改PicGo-Core配置文件"></a>4.修改PicGo-Core配置文件</h3></li></ul><h4 id="4-1-打开配置文件"><a href="#4-1-打开配置文件" class="headerlink" title="4.1 打开配置文件"></a>4.1 打开配置文件</h4><ul><li><p>图像设置界面“==打开配置文件==”<img src="https://img-blog.csdnimg.cn/img_convert/be64139ac3895414027733c778372d2d.png" alt="image-20211209170443384" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://img-blog.csdnimg.cn/img_convert/be64139ac3895414027733c778372d2d.png" class="lozad post-image"></p><h4 id="4-2-填写token"><a href="#4-2-填写token" class="headerlink" title="4.2 填写token"></a>4.2 填写token</h4></li><li><p>将以下代码和刚才复制的token填写到配置文件中</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"picBed"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"current"</span><span class="token operator">:</span> <span class="token string">"smms"</span><span class="token punctuation">,</span>    <span class="token property">"smms"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"刚才复制的token"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"picgoPlugins"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="5-图片上传测试"><a href="#5-图片上传测试" class="headerlink" title="5.图片上传测试"></a>5.图片上传测试</h3><ul><li>在Typora的操作界面新建.md文件并粘贴图片测试是否能够上传</li><li>本文所有图片均为使用PicGo-Core上传的</li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;问题：&quot;&gt;&lt;a href=&quot;#问题：&quot; class=&quot;headerlink&quot; title=&quot;问题：&quot;&gt;&lt;/a&gt;问题：&lt;/h3&gt;&lt;p&gt;使用Typora写文档时上传图片的路径默认是本地磁盘的路径。导致文档上传到csdn等博客网站时，出现图片失效无法识别的问题。&lt;br&gt;设置Typora使用PicGo-Core将本地图片上传到图床，可以解决此问题（&lt;a href=&quot;https://picgo.github.io/PicGo-Core-Doc/zh/guide/&quot;&gt;PicGo-Core&lt;/a&gt;，&lt;a href=&quot;https://support.typora.io/Upload-Image/#picgo-core-command-line-opensource&quot;&gt;Typora Upload Images&lt;/a&gt;）。&lt;/p&gt;</summary>
    
    
    
    <category term="其他" scheme="https://hexo.flower48237.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="其他" scheme="https://hexo.flower48237.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>win10使用Anaconda创建可使用PyTorch虚拟环境</title>
    <link href="https://hexo.flower48237.com/archives/2abdf615.html"/>
    <id>https://hexo.flower48237.com/archives/2abdf615.html</id>
    <published>2021-12-08T14:00:00.000Z</published>
    <updated>2021-12-21T14:40:39.280Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1、安装Anaconda"><a href="#1、安装Anaconda" class="headerlink" title="1、安装Anaconda"></a>1、安装Anaconda</h2><ul><li>可参考<a href="https://blog.csdn.net/flower_48237/article/details/121798811">安装Anaconda+常用的conda命令+Anaconda换源+安装Jupyter</a></li></ul><h2 id="2、创建虚拟环境"><a href="#2、创建虚拟环境" class="headerlink" title="2、创建虚拟环境"></a>2、创建虚拟环境</h2><ul><li>win10系统，进入cmd</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建名为pytorch的虚拟环境</span>conda create --name pytorch <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.6</span><span class="token comment"># 激活名为pytorch的虚拟环境</span>conda activate pytorch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装PyTorch包"><a href="#安装PyTorch包" class="headerlink" title="安装PyTorch包"></a>安装PyTorch包</h2><span id="more"></span><ul><li><p>进入<a href="https://pytorch.org/get-started/locally/">PyTorch官网</a>，根据提示选择适合自己电脑配置的安装命令，如图，蓝色不跟需要注意选择<img src="https://img-blog.csdnimg.cn/0e5dd92a795040e0a6daab5dc56ac70f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://img-blog.csdnimg.cn/0e5dd92a795040e0a6daab5dc56ac70f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" class="lozad post-image"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在pytorch虚拟环境中使用官网提示的命令安装PyTorch，以仅使用cpu为例：</span>conda <span class="token function">install</span> pytorch torchvision torchaudio cpuonly -c pytorch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>命令行输入<code>python</code>进入python，并输入下面代码可查看pytorch是否安装成功：</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torchvision<span class="token keyword">print</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>__version<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>安装成功提示如图 <img src="https://img-blog.csdnimg.cn/2a045f0e3c5245c4924820c79ee3b50b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-luSHFDuQ-1638969271298)(C:\Users\Q\AppData\Roaming\Typora\typora-user-images\image-20211208164303307.png)\]" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://img-blog.csdnimg.cn/2a045f0e3c5245c4924820c79ee3b50b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" class="lozad post-image"></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1、安装Anaconda&quot;&gt;&lt;a href=&quot;#1、安装Anaconda&quot; class=&quot;headerlink&quot; title=&quot;1、安装Anaconda&quot;&gt;&lt;/a&gt;1、安装Anaconda&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;可参考&lt;a href=&quot;https://blog.csdn.net/flower_48237/article/details/121798811&quot;&gt;安装Anaconda+常用的conda命令+Anaconda换源+安装Jupyter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2、创建虚拟环境&quot;&gt;&lt;a href=&quot;#2、创建虚拟环境&quot; class=&quot;headerlink&quot; title=&quot;2、创建虚拟环境&quot;&gt;&lt;/a&gt;2、创建虚拟环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;win10系统，进入cmd&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 创建名为pytorch的虚拟环境&lt;/span&gt;
conda create --name pytorch &lt;span class=&quot;token assign-left variable&quot;&gt;python&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3.6&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# 激活名为pytorch的虚拟环境&lt;/span&gt;
conda activate pytorch&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;安装PyTorch包&quot;&gt;&lt;a href=&quot;#安装PyTorch包&quot; class=&quot;headerlink&quot; title=&quot;安装PyTorch包&quot;&gt;&lt;/a&gt;安装PyTorch包&lt;/h2&gt;</summary>
    
    
    
    <category term="D2L" scheme="https://hexo.flower48237.com/categories/D2L/"/>
    
    
    <category term="深度学习" scheme="https://hexo.flower48237.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="PyTorch" scheme="https://hexo.flower48237.com/tags/PyTorch/"/>
    
    <category term="Python" scheme="https://hexo.flower48237.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>安装Anaconda+常用的conda命令+Anaconda换源+安装Jupyter</title>
    <link href="https://hexo.flower48237.com/archives/39dee8e5.html"/>
    <id>https://hexo.flower48237.com/archives/39dee8e5.html</id>
    <published>2021-12-08T13:00:00.000Z</published>
    <updated>2021-12-21T14:40:39.279Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="安装Anaconda"><a href="#安装Anaconda" class="headerlink" title="安装Anaconda"></a>安装Anaconda</h2><ul><li><a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">下载并安装Anaconda</a></li></ul><h2 id="常用的conda命令"><a href="#常用的conda命令" class="headerlink" title="常用的conda命令"></a>常用的conda命令</h2>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建虚拟环境</span>conda create -n pytorch <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.6</span><span class="token comment"># 删除虚拟环境</span>conda <span class="token function">env</span> remove -n pytorch<span class="token comment"># 激活指定虚拟环境</span>conda activate pytorch<span class="token comment"># 退出当前虚拟环境</span>conda deactivate<span class="token comment"># 安装包，如numpy（提前进入目标环境）</span>conda <span class="token function">install</span> numpy或pip <span class="token function">install</span> numpy<span class="token comment"># 安装指定版本的包，如numpy</span>pip <span class="token function">install</span> <span class="token assign-left variable">numpy</span><span class="token operator">==</span><span class="token number">1.6</span>.0<span class="token comment"># 升级包</span>pip <span class="token function">install</span> --upgrade numpy<span class="token comment"># 卸载包</span>pip uninstall numpy<span class="token comment"># 查看conda中所有环境</span>conda info -e<span class="token comment"># 查看某个环境中安装的所有包（提前进入目标环境）</span>conda list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h2 id="Anaconda换源"><a href="#Anaconda换源" class="headerlink" title="Anaconda换源"></a>Anaconda换源</h2><ul><li>修改镜像为国内源，如<a href="https://mirror.tuna.tsinghua.edu.cn/help/anaconda/">清华源</a></li></ul><h2 id="安装Jupyter"><a href="#安装Jupyter" class="headerlink" title="安装Jupyter"></a>安装Jupyter</h2><ul><li><p>安装Anaconda软件之后，在首页找到Jupyter点击Install。</p></li><li><p>不同虚拟环境下各自的Jupyter，只需提前在Anaconda软件界面切换虚拟环境。<img src="https://img-blog.csdnimg.cn/924a3454cffd4f64b270843cf8e0a9f1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-ZeDiUbNm-1638962174624)(C:\Users\Q\AppData\Roaming\Typora\typora-user-images\image-20211208170503225.png)\]" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://img-blog.csdnimg.cn/924a3454cffd4f64b270843cf8e0a9f1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" class="lozad post-image"></p></li><li><p>为不同的jupyter指定不同的工作路径，首先为这个jupyter新增一个本地工作路径<code>path</code>，找到“开始”处新增的快捷方式：Jupyter Notebook (pytorch)，右键打开文件路径，再右键属性，修改<strong>目标(T)</strong>，把<code>&quot;%USERPROFILE&quot;</code>修改为指定路径path，如图。<br><img src="https://img-blog.csdnimg.cn/b46cec417d1e454ea23d617f1bc9755d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="&lt;img src=&quot;C:\Users\Q\AppData\Roaming\Typora\typora-user-images\image-20211208170823226.png&quot; alt=&quot;image-20211208170823226&quot; style=&quot;zoom: 33%;&quot; /&gt;" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://img-blog.csdnimg.cn/b46cec417d1e454ea23d617f1bc9755d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" class="lozad post-image"><br><img src="https://img-blog.csdnimg.cn/35e6df5b53eb40ffa276e2b3f52eece8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="&lt;img src=&quot;C:\Users\Q\AppData\Roaming\Typora\typora-user-images\image-20211208171047220.png&quot; alt=&quot;image-20211208171047220&quot; style=&quot;zoom:33%;&quot; /&gt;" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://img-blog.csdnimg.cn/35e6df5b53eb40ffa276e2b3f52eece8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" class="lozad post-image"></p></li></ul><ul><li>修改后单击该快捷方式即可进入网页使用JupyterNoteBook</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;安装Anaconda&quot;&gt;&lt;a href=&quot;#安装Anaconda&quot; class=&quot;headerlink&quot; title=&quot;安装Anaconda&quot;&gt;&lt;/a&gt;安装Anaconda&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/&quot;&gt;下载并安装Anaconda&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;常用的conda命令&quot;&gt;&lt;a href=&quot;#常用的conda命令&quot; class=&quot;headerlink&quot; title=&quot;常用的conda命令&quot;&gt;&lt;/a&gt;常用的conda命令&lt;/h2&gt;  &lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 创建虚拟环境&lt;/span&gt;
conda create -n pytorch &lt;span class=&quot;token assign-left variable&quot;&gt;python&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3.6&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# 删除虚拟环境&lt;/span&gt;
conda &lt;span class=&quot;token function&quot;&gt;env&lt;/span&gt; remove -n pytorch
&lt;span class=&quot;token comment&quot;&gt;# 激活指定虚拟环境&lt;/span&gt;
conda activate pytorch
&lt;span class=&quot;token comment&quot;&gt;# 退出当前虚拟环境&lt;/span&gt;
conda deactivate
&lt;span class=&quot;token comment&quot;&gt;# 安装包，如numpy（提前进入目标环境）&lt;/span&gt;
conda &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; numpy
或
pip &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; numpy
&lt;span class=&quot;token comment&quot;&gt;# 安装指定版本的包，如numpy&lt;/span&gt;
pip &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1.6&lt;/span&gt;.0
&lt;span class=&quot;token comment&quot;&gt;# 升级包&lt;/span&gt;
pip &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --upgrade numpy
&lt;span class=&quot;token comment&quot;&gt;# 卸载包&lt;/span&gt;
pip uninstall numpy
&lt;span class=&quot;token comment&quot;&gt;# 查看conda中所有环境&lt;/span&gt;
conda info -e
&lt;span class=&quot;token comment&quot;&gt;# 查看某个环境中安装的所有包（提前进入目标环境）&lt;/span&gt;
conda list&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="D2L" scheme="https://hexo.flower48237.com/categories/D2L/"/>
    
    
    <category term="深度学习" scheme="https://hexo.flower48237.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Jupyter" scheme="https://hexo.flower48237.com/tags/Jupyter/"/>
    
    <category term="Anaconda" scheme="https://hexo.flower48237.com/tags/Anaconda/"/>
    
    <category term="conda" scheme="https://hexo.flower48237.com/tags/conda/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot+Vue项目部署到Linux服务器</title>
    <link href="https://hexo.flower48237.com/archives/b51853f8.html"/>
    <id>https://hexo.flower48237.com/archives/b51853f8.html</id>
    <published>2021-12-08T01:00:00.000Z</published>
    <updated>2022-01-19T14:07:01.163Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Note:<br>1、Linux服务器选用的是CentOS7.7，其他类型也可以<br>2、需要在服务器配置jdk和Nginx<br>3、后端打包类型为jar包，war包需要自行修改后端配置<br>4、暂未部署Docker，后续更新</p></blockquote><span id="more"></span><h2 id="1、服务器配置"><a href="#1、服务器配置" class="headerlink" title="1、服务器配置"></a>1、服务器配置</h2><h3 id="1-1-安装宝塔"><a href="#1-1-安装宝塔" class="headerlink" title="1.1 安装宝塔"></a>1.1 安装宝塔</h3><ul><li><p>参考<a href="https://www.bt.cn/bbs/thread-19376-1-1.html">宝塔官方教程</a>即可，首先登录服务器，设置安全组放行端口，把8888放开，然后使用终端执行命令（以CentOS为例）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> -y <span class="token function">wget</span> <span class="token operator">&amp;&amp;</span> <span class="token function">wget</span> -O install.sh http://download.bt.cn/install/install_6.0.sh <span class="token operator">&amp;&amp;</span> <span class="token function">sh</span> install.sh 2c87998c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装完成后记录终端处的登录入口、账号、密码，然后登录</p></li><li><p>登录后需要注册个账号，注册绑定后即可正常使用宝塔</p></li></ul><h3 id="1-2-安装并配置MySQL、Redis、Nginx"><a href="#1-2-安装并配置MySQL、Redis、Nginx" class="headerlink" title="1.2 安装并配置MySQL、Redis、Nginx"></a>1.2 安装并配置MySQL、Redis、Nginx</h3><ul><li>使用宝塔安装Mysql、Redis、Nginx，便于管理</li><li>在宝塔的软件商店中搜索Mysql、Redis、Nginx并快捷安装</li></ul><h3 id="1-3-创建数据库并导入数据"><a href="#1-3-创建数据库并导入数据" class="headerlink" title="1.3 创建数据库并导入数据"></a>1.3 创建数据库并导入数据</h3><ul><li>进入宝塔的数据库界面，添加数据库，填写数据库名、选择字符集、设置访问权限为<strong>所有人</strong>（这样才能使用其他终端访问），完成后提交，提示添加成功即为创建成功<br><img src="https://img-blog.csdnimg.cn/1071649913bc4f13adaae52735417a23.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-fkjp1sk8-1638865326066)(C:\Users\Q\AppData\Roaming\Typora\typora-user-images\image-20211206191659514.png)\]" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://img-blog.csdnimg.cn/1071649913bc4f13adaae52735417a23.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" class="lozad post-image"></li><li>创建成功后，点击导入，把本地数据库的测试数据导入到服务器中的数据库。提示导入数据库成功即可。<img src="https://img-blog.csdnimg.cn/9e6c0ba2679d44adbb5942704d21c09c.png" alt="在这里插入图片描述" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://img-blog.csdnimg.cn/9e6c0ba2679d44adbb5942704d21c09c.png" class="lozad post-image"><br><img src="https://img-blog.csdnimg.cn/2a15f18acdd844408670d127b9e72e02.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://img-blog.csdnimg.cn/2a15f18acdd844408670d127b9e72e02.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" class="lozad post-image">)<img src="https://img-blog.csdnimg.cn/b5630943ab0c48d99467dfcfcae2e13e.png" alt="在这里插入图片描述" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://img-blog.csdnimg.cn/b5630943ab0c48d99467dfcfcae2e13e.png" class="lozad post-image"></li></ul><h3 id="1-4-安装并配置jdk"><a href="#1-4-安装并配置jdk" class="headerlink" title="1.4 安装并配置jdk"></a>1.4 安装并配置jdk</h3><h4 id="1-4-1-官网下载JDK并上传到服务器"><a href="#1-4-1-官网下载JDK并上传到服务器" class="headerlink" title="1.4.1 官网下载JDK并上传到服务器"></a>1.4.1 官网下载JDK并上传到服务器</h4><ul><li><p>从<a href="https://www.oracle.com/java/technologies/downloads/#java8">官网下载</a>可用于Linux的jdk包，通过宝塔上传到服务器</p></li><li><p>建议上传到/www/server下</p><blockquote><p>PS：/www/server是宝塔软件的默认安装目录，把软件都放到一起，方便查找</p></blockquote></li><li><p>然后使用终端，进入jdk的上传目录，使用解压命令，把上传的jdk文件解压到当前目录，然后把解压后的文件夹重命名为jdk8</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -zxvf jdk-8u311-linux-x64.tar.gz<span class="token function">mv</span> jdk1.8.0_311 jdk8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h4 id="1-4-2-配置环境变量"><a href="#1-4-2-配置环境变量" class="headerlink" title="1.4.2 配置环境变量"></a>1.4.2 配置环境变量</h4><ul><li><p>1.打开 /etc/profile 文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>2.在 profile 文件末尾，配置jdk环境</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/www/server/jdk8<span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>$:CLASSPATH:<span class="token variable">$JAVA_HOME</span>/lib/<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token environment constant">$PATH</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">JRE_HOME</span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/jre<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>3.使 profile 生效</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>4.查看jdk是否配置成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">java -version <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示版本号即为配置成功<br><img src="https://img-blog.csdnimg.cn/89f0b3afb759448e9c1bdd24b38b1f16.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="&lt;img src=&quot;C:\Users\Q\AppData\Roaming\Typora\typora-user-images\image-20211205185540742.png&quot; alt=&quot;image-20211205185540742&quot; style=&quot;zoom: 40%;&quot; /&gt;" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://img-blog.csdnimg.cn/89f0b3afb759448e9c1bdd24b38b1f16.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" class="lozad post-image"></p><h3 id="1-5-安全组配置、放行端口配置"><a href="#1-5-安全组配置、放行端口配置" class="headerlink" title="1.5  安全组配置、放行端口配置"></a>1.5  安全组配置、放行端口配置</h3></li></ul><h4 id="1-5-1-安全组配置"><a href="#1-5-1-安全组配置" class="headerlink" title="1.5.1 安全组配置"></a>1.5.1 安全组配置</h4><ul><li><p>登录云服务器，在控制台处找到服务器，然后对安全组规则进行更改</p></li><li><p>以华为云为例，在入方向规则处添加前后端使用的端口（如8080和8081）<br><img src="https://img-blog.csdnimg.cn/77388f3c42be44a9ace3f761099a122c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-zB2nM8g3-1638865326069)(C:\Users\Q\AppData\Roaming\Typora\typora-user-images\image-20211207141808228.png)\]" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://img-blog.csdnimg.cn/77388f3c42be44a9ace3f761099a122c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" class="lozad post-image"></p><h4 id="1-5-2-放行端口配置"><a href="#1-5-2-放行端口配置" class="headerlink" title="1.5.2 放行端口配置"></a>1.5.2 放行端口配置</h4></li><li><p>在宝塔的安全功能中放行前后端项目需要使用的端口，如8080和8081<img src="https://img-blog.csdnimg.cn/218017c99b1a4501b6da994d8c15b92e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://img-blog.csdnimg.cn/218017c99b1a4501b6da994d8c15b92e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" class="lozad post-image"></p><h2 id="2、SpringBoot项目配置"><a href="#2、SpringBoot项目配置" class="headerlink" title="2、SpringBoot项目配置"></a>2、SpringBoot项目配置</h2></li></ul><h3 id="2-1-配置修改"><a href="#2-1-配置修改" class="headerlink" title="2.1 配置修改"></a>2.1 配置修改</h3><ul><li><p>后端拆分application.yml配置文件，可拆分出本地dev和生产pro两个（也可以多拆出test）<img src="https://img-blog.csdnimg.cn/77ca91faa60c4ff48261a68a38c284b9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://img-blog.csdnimg.cn/77ca91faa60c4ff48261a68a38c284b9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" class="lozad post-image"></p></li><li><p>application.yml文件中保留通用配置<img src="https://img-blog.csdnimg.cn/7e40290fe7e14f4480f026f523f17ca4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://img-blog.csdnimg.cn/7e40290fe7e14f4480f026f523f17ca4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" class="lozad post-image"></p></li><li><p>application-dev.yml文件中配置本地运行项目所用的配置<img src="https://img-blog.csdnimg.cn/1ba3b831d83c4ddaa18284c39b011efa.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://img-blog.csdnimg.cn/1ba3b831d83c4ddaa18284c39b011efa.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" class="lozad post-image"></p></li><li><p>application-pro.yml文件中配置服务器中运行项目所用的配置，其中服务器数据库名称，即为1.3节中添加的数据库名，密码从宝塔界面点击复制即可，注意不是使用root密码，而是使用刚创建的数据库的密码（下图有误，redis的host保持127.0.0.1即可）<img src="https://img-blog.csdnimg.cn/b23b0a832651403185814cfab9f2147b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://img-blog.csdnimg.cn/b23b0a832651403185814cfab9f2147b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" class="lozad post-image">)<img src="https://img-blog.csdnimg.cn/97fe5323b1c2405d8d479a5b3686efff.png" alt="在这里插入图片描述" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://img-blog.csdnimg.cn/97fe5323b1c2405d8d479a5b3686efff.png" class="lozad post-image"></p></li><li><p>dev和pro的不同之处主要是MySQL的配置。</p><ul><li>pro中需要按照<strong>服务器的IP和数据库配置</strong>来填写，可在application.yml文件中修改active指向pro，来测试是否能够成功连接服务器中的数据库</li></ul></li></ul><h3 id="2-2-打包"><a href="#2-2-打包" class="headerlink" title="2.2 打包"></a>2.2 打包</h3><ul><li><p>修改application.yml文件中的active:pro，然后执行maven clean，清除本地测试时生成的jar包<img src="https://img-blog.csdnimg.cn/3150f7541e3748149f0b32032c789857.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://img-blog.csdnimg.cn/3150f7541e3748149f0b32032c789857.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" class="lozad post-image"></p></li><li><p>执行maven package，后端项目打包完成<img src="https://img-blog.csdnimg.cn/371e2ef7900a453b8e0fa74d5aecafe7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://img-blog.csdnimg.cn/371e2ef7900a453b8e0fa74d5aecafe7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" class="lozad post-image"></p><h3 id="2-3-上传到服务器"><a href="#2-3-上传到服务器" class="headerlink" title="2.3 上传到服务器"></a>2.3 上传到服务器</h3></li><li><p>找到项目路径下打包出的文件 target，找到target下的打包文件，后缀名是 .jar，即可运行的jar包，然后使用宝塔将其从本地路径中上传到服务器，路径可以为 /www/wwwroot/project_name，末尾的project_name文件夹可按照自己需求新建</p><blockquote><p> PS：/www/wwwroot路径是宝塔默认建站目录，放到此处便于查找</p></blockquote><p><img src="https://img-blog.csdnimg.cn/a4fa2547b3784434a70c23e9c7b66099.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-lvcAnWm8-1638865326074)(C:\Users\Q\AppData\Roaming\Typora\typora-user-images\image-20211207142402694.png)\]" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://img-blog.csdnimg.cn/a4fa2547b3784434a70c23e9c7b66099.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" class="lozad post-image"></p></li></ul><h3 id="2-4-后端项目服务器配置"><a href="#2-4-后端项目服务器配置" class="headerlink" title="2.4 后端项目服务器配置"></a>2.4 后端项目服务器配置</h3><ul><li>只需确保jdk安装成功，且jar包上传成功即可</li></ul><h3 id="2-5-运行测试"><a href="#2-5-运行测试" class="headerlink" title="2.5 运行测试"></a>2.5 运行测试</h3><h4 id="2-5-1-运行后端jar包"><a href="#2-5-1-运行后端jar包" class="headerlink" title="2.5.1 运行后端jar包"></a>2.5.1 运行后端jar包</h4><p><strong>在Linux系统下有多种运行jar包的方式。建议使用方法d，保留项目运行日志。日志文件会生成到项目同级路径下。</strong></p><ul><li><p>a.当前终端被锁定，可按CTRL + C打断程序运行，或关闭窗口退出程序</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">java -jar xxx.jar  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>b.当前终端不被锁定，但是当窗口关闭时，程序中止运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">java -jar xxx.jar <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>c.不挂断运行命令,当账户退出或终端关闭时,程序仍然运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nohup</span> java -jar xxxx.jar <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>d.指定输出日志文件，不挂断运行命令，退出或终端关闭时程序仍然运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nohup</span> java -jar xxx.jar <span class="token operator">></span> project.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="2-5-2-查看日志文件"><a href="#2-5-2-查看日志文件" class="headerlink" title="2.5.2 查看日志文件"></a>2.5.2 查看日志文件</h4><ul><li><p>建议使用动态查看命令，查看实时更新的日志，打开一个<strong>新的终端</strong>，输入如下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tail</span> -f project.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="2-5-2-停止运行后端jar包"><a href="#2-5-2-停止运行后端jar包" class="headerlink" title="2.5.2 停止运行后端jar包"></a>2.5.2 停止运行后端jar包</h4><ul><li><p>若使用2.5.1种的方法a、b，直接关闭终端即可</p></li><li><p>若使用2.5.1种的方法c、d，需要查找后端使用端口（这个端口号是填写在SpringBoot项目的application.yml文件中server项中的）占用的进程号，然后关闭进程，即可停掉jar包的运行。命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> -tunlp <span class="token operator">|</span> <span class="token function">grep</span> 端口号// 得到进程号<span class="token function">kill</span> -9 进程号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>操作如图，8081是我的后端项目占用的端口号，13061是进程ID<br><img src="https://img-blog.csdnimg.cn/1351d53e7c244ab4a296880ca357f59e.png" alt="在这里插入图片描述" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://img-blog.csdnimg.cn/1351d53e7c244ab4a296880ca357f59e.png" class="lozad post-image"></p></li></ul><h2 id="3、Vue项目配置"><a href="#3、Vue项目配置" class="headerlink" title="3、Vue项目配置"></a>3、Vue项目配置</h2><h3 id="3-1-配置修改"><a href="#3-1-配置修改" class="headerlink" title="3.1 配置修改"></a>3.1 配置修改</h3><ul><li><p>axios.js文件的URL配置为  ==服务器公网IP:端口号==</p></li><li><pre><code class="javascript">axios.defaults.baseURL = &quot;http://服务器公网IP:端口号&quot;// axios.defaults.baseURL = &quot;http://localhost:端口号&quot; 本地使用localhost<pre class="line-numbers language-none"><code class="language-none">### 3.2 打包+ 打包命令  &#96;&#96;&#96;plain  npm run build<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li><li><p>打包后的文件名为dist，可在项目路径下查看</p></li></ul><h3 id="3-3-上传到服务器"><a href="#3-3-上传到服务器" class="headerlink" title="3.3 上传到服务器"></a>3.3 上传到服务器</h3><ul><li>通过宝塔可直接上传dist文件夹，如果没有宝塔，可以将dist文件夹压缩后上传到服务器</li><li>建议上传到与2.3节中提到的后端项目上传路径中，相同一个需求的前后端项目放到同一个文件夹中便于查找：/www/wwwroot/project_name</li></ul><h3 id="3-4-前端项目服务器配置"><a href="#3-4-前端项目服务器配置" class="headerlink" title="3.4 前端项目服务器配置"></a>3.4 前端项目服务器配置</h3><ul><li><p>需要对服务器的Nginx进行配置，以满足前端项目的运行</p></li><li><p>通过宝塔安装Nginx，其默认的配置文件会被备份为 nginx.conf.default，且生成一份新的配置文件 nginx.conf。</p></li><li><p>如果是使用宝塔安装的Nginx，则文件存放路径为/www/server/nginx/conf</p></li><li><p>首先从 nginx.conf.default 中复制一份以 server 为标签的代码，如下图：<img src="https://img-blog.csdnimg.cn/9b584e70197e40bb94719568fa0227ca.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://img-blog.csdnimg.cn/9b584e70197e40bb94719568fa0227ca.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" class="lozad post-image"></p></li><li><p>真正需要修改文件的是 <strong>nginx.conf</strong>，此文件可以通过宝塔界面的“软件商店”—“Nginx”—“设置”—“配置修改”来修改，在此处修改时如果修改的格式有误等错误会被提示无法保存<br><img src="https://img-blog.csdnimg.cn/a6504141d322426a9436a2a751e5308b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://img-blog.csdnimg.cn/a6504141d322426a9436a2a751e5308b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" class="lozad post-image"></p></li><li><p>将<strong>上一步复制的server代码段</strong>复制到文件中的 include 标签上方（配置文件中会有一个已经存在的server 标签，不需要覆盖，顺着它粘贴代码段A即可，不会冲突）</p></li><li><p>删除代码段中所有注释，保留四个未被注释的标签（listen、server_name、location / 、error_page）即可</p></li><li><p>修改上述四个标签</p><ul><li><p>(1)listen标签后填写前端项目要使用的端口号</p></li><li><p>(2)server_name标签填写服务器公网IP</p></li><li><p>(3)location标签的root标签填写vue项目的打包文件dist的路径</p></li><li><p>(4)location标签的添加一行代码标签防止刷新出现404</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">try_files <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ /index.html<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>(5)error_page标签不需要变动<br><img src="https://img-blog.csdnimg.cn/1768f6d6776c4e17bd4284b28b6980d8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="+ 修改后内容如图\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-N1RjvpYY-1638865326076)(C:\Users\Q\Desktop\屏幕截图 2021-12-07 152729.png)\]" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://img-blog.csdnimg.cn/1768f6d6776c4e17bd4284b28b6980d8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" class="lozad post-image"></p></li></ul></li></ul><ul><li>重载Nginx配置并重新启动即可，在宝塔的界面操作很方便<img src="https://img-blog.csdnimg.cn/0b0d6bfae871424aa9a9559eb8b01d22.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://img-blog.csdnimg.cn/0b0d6bfae871424aa9a9559eb8b01d22.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGlxOTgy,size_20,color_FFFFFF,t_70,g_se,x_16" class="lozad post-image"></li></ul><h3 id="3-5-运行测试"><a href="#3-5-运行测试" class="headerlink" title="3.5 运行测试"></a>3.5 运行测试</h3><ul><li>确保已经重载Nginx配置并重新启动</li><li>在浏览器输入<strong>服务器公网IP:端口</strong>，查看是否能够进入vue项目首页</li></ul><h2 id="4、部署到服务器的前后端联调测试"><a href="#4、部署到服务器的前后端联调测试" class="headerlink" title="4、部署到服务器的前后端联调测试"></a>4、部署到服务器的前后端联调测试</h2><h3 id="4-1-运行后端项目"><a href="#4-1-运行后端项目" class="headerlink" title="4.1 运行后端项目"></a>4.1 运行后端项目</h3><ul><li>nohup java -jar xxx.jar &gt; project.log</li></ul><h3 id="4-2-运行前端项目"><a href="#4-2-运行前端项目" class="headerlink" title="4.2 运行前端项目"></a>4.2 运行前端项目</h3><ul><li>启动Nginx</li></ul><h3 id="4-3-访问与功能测试"><a href="#4-3-访问与功能测试" class="headerlink" title="4.3 访问与功能测试"></a>4.3 访问与功能测试</h3><ul><li>浏览器输入<strong>服务器公网IP:端口</strong>，测试能否进入项目</li><li>测试项目功能是否完整可用</li><li>测试是否有功能与本地测试效果不符</li></ul><h2 id="5、后续部署Docker（待完成）"><a href="#5、后续部署Docker（待完成）" class="headerlink" title="5、后续部署Docker（待完成）"></a>5、后续部署Docker（待完成）</h2><h2 id="6、可能存在的问题："><a href="#6、可能存在的问题：" class="headerlink" title="6、可能存在的问题："></a>6、可能存在的问题：</h2><h3 id="1、打包失败"><a href="#1、打包失败" class="headerlink" title="1、打包失败"></a>1、打包失败</h3><ul><li><p>保错：</p><p>Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.22.2:test (default-test) on project XXX: There are test failures.</p><p>Please refer to D:\IDEAWorkSpace\blog\target\surefire-reports for the individual test results.<br>Please refer to dump files (if any exist) [date].dump, [date]-jvmRun[N].dump and [date].dumpstream.</p></li><li><p>解决</p><p>使用命令，跳过测试打包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mvn clean package -Dmaven.test.skip<span class="token operator">=</span>true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Note:&lt;br&gt;1、Linux服务器选用的是CentOS7.7，其他类型也可以&lt;br&gt;2、需要在服务器配置jdk和Nginx&lt;br&gt;3、后端打包类型为jar包，war包需要自行修改后端配置&lt;br&gt;4、暂未部署Docker，后续更新&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="SpringBoot+Vue" scheme="https://hexo.flower48237.com/categories/SpringBoot-Vue/"/>
    
    
    <category term="SpringBoot" scheme="https://hexo.flower48237.com/tags/SpringBoot/"/>
    
    <category term="Vue" scheme="https://hexo.flower48237.com/tags/Vue/"/>
    
    <category term="Linux" scheme="https://hexo.flower48237.com/tags/Linux/"/>
    
    <category term="云服务器" scheme="https://hexo.flower48237.com/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="部署" scheme="https://hexo.flower48237.com/tags/%E9%83%A8%E7%BD%B2/"/>
    
    <category term="Nginx" scheme="https://hexo.flower48237.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题105.从前序与中序遍历序列构造二叉树</title>
    <link href="https://hexo.flower48237.com/archives/5cd56a60.html"/>
    <id>https://hexo.flower48237.com/archives/5cd56a60.html</id>
    <published>2021-11-30T14:51:56.186Z</published>
    <updated>2021-12-21T14:40:39.323Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定一棵树的前序遍历 preorder 与中序遍历  inorder 。请构造二叉树并返回其根节点。</li><li>preorder 和 inorder 均无重复元素</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> preorder <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3,9</span>,20,15,7<span class="token punctuation">]</span>, inorder <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">9,3</span>,15,20,7<span class="token punctuation">]</span>output <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token number">3,9</span>,20,null,null,15,7<span class="token punctuation">]</span>input  <span class="token builtin class-name">:</span> preorder <span class="token operator">=</span> <span class="token punctuation">[</span>-1<span class="token punctuation">]</span>, inorder <span class="token operator">=</span> <span class="token punctuation">[</span>-1<span class="token punctuation">]</span>output <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>-1<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路 递归</strong></p><ul><li>根据前序遍历和中序遍历序列的性质，以及数组不含重复元素的性质</li><li>前序遍历的首个元素，是树的根节点，其后依次为根节点左子树的前序遍历序列（可为空）、根节点右子树的前序遍历序列（可为空）</li><li>中序遍历的根节点元素两侧，分别是根节点的左子树的中序遍历序列（可为空）、右子树的中序遍历序列（可为空）</li><li>每个子树的前序遍历和中序遍历序列依然符合上述性质</li><li>故使用 迭代 不断构建子树，退出标志是数组为空<ul><li>先取每次迭代中 前序遍历序列的首个元素 tree ，找到中序遍历序列中的值相等的元素位置</li><li>获取 tree 的 左子树 在前序遍历和中序遍历序列中的 子序列，复制到新的可用于新一轮迭代的数组leftPre、leftIn中</li><li>使用 tree 节点的前序遍历和中序遍历序列进行新一轮迭代，构建 tree节点的左子树    </li><li>获取 tree 的 右子树 在前序遍历和中序遍历序列中的 子序列，复制到新的可用于新一轮迭代的数组rightPre、rightIn中</li><li>使用 tree 节点的前序遍历和中序遍历序列进行新一轮迭代，构建 tree节点的右子树</li></ul></li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preorder<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inorder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> preorder <span class="token operator">||</span> preorder<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> preorder<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment">// 从前序遍历数组中获取每一轮的根节点</span>        <span class="token class-name">TreeNode</span> tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>preorder<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 从中序遍历数组中找到根的位置，以便接下来获取其左右子树</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>inorder<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> tree<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 以下开始分别构建当前节点的左右子树</span>        <span class="token comment">// 构建左子树</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 左子树不为空，获取tree的左子树在前序遍历和中序遍历序列中的子序列，复制到新的可用于新一轮迭代的数组中</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> leftPre <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> leftIn <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>inorder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 递归构建左子树</span>            tree<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>leftPre<span class="token punctuation">,</span> leftIn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 左子树为空</span>            tree<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 构建右子树</span>        <span class="token keyword">int</span> rlen <span class="token operator">=</span> length <span class="token operator">-</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rlen <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 右子树不为空，获取tree的右子树在前序遍历和中序遍历序列中的子序列，复制到新的可用于新一轮迭代的数组中</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rightPre <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> rlen<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> righIn <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>inorder<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> rlen<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 递归构建左子树</span>            tree<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>rightPre<span class="token punctuation">,</span> righIn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 右子树为空</span>            tree<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> tree<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定一棵树的前序遍历 preorder 与中序遍历  inorder 。请构造二叉树并返回其根节点。&lt;/li&gt;
&lt;li&gt;preorder 和 inorder 均无重复元素&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; preorder &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3,9&lt;/span&gt;,20,15,7&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;, inorder &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;9,3&lt;/span&gt;,15,20,7&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3,9&lt;/span&gt;,20,null,null,15,7&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; preorder &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;-1&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;, inorder &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;-1&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;-1&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://hexo.flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="分治" scheme="https://hexo.flower48237.com/tags/%E5%88%86%E6%B2%BB/"/>
    
    <category term="数组" scheme="https://hexo.flower48237.com/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="树" scheme="https://hexo.flower48237.com/tags/%E6%A0%91/"/>
    
    <category term="二叉树" scheme="https://hexo.flower48237.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题230.二叉搜索树中第K小的元素</title>
    <link href="https://hexo.flower48237.com/archives/db6ffafa.html"/>
    <id>https://hexo.flower48237.com/archives/db6ffafa.html</id>
    <published>2021-11-29T15:44:19.880Z</published>
    <updated>2021-12-21T14:40:39.341Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定一个二叉搜索树的根节点 root ，和一个整数 k</li><li>设计一个算法查找其中第 k 个最小元素（从 1 开始计数）。<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3,1</span>,4,null,2<span class="token punctuation">]</span>, k <span class="token operator">=</span> <span class="token number">1</span>output <span class="token builtin class-name">:</span> <span class="token number">1</span>note   <span class="token builtin class-name">:</span>    <span class="token number">3</span>           / <span class="token punctuation">\</span>          <span class="token number">1</span>   <span class="token number">4</span>           <span class="token punctuation">\</span>            <span class="token number">2</span>input  <span class="token builtin class-name">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5,3</span>,6,2,4,null,null,1<span class="token punctuation">]</span>, k <span class="token operator">=</span> <span class="token number">3</span>output <span class="token builtin class-name">:</span> <span class="token number">3</span>note   <span class="token builtin class-name">:</span>         <span class="token number">5</span>                / <span class="token punctuation">\</span>               <span class="token number">3</span>   <span class="token number">6</span>              /  <span class="token punctuation">\</span>             <span class="token number">2</span>    <span class="token number">4</span>            /           <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><span id="more"></span><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路1 直接中序遍历全部节点</strong></p><ul><li>直接递归，中序遍历整个树</li><li>递归过程中把节点值依次存放到列表中</li><li>因为二叉搜索树的中序遍历结果是升序的，所以直接返回列表的第k个元素值即可</li><li>时间复杂度：O(H+k)，H 是树的高度。在开始遍历之前，需要 O(H)到达叶结点。当树是平衡树时，时间复杂度取得最小值 O(logN+k)；当树是线性树（树中每个结点都只有一个子结点或没有子结点）时，时间复杂度取得最大值 O(N+k)。</li><li>空间复杂度：O(H)，栈中最多需要存储 H 个元素。当树是平衡树时，空间复杂度取得最小值 O(logN)；当树是线性树时，空间复杂度取得最大值 O(N)。</li></ul><p><strong>思路2 栈模拟中序遍历前k个节点</strong></p><ul><li>为减少遍历次数，优化思路是不要遍历整个的树，利用二叉搜索树的性质，遍历到目标元素时就停止</li><li>用栈模拟递归过程，中序遍历前k个节点</li><li>每次（假设当前是第 i 次）栈顶节点出栈，说明栈顶节点是整个树中的第 i 个小的值（二叉搜索时的中序遍历性质决定） </li><li>直接跳出遍历，返回最后一次弹出栈的节点值即可</li><li>时间复杂度：O(H+k)，H 是树的高度。在开始遍历之前，需要 O(H)到达叶结点。当树是平衡树时，时间复杂度取得最小值 O(logN+k)；当树是线性树（树中每个结点都只有一个子结点或没有子结点）时，时间复杂度取得最大值 O(N+k)。</li><li>空间复杂度：O(H)，栈中最多需要存储 H 个元素。当树是平衡树时，空间复杂度取得最小值 O(logN)；当树是线性树时，空间复杂度取得最大值 O(N)。</li></ul><p><strong>思路3 记录子树的结点数</strong></p><ul><li>如果需要频繁地查找第 k 小的值，优化思路是记录下以每个结点为根结点的子树的结点数，在查找第 k 小的值时，不断缩小查找范围 </li><li>令 node 等于根结点，开始搜索</li><li>记 node 的左子树的结点数为 left </li><li>若 left 小于 k-1，则第 k 小的元素一定在 node 的右子树中，令 node 等于其的右子结点，k 更新为 k−left−1，继续搜索；</li><li>若 left 等于 k-1，则第 k 小的元素即为 node ，结束搜索并返回 node 即可；</li><li>若 left 大于 k-1，则第 k 小的元素一定在 node 的左子树中，令 node 等于其左子结点，继续搜索。</li><li>时间复杂度：预处理的时间复杂度为 O(N)，其中 N 是树中结点的总数；需要遍历树中所有结点来统计以每个结点为根结点的子树的结点数。搜索的时间复杂度为 O(H)，其中 HH 是树的高度；当树是平衡树时，时间复杂度取得最小值 O(logN)；当树是线性树时，时间复杂度取得最大值 O(N)。</li><li>空间复杂度：O(N)，用于存储以每个结点为根结点的子树的结点数。</li></ul><p><strong><a href="https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst/solution/er-cha-sou-suo-shu-zhong-di-kxiao-de-yua-8o07/">思路3参考了LeetCode官方题解</a></strong></p><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution1</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">kthSmallest</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 中序遍历，DFS</span>        <span class="token function">DFS</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">DFS</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">DFS</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路2代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">kthSmallest</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 用栈模拟实现中序遍历</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 需要保证从最小的元素作为第一个入栈元素，所以不能在循环外把根节点压入栈，故循环的边界条件添加了||root!=null条件</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>                root <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            root <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            k<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token comment">// 第k个弹出栈的节点，其值一定为第k小的</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            root <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路3代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution3</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">kthSmallest</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MyBst</span> myBst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyBst</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> myBst<span class="token punctuation">.</span><span class="token function">kthSmallest</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyBst</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">TreeNode</span> root<span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> nodeNumber<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MyBst</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nodeNumber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">countNumber</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 统计以node为根结点的子树的结点数</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">countNumber</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        nodeNumber<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token function">countNumber</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">countNumber</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nodeNumber<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 返回二叉搜索树中第k小的元素</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">kthSmallest</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TreeNode</span> node <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">getNumber</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">></span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                node <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                node <span class="token operator">=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>                k <span class="token operator">=</span> k <span class="token operator">-</span> left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> node<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> nodeNumber<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定一个二叉搜索树的根节点 root ，和一个整数 k&lt;/li&gt;
&lt;li&gt;设计一个算法查找其中第 k 个最小元素（从 1 开始计数）。&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; root &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3,1&lt;/span&gt;,4,null,2&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;, k &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
note   &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
           / &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
          &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;
           &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
            &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; root &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5,3&lt;/span&gt;,6,2,4,null,null,1&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;, k &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
note   &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;         &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;
                / &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
               &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;
              /  &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
             &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;    &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;
            /
           &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://hexo.flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="树" scheme="https://hexo.flower48237.com/tags/%E6%A0%91/"/>
    
    <category term="二叉树" scheme="https://hexo.flower48237.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    <category term="DFS" scheme="https://hexo.flower48237.com/tags/DFS/"/>
    
    <category term="二叉搜索树" scheme="https://hexo.flower48237.com/tags/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    
    <category term="中序遍历" scheme="https://hexo.flower48237.com/tags/%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题102.二叉树的层次遍历</title>
    <link href="https://hexo.flower48237.com/archives/d5005260.html"/>
    <id>https://hexo.flower48237.com/archives/d5005260.html</id>
    <published>2021-11-28T10:19:27.622Z</published>
    <updated>2021-12-21T14:40:39.317Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定一个二叉树，返回按 层序遍历 得到的节点值。</li><li>即逐层地，从左到右访问所有节点。</li><li>相同层的节点值放在一个列表中</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token number">3</span>, <span class="token number">9</span>, <span class="token number">20</span>, null, null, <span class="token number">15</span>, <span class="token number">7</span><span class="token punctuation">]</span>output <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>, <span class="token punctuation">[</span><span class="token number">9,20</span><span class="token punctuation">]</span>, <span class="token punctuation">[</span><span class="token number">15,7</span><span class="token punctuation">]</span><span class="token punctuation">]</span>note   <span class="token builtin class-name">:</span>     <span class="token number">3</span>            / <span class="token punctuation">\</span>           <span class="token number">9</span>  <span class="token number">20</span>             /  <span class="token punctuation">\</span>            <span class="token number">15</span>   <span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路</strong></p><ul><li><p>借助队列 queue 实现二叉树的层次遍历（广度优先遍历）</p></li><li><p>根节点入队</p></li><li><p>使用循环判断队列是否为空</p><ul><li>每次循环时，队列的长度 queue.size()，即为当前层的节点数量<ul><li>使用for循环，把队列中当前层的节点 treeNode 逐个移除队列并访问</li><li>把每个 treeNode 的值逐个添加到每一层的列表中</li><li>当前被访问的节点 treeNode 若有左子树（treeNode.left != null），则左子树入队</li><li>当前被访问的节点 treeNode 若有右子树（treeNode.right != null），则右子树入队</li></ul></li><li>把每层的节点值列表，添加到结果列表 lists 中</li></ul></li><li><p>队列为空时，说明遍历结束，返回lists</p></li><li><p>时间复杂度：O(n)，每个节点进队出队各一次。</p></li><li><p>空间复杂度：O(n)，队列中元素的个数不超过 n 个。</p></li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">levelOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 空树直接返回空列表</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> lists <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> lists<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 根节点先入队</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> currentSize <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> currentSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">TreeNode</span> treeNode <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>treeNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>treeNode<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>treeNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>treeNode<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>treeNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// System.out.print(treeNode.val + ", ");</span>            <span class="token punctuation">&#125;</span>            lists<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// System.out.println();</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> lists<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定一个二叉树，返回按 层序遍历 得到的节点值。&lt;/li&gt;
&lt;li&gt;即逐层地，从左到右访问所有节点。&lt;/li&gt;
&lt;li&gt;相同层的节点值放在一个列表中&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;, null, null, &lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;, &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;9,20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;, &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;15,7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
note   &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
            / &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
           &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;
             /  &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
            &lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://hexo.flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="树" scheme="https://hexo.flower48237.com/tags/%E6%A0%91/"/>
    
    <category term="二叉树" scheme="https://hexo.flower48237.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    <category term="BFS" scheme="https://hexo.flower48237.com/tags/BFS/"/>
    
    <category term="队列" scheme="https://hexo.flower48237.com/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题287.寻找重复数</title>
    <link href="https://hexo.flower48237.com/archives/89d14ef4.html"/>
    <id>https://hexo.flower48237.com/archives/89d14ef4.html</id>
    <published>2021-11-27T15:55:20.500Z</published>
    <updated>2021-12-21T14:40:39.348Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定一个包含 n + 1 个整数的数组 nums ，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。</li><li>假设 nums 只有一个重复的整数 ，找出 这个重复的数 。</li><li>解决方案必须不修改数组 nums 且只用常量级 O(1) 的额外空间。</li><li>提示：</li><li>1 &lt;= n &lt;= 105</li><li>nums.length == n + 1</li><li>1 &lt;= nums[i] &lt;= n</li><li>nums 中 只有一个整数 出现 两次或多次 ，其余整数均只出现 一次</li><li>进阶：<ul><li>如何证明 nums 中至少存在一个重复的数字?</li><li>设计一个线性级时间复杂度 O(n) 的解决方案</li></ul></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> nums <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1,3</span>,4,2,2<span class="token punctuation">&#125;</span>output <span class="token builtin class-name">:</span> <span class="token number">2</span>input  <span class="token builtin class-name">:</span> nums <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">3,1</span>,3,4,2<span class="token punctuation">&#125;</span>output <span class="token builtin class-name">:</span> <span class="token number">3</span>input  <span class="token builtin class-name">:</span> nums <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1,1</span>,2<span class="token punctuation">&#125;</span>output <span class="token builtin class-name">:</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路1: HashSet</strong></p><ul><li>借助 HashSet 存储数组元素，便于查重</li><li>遍历数组，假设当前遍历的元素为 item<ul><li>若 item 不存在于 HashSet 中，则将其添加进 HashSet</li><li>若 item 存在于 HashSet 中，直接返回 item</li></ul></li><li>时间复杂度O(n)</li><li>空间复杂度O(n)</li><li>题目不允许空间复杂度O(n)，虽然使用HashSet编写代码很快，但是违反了题目要求</li></ul><p><strong>思路2: 双指针（快慢）</strong></p><ul><li>由索引找到元素，再将这个元素作为索引，继续找下一个元素，因为数组中有重复元素，故最终会形成一个循环</li><li>定义快慢指针<ul><li>快指针 faster 每次遍历前进2次（以当前faster作为索引得到的元素值A（nums[faster]），再做为索引获得新的元素值B（nums[nums[faster]]），把B再赋值给快指针 faster，即 faster = num[nums[faster]]）</li><li>慢指针 slower 每次遍历前进1次（以当前faster作为索引得到的元素值C（nums[slower]），把C再赋值给快指针 slower，即 slower = nums[slower]）</li></ul></li><li>当快慢指针相遇时，说明两者到了循环的入口，循环的入口不是重复的数字</li><li>所以找到循环入口之后，还要再找重复的数字<ul><li>设置一个从数组起始位置出发的新指针 p ，前进形式与slower相同</li><li>在不断循环之后， p 与 slower 两指针指向的值相等时，就得到了重复的数字</li></ul></li></ul><p><strong>思路3: 二分查找</strong></p><ul><li>n+1个数，都属于[1, n]，只有一个重复的整数</li><li>想象把 n+1 个无色球，放进n个颜色不同的染缸，必然有一个染缸中存在两个球</li><li>即必然有一个数是出现了两次的（必然有两个球的颜色是相同的）</li><li>考虑这个有序区间 [1, n]<ul><li>假设现在存在数组 array 包含了 <strong>n 个不重复</strong> 的整数，属于区间[1, n]</li><li>遍历这个数组 array，不必考虑其排列顺序，统计小于或等于 mid 的数，累加到 count1 上</li><li><strong>则必然会有：count1 = mid</strong> ！！！</li><li>============分割线===============</li><li>现在思考题目中给的数组，nums包含了n+1个属于区间[1, n]的数，<strong>有一个重复的整数</strong></li><li>遍历这个数组，不必考虑其排列顺序，统计 <strong>小于或等于 mid</strong>  的数，累加到 count2 上</li><li>因为有一个数重复，故必然会有：count2 &gt; mid 或者 count2 = mid<ul><li>若 count2 &gt; mid，说明数组nums中，小于或等于mid的数里，出现了重复的整数</li><li>若 count2 = mid，说明数组nums中，小于或等于mid的数里，没有重复的整数</li></ul></li></ul></li><li>⭐设定 left = 1，right = n，mid = （left + right）/ 2，<strong>此处的 left 、right 、mid 用于描述区间！只与区间有关！</strong>        </li><li>根据上述思路，借助 与数组[1, n]有关的变量left、right、mid，<strong>对区间 [1, n] 进行二分查找！！！是对区间进行查找，不是对数组</strong><ul><li>查找过程中，统计<strong>小于或等于 mid</strong>  的数，累加到 count2 上<ul><li>count2 &gt; mid时，更新 right = mid</li><li>count2 = mid时，更新 left = mid + 1</li></ul></li></ul></li><li>最后 left 和 right 相等时，查找结束，其值即为那个重复的整数。</li><li>时间复杂度O(n logn)，在二分内部有for循环，时间复杂度为O(N)。</li><li>空间复杂度O(1)</li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HashSet</span> hashSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> item <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>hashSet<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> item<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            hashSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路2代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> slower <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> faster <span class="token operator">=</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>faster <span class="token operator">!=</span> slower<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            faster <span class="token operator">=</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>faster<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            slower <span class="token operator">=</span> nums<span class="token punctuation">[</span>slower<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//System.out.println("slower : " + slower + " , " + nums[slower]);</span>        <span class="token comment">//System.out.println("faster : " + faster + " , " + nums[faster]);</span>        <span class="token keyword">int</span> step1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> step2 <span class="token operator">=</span> slower<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>step1 <span class="token operator">!=</span> step2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"step1 : "</span> <span class="token operator">+</span> step1 <span class="token operator">+</span> <span class="token string">" , "</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>step1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"step2 : "</span> <span class="token operator">+</span> step2 <span class="token operator">+</span> <span class="token string">" , "</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>step2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            step1 <span class="token operator">=</span> nums<span class="token punctuation">[</span>step1<span class="token punctuation">]</span><span class="token punctuation">;</span>            step2 <span class="token operator">=</span> nums<span class="token punctuation">[</span>step2<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> step1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路3代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution3</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> left<span class="token punctuation">;</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> mid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                right <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> left<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定一个包含 n + 1 个整数的数组 nums ，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。&lt;/li&gt;
&lt;li&gt;假设 nums 只有一个重复的整数 ，找出 这个重复的数 。&lt;/li&gt;
&lt;li&gt;解决方案必须不修改数组 nums 且只用常量级 O(1) 的额外空间。&lt;/li&gt;
&lt;li&gt;提示：&lt;/li&gt;
&lt;li&gt;1 &amp;lt;= n &amp;lt;= 105&lt;/li&gt;
&lt;li&gt;nums.length == n + 1&lt;/li&gt;
&lt;li&gt;1 &amp;lt;= nums[i] &amp;lt;= n&lt;/li&gt;
&lt;li&gt;nums 中 只有一个整数 出现 两次或多次 ，其余整数均只出现 一次&lt;/li&gt;
&lt;li&gt;进阶：&lt;ul&gt;
&lt;li&gt;如何证明 nums 中至少存在一个重复的数字?&lt;/li&gt;
&lt;li&gt;设计一个线性级时间复杂度 O(n) 的解决方案&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; nums &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1,3&lt;/span&gt;,4,2,2&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; nums &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3,1&lt;/span&gt;,3,4,2&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; nums &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1,1&lt;/span&gt;,2&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
    <category term="数组" scheme="https://hexo.flower48237.com/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="双指针" scheme="https://hexo.flower48237.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
    <category term="二分查找" scheme="https://hexo.flower48237.com/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
    <category term="哈希" scheme="https://hexo.flower48237.com/tags/%E5%93%88%E5%B8%8C/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题029.两数相除</title>
    <link href="https://hexo.flower48237.com/archives/55b28d8d.html"/>
    <id>https://hexo.flower48237.com/archives/55b28d8d.html</id>
    <published>2021-11-24T15:17:33.192Z</published>
    <updated>2021-12-21T14:40:39.292Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定两个整数，被除数 dividend 和除数 divisor。将两数相除，要求不使用乘法、除法和 mod 运算符。</li><li>返回被除数 dividend 除以除数 divisor 得到的商。除数不为 0。</li><li>整数除法的结果应当截去（truncate）其小数部分。</li><li>被除数和除数均为 32 位有符号整数，其数值范围是 [−2^31,  2^31 − 1]。如果除法结果溢出，则返回 2^31 − 1。<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> dividend <span class="token operator">=</span> <span class="token number">10</span>, divisor <span class="token operator">=</span> <span class="token number">3</span>output <span class="token builtin class-name">:</span> <span class="token number">3</span>input  <span class="token builtin class-name">:</span> dividend <span class="token operator">=</span> <span class="token number">7</span>, divisor <span class="token operator">=</span> -3output <span class="token builtin class-name">:</span> -2input  <span class="token builtin class-name">:</span> dividend <span class="token operator">=</span> -2147483648, divisor <span class="token operator">=</span> -1output <span class="token builtin class-name">:</span> <span class="token number">2147483646</span>note   <span class="token builtin class-name">:</span> 若无限制，除法后结果为2147483648，越界，需要返回 Integer.MAX_VALUE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><span id="more"></span><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路： 位运算</strong></p><ul><li>先做越界判断，若把 dividend 为左右边界值，divisor 为1 or -1的情况都列举出来，会发现只需要判断 dividend = Integer.MIN_VALUE &amp;&amp; divisor = -1 这一种越界需要处理</li><li>提前把结果的符号 sign 摘出来，然后把后续的求商操作当作对两个正数的操作，避免处理负数出现错误</li><li>使用long类型（不使用int，是因为dividend=Integer.MIN_VALUE时摘掉负号会越界）的m和n分别接收去除了符号的 dividend 和 divisor</li><li>使用两层循环，外层循环 比较不断缩小的被除数m和除数n<ul><li>定义d初始化为被除数n，定义c初始化为1，d与c会同步翻2倍，以保证d与c的商为n，同时c是每次内层循环的近似解</li><li>内层循环，比较不断缩小的被除数m和n×2^i，其中i是内存循环的次数<ul><li>内层的被除数m，是每次减去近似解后的剩余值，可以理解为每次减去一个最大近似解后的残差 error（与内层的m值相等）</li><li>为防止残差 error 还可以包含2倍或更多倍的n（即能够使真实解res继续增大），需要使用循环对 error 继续缩小，直至其值不能 &gt;= 2*n</li><li>若残差 error 还可以包含2倍或更多倍的n，让d和c同时乘2，即翻倍</li><li>当d足够接近每次的 error 时，d / n -&gt; c，此时c就可以看作一个近似解，但不能保证完全相等，会有新的残差 error’</li></ul></li><li>把每次得到的近似解c累加求和，最终的和 result 就是真实解</li><li>m（旧残差 error） 减去d，得到新残差 error’，继续用于循环，可以将残差不断缩小，使得c的累加和result逐渐趋近于真实解</li></ul></li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> dividend<span class="token punctuation">,</span> <span class="token keyword">int</span> divisor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dividend <span class="token operator">==</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE <span class="token operator">&amp;&amp;</span> divisor <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> sign <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dividend <span class="token operator">/</span> divisor <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sign <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">long</span> m <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> dividend<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> n <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> divisor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">>=</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// d与c会同步翻2倍，以保证d与c的商为n</span>            <span class="token keyword">long</span> d <span class="token operator">=</span> n<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment">// 内层while的m，是每次减去近似解后的剩余值，可以理解为每次减去一个最大近似解后的残差 m'</span>            <span class="token comment">// 为防止残差 m' 还可以包含2倍或更多倍的n（即能够使真实解res继续增大），需要使用循环对 m' 继续缩小，直至其大小不能>=2*n</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">>=</span> <span class="token punctuation">(</span>d <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                d <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// d扩大2倍</span>                c <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// c扩大2倍，与d同步</span>                <span class="token comment">// 当d足够接近每次的剩余m时，d / n -> c，此时c就可以看作一个近似解，但不能保证完全相等，会有误差</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 把每次得到的近似解c累加求和，就是真实解</span>            res <span class="token operator">+=</span> c<span class="token punctuation">;</span>            <span class="token comment">// m减去d，然后把剩余的m用于循环，可以将误差不断缩小，使得c的累加和res逐渐趋近于真实解</span>            m <span class="token operator">-=</span> d<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> sign <span class="token operator">*</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定两个整数，被除数 dividend 和除数 divisor。将两数相除，要求不使用乘法、除法和 mod 运算符。&lt;/li&gt;
&lt;li&gt;返回被除数 dividend 除以除数 divisor 得到的商。除数不为 0。&lt;/li&gt;
&lt;li&gt;整数除法的结果应当截去（truncate）其小数部分。&lt;/li&gt;
&lt;li&gt;被除数和除数均为 32 位有符号整数，其数值范围是 [−2^31,  2^31 − 1]。如果除法结果溢出，则返回 2^31 − 1。&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; dividend &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;, divisor &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; dividend &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;, divisor &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; -3
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; -2
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; dividend &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; -2147483648, divisor &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; -1
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2147483646&lt;/span&gt;
note   &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; 若无限制，除法后结果为2147483648，越界，需要返回 Integer.MAX_VALUE&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://hexo.flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="数学" scheme="https://hexo.flower48237.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="位运算" scheme="https://hexo.flower48237.com/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题036.有效的数独</title>
    <link href="https://hexo.flower48237.com/archives/840877d1.html"/>
    <id>https://hexo.flower48237.com/archives/840877d1.html</id>
    <published>2021-11-23T14:53:57.685Z</published>
    <updated>2021-12-21T14:40:39.298Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>判断一个 9 x 9 的数独是否有效。一个有效的数独（部分已被填充，空白格用 ‘.’ 表示）不一定是可解的，只需要根据以下规则，验证已经填入的数字是否有效即可。</li><li>(1)数字 1-9 在每一行只能出现一次。</li><li>(2)数字 1-9 在每一列只能出现一次。</li><li>(3)数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。</li><li>board.length == 9; board[i].length == 9; board[i][j]是数字（1-9）或 ‘.’</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> board <span class="token operator">=</span>     <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string">'8'</span>, <span class="token string">'3'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'7'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span><span class="token punctuation">&#125;</span>                     ,<span class="token punctuation">&#123;</span><span class="token string">'6'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'1'</span>, <span class="token string">'9'</span>, <span class="token string">'5'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span><span class="token punctuation">&#125;</span>                     ,<span class="token punctuation">&#123;</span><span class="token string">'.'</span>, <span class="token string">'9'</span>, <span class="token string">'8'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'6'</span>, <span class="token string">'.'</span><span class="token punctuation">&#125;</span>                     ,<span class="token punctuation">&#123;</span><span class="token string">'8'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'6'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'3'</span><span class="token punctuation">&#125;</span>                     ,<span class="token punctuation">&#123;</span><span class="token string">'4'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'8'</span>, <span class="token string">'.'</span>, <span class="token string">'3'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'1'</span><span class="token punctuation">&#125;</span>                     ,<span class="token punctuation">&#123;</span><span class="token string">'7'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'2'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'6'</span><span class="token punctuation">&#125;</span>                     ,<span class="token punctuation">&#123;</span><span class="token string">'.'</span>, <span class="token string">'6'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'2'</span>, <span class="token string">'8'</span>, <span class="token string">'.'</span><span class="token punctuation">&#125;</span>                     ,<span class="token punctuation">&#123;</span><span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'4'</span>, <span class="token string">'1'</span>, <span class="token string">'9'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'5'</span><span class="token punctuation">&#125;</span>                     ,<span class="token punctuation">&#123;</span><span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'8'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'7'</span>, <span class="token string">'9'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                                                                                                                               output <span class="token builtin class-name">:</span> <span class="token boolean">true</span>input  <span class="token builtin class-name">:</span> board <span class="token operator">=</span>     <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string">'8'</span>, <span class="token string">'3'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'7'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span><span class="token punctuation">&#125;</span>                     ,<span class="token punctuation">&#123;</span><span class="token string">'6'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'1'</span>, <span class="token string">'9'</span>, <span class="token string">'5'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span><span class="token punctuation">&#125;</span>                     ,<span class="token punctuation">&#123;</span><span class="token string">'.'</span>, <span class="token string">'9'</span>, <span class="token string">'8'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'6'</span>, <span class="token string">'.'</span><span class="token punctuation">&#125;</span>                     ,<span class="token punctuation">&#123;</span><span class="token string">'8'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'6'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'3'</span><span class="token punctuation">&#125;</span>                     ,<span class="token punctuation">&#123;</span><span class="token string">'4'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'8'</span>, <span class="token string">'.'</span>, <span class="token string">'3'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'1'</span><span class="token punctuation">&#125;</span>                     ,<span class="token punctuation">&#123;</span><span class="token string">'7'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'2'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'6'</span><span class="token punctuation">&#125;</span>                     ,<span class="token punctuation">&#123;</span><span class="token string">'.'</span>, <span class="token string">'6'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'2'</span>, <span class="token string">'8'</span>, <span class="token string">'.'</span><span class="token punctuation">&#125;</span>                     ,<span class="token punctuation">&#123;</span><span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'4'</span>, <span class="token string">'1'</span>, <span class="token string">'9'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'5'</span><span class="token punctuation">&#125;</span>                     ,<span class="token punctuation">&#123;</span><span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'8'</span>, <span class="token string">'.'</span>, <span class="token string">'.'</span>, <span class="token string">'7'</span>, <span class="token string">'9'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   output <span class="token builtin class-name">:</span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路1 暴力</strong></p><ul><li>直接按照题目的三个要求，进行不同的有效性判定</li><li>摘出三个函数，分别来满足这三个要求</li><li>checkRow() 数字 1-9 在每一行只能出现一次。<ul><li>按行遍历，哈希表contains()方法判定</li></ul></li><li>checkCol() 数字 1-9 在每一列只能出现一次。<ul><li>按列遍历，哈希表contains()方法判定</li></ul></li><li>checkBlock() 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。<ul><li>按下标规律，四重循环，挨个遍历9个面积为3 × 3的中型方格，哈希表contains()方法判定</li></ul></li></ul><p><strong>思路2 数组模拟HashSet</strong></p><ul><li>定义三个数组，分别用于模拟可判断“行”、“列”、“3×3方格”是否存在重复元素的哈希Set：row[][]、col[][]、area[][]</li><li>还是要考虑下标规律，双重循环即可，比思路1写起来简洁</li><li>以 i，j，u，idx 分别表示当前访问元素的 行下标、列下标、元素值、3×3方格标号（从左到右，从上到下，依次编号为 0 ~ 8）</li><li>行模拟，是指判断 row[i][u] 是否为true，若为true，说明第 i 行已经有值为 u 的元素出现过了，所以重复指向了 row[i][u]</li><li>列模拟，是指判断 col[j][u] 是否为true，若为true，说明第 j 列已经有值为 u 的元素出现过了，所以重复指向了 col[j][u]</li><li>3×3方格模拟，是指判断 area[idx][u] 是否为true，若为true，说明第 idx 个方格已经有值为 u 的元素出现过了，所以重复指向了 area[idx][u]</li><li>在上述三个模拟过程中<ul><li>若遇到三者存在一个是true，即可判断为无效的数独；</li><li>三者都为false时，把三者都置为true，表明在 第i行、第j列、第idx个3×3方格，已经有值为 u 的元素出现过了</li></ul></li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValidSudoku</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> hashSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 数字 1-9 在每一行只能出现一次</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">checkRow</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> hashSet<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 数字 1-9 在每一列只能出现一次</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">checkCol</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> hashSet<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">checkBlock</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> hashSet<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">checkRow</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">,</span> <span class="token class-name">HashSet</span> hashSet<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 数字 1-9 在每一行只能出现一次</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"check row."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> board<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> item <span class="token operator">:</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">!=</span> <span class="token string">'.'</span> <span class="token operator">&amp;&amp;</span> hashSet<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                hashSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            hashSet<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">checkCol</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">,</span> <span class="token class-name">HashSet</span> hashSet<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 数字 1-9 在每一列只能出现一次</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"check col."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> board<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'.'</span> <span class="token operator">&amp;&amp;</span> hashSet<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                hashSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            hashSet<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">checkBlock</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">,</span> <span class="token class-name">HashSet</span> hashSet<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 数字 1-9 在每一列只能出现一次</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"check block."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> j <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span> k <span class="token operator">&lt;</span> i <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> p <span class="token operator">=</span> j<span class="token punctuation">;</span> p <span class="token operator">&lt;</span> j <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'.'</span> <span class="token operator">&amp;&amp;</span> hashSet<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                        hashSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 遍历完一个区域后清空哈希表</span>                hashSet<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路2代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValidSudoku</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 用数组模拟哈希set</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> row <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> col <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> area <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">char</span> ch <span class="token operator">=</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">int</span> u <span class="token operator">=</span> ch <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> idx <span class="token operator">=</span> i <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> j <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>row<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">||</span> col<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">||</span> area<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                row<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> col<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> area<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;判断一个 9 x 9 的数独是否有效。一个有效的数独（部分已被填充，空白格用 ‘.’ 表示）不一定是可解的，只需要根据以下规则，验证已经填入的数字是否有效即可。&lt;/li&gt;
&lt;li&gt;(1)数字 1-9 在每一行只能出现一次。&lt;/li&gt;
&lt;li&gt;(2)数字 1-9 在每一列只能出现一次。&lt;/li&gt;
&lt;li&gt;(3)数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。&lt;/li&gt;
&lt;li&gt;board.length == 9; board[i].length == 9; board[i][j]是数字（1-9）或 ‘.’&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; board &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;     &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;8&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;7&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
                     ,&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;9&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;5&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
                     ,&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;9&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;8&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
                     ,&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;8&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;3&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
                     ,&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;8&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
                     ,&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;7&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;6&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
                     ,&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;8&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
                     ,&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;9&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;5&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
                     ,&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;8&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;7&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;9&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;                                                                                                                               
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; board &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;     &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;8&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;7&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
                     ,&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;9&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;5&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
                     ,&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;9&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;8&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
                     ,&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;8&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;3&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
                     ,&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;8&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
                     ,&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;7&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;6&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
                     ,&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;8&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
                     ,&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;9&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;5&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
                     ,&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;8&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;7&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;9&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;   
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
    <category term="数组" scheme="https://hexo.flower48237.com/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="哈希表" scheme="https://hexo.flower48237.com/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
    <category term="矩阵" scheme="https://hexo.flower48237.com/tags/%E7%9F%A9%E9%98%B5/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题227.基本计算器II</title>
    <link href="https://hexo.flower48237.com/archives/95734ee4.html"/>
    <id>https://hexo.flower48237.com/archives/95734ee4.html</id>
    <published>2021-11-20T15:26:12.700Z</published>
    <updated>2021-12-21T14:40:39.340Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定一个字符串表达式 s ，请你实现一个基本计算器来计算并返回它的值。</li><li>整数除法仅保留整数部分。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> s <span class="token operator">=</span> <span class="token string">"3+2*2"</span>output <span class="token builtin class-name">:</span> <span class="token number">7</span>input  <span class="token builtin class-name">:</span> s <span class="token operator">=</span> <span class="token string">"3+2*2"</span>output <span class="token builtin class-name">:</span> <span class="token number">1</span>input  <span class="token builtin class-name">:</span> s <span class="token operator">=</span> <span class="token string">" 3+5 / 2 "</span>output <span class="token builtin class-name">:</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路1：栈</strong></p><ul><li><p>基本规则 ： 乘除优先于加减计算</p></li><li><p>用变量 sign 记录每个数字之前的运算符，设置默认初值0，给第一个数字设置前缀+号</p></li><li><p>遍历字符串，每次从当前位置开始往后取出一个连续整数时，根据 符号（sign） 来决定计算方式，借助 <strong>栈</strong> 保存整数：</p><ul><li>加、减号后的数字，直接压入栈中</li><li>乘、除号后的数字，与栈顶元素计算，并将栈顶元素替换为计算后的结果</li></ul></li><li><p>遍历完字符串 s 后，将栈中元素累加，即为该字符串表达式的值</p></li><li><p>时间复杂度：O(n) </p></li><li><p>空间复杂度：O(n) </p></li></ul><p><strong>思路2：逆波兰式</strong></p><ul><li>遇到不同字符的处理逻辑与思路1相同，但是不进行计算</li><li>只不过在遍历过程中增加了将原表达式转为逆波兰式的步骤</li><li>然后使用逆波兰表达式求解的思路，同leetCode 150 </li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 个人认为以下两步（Step1、Step2）对s的操作为投机取巧，仅方便处理，会改变原字符串。</span>        <span class="token comment">// 若不改变字符串s，注释 // ⭐ 处 应为 if((!isDigit &amp;&amp; s[i] != ' ' ) || i == length - 1)</span>        <span class="token comment">// Step1：去除所有空格</span>        <span class="token comment">// 若不去除所有空格，也可在代码注释 // ⭐ 处将 else 改为 if(!isDigit &amp;&amp; s[i] != ' ' )</span>        s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Step2：在数组末尾添加一个“+”号方便结束，任意负号都可以</span>        <span class="token comment">// 若不添加末尾符合，也可在代码注释 // ⭐ 处将 else 改为 if(!isDigit || i == length - 1)</span>        s <span class="token operator">=</span> s <span class="token operator">+</span> <span class="token string">"+"</span><span class="token punctuation">;</span>        <span class="token comment">// 用变量 sign 记录每个数字 前面的 运算符，给第一个数字默认设置前缀+号</span>        <span class="token comment">// 以 3 + 2 * 2 为例，实际处理将其当作 + 3 + 2 * 2 ，便于完成循环过程中的数值处理逻辑</span>        <span class="token keyword">char</span> sign <span class="token operator">=</span> <span class="token string">'+'</span><span class="token punctuation">;</span>        <span class="token comment">// 提前设置preNumber的初始值为0，可以防止字符串第一个字符为 负号（-）时的处理逻辑混乱</span>        <span class="token comment">// 开头遇到负号也可以把-preNumber = 0先压入栈中</span>        <span class="token keyword">int</span> preNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">boolean</span> isDigit <span class="token operator">=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isDigit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                preNumber <span class="token operator">=</span> preNumber <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">// ⭐</span>                <span class="token comment">// 若读到一个运算符A，按照前一个运算符B的格式对A和B之间的数字进行处理，然后压入栈中</span>                <span class="token comment">// 处理完该数字后，更新 sign 为当前遍历的字符。</span>                <span class="token keyword">switch</span> <span class="token punctuation">(</span>sign<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 加号：将数字压入栈；</span>                    <span class="token keyword">case</span> <span class="token string">'+'</span><span class="token operator">:</span>                        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>preNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token comment">// 减号：将数字的相反数压入栈；</span>                    <span class="token keyword">case</span> <span class="token string">'-'</span><span class="token operator">:</span>                        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">-</span>preNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token comment">// 乘号：计算栈顶元素与数字的乘积，并将栈顶元素替换为计算结果。</span>                    <span class="token keyword">case</span> <span class="token string">'*'</span><span class="token operator">:</span>                        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> preNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token comment">// 除号：计算栈顶元素与数字的商，并将栈顶元素替换为计算结果。</span>                    <span class="token keyword">case</span> <span class="token string">'/'</span><span class="token operator">:</span>                        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> preNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">default</span><span class="token operator">:</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                sign <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                preNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// 栈中元素累加即为该字符串表达式的值</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ans <span class="token operator">+=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路2代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getRank</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'*'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'+'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> ops <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 存储后缀表达式（逆波兰式）</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> tokenList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token operator">:</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 获取操作符之间的完整整数</span>                number <span class="token operator">=</span> number <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ch <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 遇到操作符时，就可以把该操作符之前的数字作为新元素添加到逆波兰表达式的字符串中</span>                tokenList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 数值清空</span>                number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token comment">// 获取当前操作符op1的优先级</span>                <span class="token keyword">int</span> curRank <span class="token operator">=</span> <span class="token function">getRank</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 持续对比op1和操作符栈的栈顶元素op2的优先级</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>ops<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">getRank</span><span class="token punctuation">(</span>ops<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> curRank<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 如果优先级顺序op2>op1，将操作符栈的栈顶元素弹出，做为新元素添加到逆波兰表达式数组中</span>                    tokenList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ops<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 把当前操作符压入操作符栈中</span>                ops<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 最后一个数字加入到逆波兰序表达式数组中</span>        tokenList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 依次弹出操作符栈中的元素，加入到逆波兰序表达式数组中</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>ops<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            tokenList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ops<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 逆波兰式求解</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> string <span class="token operator">:</span> tokenList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>string <span class="token operator">+</span> <span class="token string">" , "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tokens <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>tokenList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        tokenList<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>tokens<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">evalRPN</span><span class="token punctuation">(</span>tokens<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 对应 leetCode 150. 逆波兰表达式求值     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">evalRPN</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tokens<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> tokens<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> after <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> before <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>before <span class="token operator">-</span> after<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> after <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> before <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>before <span class="token operator">/</span> after<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定一个字符串表达式 s ，请你实现一个基本计算器来计算并返回它的值。&lt;/li&gt;
&lt;li&gt;整数除法仅保留整数部分。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; s &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;3+2*2&quot;&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; s &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;3+2*2&quot;&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; s &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; 3+5 / 2 &quot;&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://hexo.flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="字符串" scheme="https://hexo.flower48237.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="栈" scheme="https://hexo.flower48237.com/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题150.逆波兰表达式求值</title>
    <link href="https://hexo.flower48237.com/archives/b7aa63f2.html"/>
    <id>https://hexo.flower48237.com/archives/b7aa63f2.html</id>
    <published>2021-11-20T14:20:11.849Z</published>
    <updated>2021-12-21T14:40:39.329Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>根据 逆波兰表示法，求表达式的值。</li><li>有效的算符包括 +、-、*、/ 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。</li><li>整数除法只保留整数部分。</li><li>给定逆波兰表达式总是有效的。即表达式总会得出有效数值且不存在除数为 0 的情况。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> tokens <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"2"</span>,<span class="token string">"1"</span>,<span class="token string">"+"</span>,<span class="token string">"3"</span>,<span class="token string">"*"</span><span class="token punctuation">&#125;</span>output <span class="token builtin class-name">:</span> <span class="token number">9</span>note   <span class="token builtin class-name">:</span> 该算式转化为常见的中缀算术表达式为：<span class="token variable"><span class="token punctuation">((</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">9</span>input  <span class="token operator">:</span> tokens <span class="token operator">=</span> &#123;"<span class="token number">4</span>"<span class="token punctuation">,</span>"<span class="token number">13</span>"<span class="token punctuation">,</span>"<span class="token number">5</span>"<span class="token punctuation">,</span>"<span class="token operator">/</span>"<span class="token punctuation">,</span>"<span class="token operator">+</span>"&#125;output <span class="token operator">:</span> <span class="token number">6</span>note   <span class="token operator">:</span> 该算式转化为常见的中缀算术表达式为：<span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">13</span> <span class="token operator">/</span> <span class="token number">5</span><span class="token punctuation">))</span></span> <span class="token operator">=</span> <span class="token number">6</span>input  <span class="token builtin class-name">:</span> tokens <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"10"</span>,<span class="token string">"6"</span>,<span class="token string">"9"</span>,<span class="token string">"3"</span>,<span class="token string">"+"</span>,<span class="token string">"-11"</span>,<span class="token string">"*"</span>,<span class="token string">"/"</span>,<span class="token string">"*"</span>,<span class="token string">"17"</span>,<span class="token string">"+"</span>,<span class="token string">"5"</span>,<span class="token string">"+"</span><span class="token punctuation">&#125;</span>output <span class="token builtin class-name">:</span> <span class="token number">22</span>note   <span class="token builtin class-name">:</span> 该算式转化为常见的中缀算术表达式为：<span class="token variable"><span class="token punctuation">((</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">6</span> <span class="token operator">/</span> <span class="token punctuation">((</span><span class="token number">9</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">))</span></span><span class="token punctuation">)</span> + <span class="token number">17</span><span class="token punctuation">)</span> + <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路：栈</strong></p><ul><li>遇到数字之间压入栈中</li><li>遇到运算符 OP，依次取栈顶两个元素Before、After</li><li>然后根据 OP 完成运算，得到结果 R 重新压入栈顶<ul><li>需要注意的是减法操作时为 B - A，除法操作时为B / A，顺序不能颠倒</li></ul></li><li>结果返回栈顶元素</li><li>好处：不会破坏原字符串数组</li><li>时间复杂度O(n)</li><li>空间复杂度O(n)</li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">evalRPN</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tokens<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> tokens<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> after <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> before <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>before <span class="token operator">-</span> after<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> after <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> before <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>before <span class="token operator">/</span> after<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 美化一下 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">evalRPN</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tokens<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> ops <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> tokens<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ops<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">calculate</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token class-name">String</span> op<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token string">"+"</span> <span class="token operator">:</span>                <span class="token keyword">return</span> y <span class="token operator">+</span> x<span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"-"</span><span class="token operator">:</span>                <span class="token keyword">return</span> y <span class="token operator">-</span> x<span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"*"</span> <span class="token operator">:</span>                <span class="token keyword">return</span> y <span class="token operator">*</span> x<span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"/"</span><span class="token operator">:</span>                <span class="token keyword">return</span> y <span class="token operator">/</span> x<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;根据 逆波兰表示法，求表达式的值。&lt;/li&gt;
&lt;li&gt;有效的算符包括 +、-、*、/ 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。&lt;/li&gt;
&lt;li&gt;整数除法只保留整数部分。&lt;/li&gt;
&lt;li&gt;给定逆波兰表达式总是有效的。即表达式总会得出有效数值且不存在除数为 0 的情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; tokens &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;2&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;1&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;+&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;3&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;
note   &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; 该算式转化为常见的中缀算术表达式为：&lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;
input  &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; tokens &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &amp;#123;&quot;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&quot;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&quot;&lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt;&quot;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&quot;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&quot;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&quot;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&quot;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&quot;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&quot;&amp;#125;
output &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;
note   &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; 该算式转化为常见的中缀算术表达式为：&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;))&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; tokens &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;10&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;6&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;9&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;3&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;+&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;-11&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;*&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;/&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;*&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;17&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;+&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;5&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;+&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt;
note   &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; 该算式转化为常见的中缀算术表达式为：&lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; + &lt;span class=&quot;token number&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; + &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://hexo.flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="字符串" scheme="https://hexo.flower48237.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="数组" scheme="https://hexo.flower48237.com/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="栈" scheme="https://hexo.flower48237.com/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode精选TOP面试题015.三数之和</title>
    <link href="https://hexo.flower48237.com/archives/d4c92f69.html"/>
    <id>https://hexo.flower48237.com/archives/d4c92f69.html</id>
    <published>2021-11-18T12:33:17.234Z</published>
    <updated>2021-12-21T14:40:39.290Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？</li><li>找出所有和为 0 且不重复的三元组。</li><li>0 &lt;= nums.length &lt;= 3000</li><li>-105 &lt;= nums[i] &lt;= 105<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span>-1,0,1,2,-1,-4<span class="token punctuation">]</span>output <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>-1,-1,2<span class="token punctuation">]</span>,<span class="token punctuation">[</span>-1,0,1<span class="token punctuation">]</span><span class="token punctuation">]</span>input  <span class="token builtin class-name">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>output <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>input  <span class="token builtin class-name">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>output <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><span id="more"></span><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><strong>思路： 排序+双指针</strong></p><ul><li>若数组为空，返回空列表</li><li>将数组进行排序</li><li>若数组长度小于3，不满足题意，返回空列表</li><li>遍历数组查找是否存在三数之和为 0 ，外层循环<ul><li>若当前元素nums[i] &gt; 0，说明该元素和其后任意两个元素之和肯定不可能为0，则直接返回当前结果列表即可；之所以不使用nums[i] &gt;= 0作为返回条件，是因为存在数组为{0,0,0}的情况也满足题意，若添加了等号为返回条件，则会返回空，不满足题意</li><li>若当前访问元素和其前一个元素值相同，不进行求和判断，防止出现重复的结果</li><li>固定i，令指针left和指针right移动，求和并判断；其中left初始化为i + 1，right初始化为length - 1；开始内层循环</li><li>内层循环以 left &lt; right 为结束条件，若相等，则说明访问到了同一个元素，不满足三数的要求，可作为循环结束的条件<ul><li>三数之和为0，将这三个数组成的列表添加进结果列表，且移动左右指针；然后判断左右指针移动后访问的元素值，是否和其移动前的元素值相等，相等则继续移动，防止重复结果</li><li>三数之和 &gt; 0，右指针左移，使下一次求和结果变小，向0趋近</li><li>三数之和 &lt; 0，左指针右移，使下一次求和结果变大，向0趋近</li></ul></li></ul></li><li>时间复杂度：O(n^2)<br>  排序 O(N logN)，<br>  遍历数组 O(n)，<br>  双指针遍历 O(n)，<br>  总体 O(N logN)+O(n)∗O(n)，O(n^2)</li><li>空间复杂度：O(1)</li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">threeSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> lists <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 数组为空，返回空列表</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> lists<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 数组排序</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 数组长度小于3，不满足题意，返回空列表</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> lists<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 遍历数组查找是否存在三数之和为0</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 当前元素大于零，说明该元素和其后任意两个元素之和肯定不可能为0，则直接返回当前结果即可</span>            <span class="token comment">// 之所以不使用nums[i] >= 0作为返回条件，是因为存在数组为&#123;0,0,0&#125;的情况也满足题意，若添加了等号为返回条件，则会返回空，不满足题意</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> lists<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 当前访问元素和其前一个元素值相同，不进行求和判断，防止出现重复的结果</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 固定i，令指针left和指针right移动，求和并判断；其中left初始化为i + 1，right初始化为length - 1</span>            <span class="token keyword">int</span> left <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> right <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment">// left 和 right 相等时，访问到了同一个元素，不满足三数的要求，可作为循环结束的条件</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 三数之和为0</span>                    <span class="token comment">// 将这三个数组成的列表添加进结果列表</span>                    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    tmp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    tmp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    tmp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    lists<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 左右指针移动</span>                    left<span class="token operator">++</span><span class="token punctuation">;</span>                    right<span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token comment">// 判断左右指针移动后访问的元素值，是否和其移动前的元素值相等，相等则继续移动，防止重复结果</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        left<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">>=</span> left <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        right<span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 三数之和 > 0，右指针左移，使下一次求和结果变小，向0趋近</span>                    right<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 三数之和 &lt; 0，左指针右移，使下一次求和结果变大，向0趋近</span>                    left<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> lists<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？&lt;/li&gt;
&lt;li&gt;找出所有和为 0 且不重复的三元组。&lt;/li&gt;
&lt;li&gt;0 &amp;lt;= nums.length &amp;lt;= 3000&lt;/li&gt;
&lt;li&gt;-105 &amp;lt;= nums[i] &amp;lt;= 105&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; nums &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;-1,0,1,2,-1,-4&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;-1,-1,2&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;-1,0,1&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; nums &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; nums &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.flower48237.com/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.flower48237.com/tags/LeetCode/"/>
    
    <category term="面试" scheme="https://hexo.flower48237.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="数组" scheme="https://hexo.flower48237.com/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="排序" scheme="https://hexo.flower48237.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
    <category term="双指针" scheme="https://hexo.flower48237.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
</feed>
