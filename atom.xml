<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>whtli的个人博客</title>
  
  <subtitle>记录学习过程</subtitle>
  <link href="https://hexo.whtli.cn/atom.xml" rel="self"/>
  
  <link href="https://hexo.whtli.cn/"/>
  <updated>2023-07-26T15:42:48.498Z</updated>
  <id>https://hexo.whtli.cn/</id>
  
  <author>
    <name>whtli</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Else-全排列问题（非递归实现和递归实现）</title>
    <link href="https://hexo.whtli.cn/archives/1efb2029.html"/>
    <id>https://hexo.whtli.cn/archives/1efb2029.html</id>
    <published>2023-07-26T15:39:45.000Z</published>
    <updated>2023-07-26T15:42:48.498Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><ul><li>给定一个不含重复数字的数组 <code>nums</code> ，返回其<strong>所有可能的全排列</strong> 。</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="1-非递归实现，借助栈"><a href="#1-非递归实现，借助栈" class="headerlink" title="1. 非递归实现，借助栈"></a>1. 非递归实现，借助栈</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util</span><span class="token punctuation">.</span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util</span><span class="token punctuation">.</span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util</span><span class="token punctuation">.</span><span class="token class-name">Stack</span><span class="token punctuation">;</span><span class="token comment">/** * @author: Li Qiang * @date: 2023/7/26 * @description: 全排列问题的非递归实现 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Permutations</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Solution</span> solution <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> permutations <span class="token operator">=</span> solution<span class="token punctuation">.</span><span class="token function">permute</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 输出验证</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> permutation <span class="token operator">:</span> permutations<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>permutation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">permute</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment">// 定义结果列表</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 借助栈模拟递归过程</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// currentPath代表当前的排列（不一定是全排列）</span>            <span class="token comment">// 其中的元素代表已将被当前排列采用的元素</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> currentPath <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>currentPath<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 如果当前的排列是全排列，将其添加到结果列表中</span>                ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>currentPath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 如果当前的排列没有完成，通过添加未使用的元素来补充它</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> element <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>currentPath<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">// 如果当前排列的元素中不包含element，则采纳当前数组元素并将其放进新排列中</span>                        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> newPath <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>currentPath<span class="token punctuation">)</span><span class="token punctuation">;</span>                        newPath<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 新的排列（不一定是全排列）暂时压入栈中</span>                        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newPath<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-递归实现"><a href="#2-递归实现" class="headerlink" title="2. 递归实现"></a>2. 递归实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author: Li Qiang * @date: 2023/7/26 * @description: 全排列问题的递归实现 */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> ans<span class="token punctuation">;</span>    <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited<span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> path<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">permute</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">loop</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                path<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">loop</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 回溯</span>                path<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="其他" scheme="https://hexo.whtli.cn/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="Java" scheme="https://hexo.whtli.cn/tags/Java/"/>
    
    <category term="回溯" scheme="https://hexo.whtli.cn/tags/%E5%9B%9E%E6%BA%AF/"/>
    
    <category term="递归" scheme="https://hexo.whtli.cn/tags/%E9%80%92%E5%BD%92/"/>
    
    <category term="栈" scheme="https://hexo.whtli.cn/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot项目使用OSHI获取系统状态信息报错</title>
    <link href="https://hexo.whtli.cn/archives/ce540f07.html"/>
    <id>https://hexo.whtli.cn/archives/ce540f07.html</id>
    <published>2023-04-13T14:00:00.000Z</published>
    <updated>2023-04-13T13:48:52.159Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="SpringBoot项目，使用OSHI获取系统状态信息时，后端打印正常，返回至前端的过程中遇到了以下两个报错"><a href="#SpringBoot项目，使用OSHI获取系统状态信息时，后端打印正常，返回至前端的过程中遇到了以下两个报错" class="headerlink" title="SpringBoot项目，使用OSHI获取系统状态信息时，后端打印正常，返回至前端的过程中遇到了以下两个报错"></a>SpringBoot项目，使用<code>OSHI</code>获取系统状态信息时，后端打印正常，返回至前端的过程中遇到了以下两个报错</h3><ol><li>java.lang.IllegalStateException: Unmapped relationship: 7</li><li>COM exception querying MSAcpi_ThermalZoneTemperature, which might not be on</li></ol><p>解决方式如下：</p><span id="more"></span><h4 id="1-java-lang-IllegalStateException-Unmapped-relationship-7"><a href="#1-java-lang-IllegalStateException-Unmapped-relationship-7" class="headerlink" title="1. java.lang.IllegalStateException: Unmapped relationship: 7"></a>1. java.lang.IllegalStateException: Unmapped relationship: 7</h4><p>解决方式：添加依赖net.java.dev.jna</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- OSHI --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.oshi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>oshi-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- jna --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>net.java.dev.jna<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jna-platform<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.10.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-COM-exception-querying-MSAcpi-ThermalZoneTemperature-which-might-not-be-on"><a href="#2-COM-exception-querying-MSAcpi-ThermalZoneTemperature-which-might-not-be-on" class="headerlink" title="2. COM exception querying MSAcpi_ThermalZoneTemperature, which might not be on"></a>2. COM exception querying MSAcpi_ThermalZoneTemperature, which might not be on</h4><p>解决方式：将获取到的系统状态信息转为String或者整型后再添加到VO中返回</p><h5 id="1-业务逻辑代码"><a href="#1-业务逻辑代码" class="headerlink" title="(1)业务逻辑代码"></a>(1)业务逻辑代码</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>geo<span class="token punctuation">.</span>integrated<span class="token punctuation">.</span>model<span class="token punctuation">.</span>vo</span><span class="token punctuation">.</span><span class="token class-name">SystemStatus</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>geo<span class="token punctuation">.</span>integrated<span class="token punctuation">.</span>service</span><span class="token punctuation">.</span><span class="token class-name">VisualStatusService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j</span><span class="token punctuation">.</span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype</span><span class="token punctuation">.</span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token keyword">import</span> oshi<span class="token punctuation">.</span><span class="token class-name">SystemInfo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">oshi<span class="token punctuation">.</span>hardware</span><span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">oshi<span class="token punctuation">.</span>software<span class="token punctuation">.</span>os</span><span class="token punctuation">.</span><span class="token class-name">OperatingSystem</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VisualStatusServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">VisualStatusService</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 获取系统状态信息     *     * @return 系统状态信息     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">SystemStatus</span> <span class="token function">getSystemState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 系统信息</span>        <span class="token class-name">SystemInfo</span> systemInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SystemInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 操作系统信息</span>        <span class="token class-name">OperatingSystem</span> operationSystemInfo <span class="token operator">=</span> systemInfo<span class="token punctuation">.</span><span class="token function">getOperatingSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 硬件信息</span>        <span class="token class-name">HardwareAbstractionLayer</span> hardwareInfo <span class="token operator">=</span> systemInfo<span class="token punctuation">.</span><span class="token function">getHardware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*有了代表硬件信息的对象HardwareAbstractionLayer之后，就可以获取硬件相关的信息了*/</span>        <span class="token comment">// 内存相关信息</span>        <span class="token class-name">GlobalMemory</span> memoryInfo <span class="token operator">=</span> hardwareInfo<span class="token punctuation">.</span><span class="token function">getMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 内存总容量</span>        <span class="token class-name">String</span> totalMemory <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>memoryInfo<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 可用内存的容量</span>        <span class="token class-name">String</span> availableMemory <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>memoryInfo<span class="token punctuation">.</span><span class="token function">getAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*有了内存总容量和内存可用容量，就可以计算出当前内存的利用率了*/</span>        <span class="token comment">// CPU相关信息</span>        <span class="token class-name">CentralProcessor</span> processor <span class="token operator">=</span> hardwareInfo<span class="token punctuation">.</span><span class="token function">getProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// CPU型号</span>        <span class="token class-name">String</span> processorName <span class="token operator">=</span> processor<span class="token punctuation">.</span><span class="token function">getProcessorIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 物理CPU数</span>        <span class="token keyword">int</span> physicalPackageCount <span class="token operator">=</span> processor<span class="token punctuation">.</span><span class="token function">getPhysicalPackageCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//物理核心数</span>        <span class="token keyword">int</span> physicalProcessorCount <span class="token operator">=</span> processor<span class="token punctuation">.</span><span class="token function">getPhysicalProcessorCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SystemStatus</span> systemStatus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SystemStatus</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>systemInfo<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>operationSystemInfo<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>hardwareInfo<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>memoryInfo<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>totalMemory<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">,</span>                <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>availableMemory<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">,</span>                <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>processor<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>processorName<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>physicalPackageCount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>physicalProcessorCount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> systemStatus<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-VO代码"><a href="#2-VO代码" class="headerlink" title="(2)VO代码"></a>(2)VO代码</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span><span class="token class-name">AllArgsConstructor</span><span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span><span class="token class-name">NoArgsConstructor</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SystemStatus</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 系统信息     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> systemInfo<span class="token punctuation">;</span>    <span class="token comment">/**     * 操作系统信息     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> operationSystemInfo<span class="token punctuation">;</span>    <span class="token comment">/**     * 硬件信息     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> hardwareInfo<span class="token punctuation">;</span>    <span class="token comment">/**     * 内存相关信息     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> memoryInfo<span class="token punctuation">;</span>    <span class="token comment">/**     * 内存总容量     */</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> totalMemory<span class="token punctuation">;</span>    <span class="token comment">/**     * 可用内存的容量     */</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> availableMemory<span class="token punctuation">;</span>    <span class="token comment">/**     * CPU相关信息     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> processor<span class="token punctuation">;</span>    <span class="token comment">/**     * CPU型号     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> processorName<span class="token punctuation">;</span>    <span class="token comment">/**     * 物理CPU数     */</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> physicalPackageCount<span class="token punctuation">;</span>    <span class="token comment">/**     * 物理核心数     */</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> physicalProcessorCount<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;SpringBoot项目，使用OSHI获取系统状态信息时，后端打印正常，返回至前端的过程中遇到了以下两个报错&quot;&gt;&lt;a href=&quot;#SpringBoot项目，使用OSHI获取系统状态信息时，后端打印正常，返回至前端的过程中遇到了以下两个报错&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot项目，使用OSHI获取系统状态信息时，后端打印正常，返回至前端的过程中遇到了以下两个报错&quot;&gt;&lt;/a&gt;SpringBoot项目，使用&lt;code&gt;OSHI&lt;/code&gt;获取系统状态信息时，后端打印正常，返回至前端的过程中遇到了以下两个报错&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;java.lang.IllegalStateException: Unmapped relationship: 7&lt;/li&gt;
&lt;li&gt;COM exception querying MSAcpi_ThermalZoneTemperature, which might not be on&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;解决方式如下：&lt;/p&gt;</summary>
    
    
    
    <category term="SpringBoot+Vue" scheme="https://hexo.whtli.cn/categories/SpringBoot-Vue/"/>
    
    
    <category term="Java" scheme="https://hexo.whtli.cn/tags/Java/"/>
    
    <category term="SpringBoot" scheme="https://hexo.whtli.cn/tags/SpringBoot/"/>
    
    <category term="后端" scheme="https://hexo.whtli.cn/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="maven" scheme="https://hexo.whtli.cn/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>三个线程按指定顺序打印1到100</title>
    <link href="https://hexo.whtli.cn/archives/45fd9871.html"/>
    <id>https://hexo.whtli.cn/archives/45fd9871.html</id>
    <published>2023-03-30T15:12:45.000Z</published>
    <updated>2023-03-31T02:00:42.162Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><ul><li><p>创建三个线程，按指定顺序打印1到100，具体如下：</p><ul><li>线程1打印1</li><li>线程2打印2</li><li>线程3打印3</li><li>线程1打印4</li><li>线程2打印5</li><li>线程3打印6</li><li>……</li><li>线程3打印99</li><li>线程1打印100</li></ul></li><li><p>知识点：wait()/notifyAll()</p></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic</span><span class="token punctuation">.</span><span class="token class-name">AtomicInteger</span><span class="token punctuation">;</span><span class="token comment">/** * @author: LiQiang * @date: 2023/03/30 * @description: 三个线程按顺序打印1到100 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 锁</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 打印区分标识(值为1~3，初始设置1)</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 需要打印的值</span>    <span class="token keyword">static</span> <span class="token class-name">AtomicInteger</span> integer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// private static volatile int number = 1;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 三个线程按顺序打印1~100</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>integer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>resource<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">while</span> <span class="token punctuation">(</span>flag <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                                resource<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                        <span class="token comment">// 打印操作</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>integer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" --- "</span> <span class="token operator">+</span> integer<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment">// break;</span>                        <span class="token punctuation">&#125;</span>                        <span class="token comment">// number ++;</span>                        <span class="token comment">// 变更标识</span>                        flag <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                        <span class="token comment">// 通知线程2</span>                        resource<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"线程1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>integer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>resource<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">while</span> <span class="token punctuation">(</span>flag <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                                resource<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                        <span class="token comment">// 打印操作</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>integer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" --- "</span> <span class="token operator">+</span> integer<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment">// break;</span>                        <span class="token punctuation">&#125;</span>                        <span class="token comment">// 变更标识</span>                        flag <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>                        <span class="token comment">// 通知线程3</span>                        resource<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"线程2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>integer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>resource<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">while</span> <span class="token punctuation">(</span>flag <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                                resource<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                        <span class="token comment">// 打印操作</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>integer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" --- "</span> <span class="token operator">+</span> integer<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment">// break;</span>                        <span class="token punctuation">&#125;</span>                        <span class="token comment">// 变更标识</span>                        flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                        <span class="token comment">// 通知线程1</span>                        resource<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"线程3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="其他" scheme="https://hexo.whtli.cn/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="Java" scheme="https://hexo.whtli.cn/tags/Java/"/>
    
    <category term="多线程" scheme="https://hexo.whtli.cn/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>使用Python获取国自然项目数据</title>
    <link href="https://hexo.whtli.cn/archives/4017ce11.html"/>
    <id>https://hexo.whtli.cn/archives/4017ce11.html</id>
    <published>2023-03-27T03:30:00.000Z</published>
    <updated>2023-03-27T15:06:22.130Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>从指定网站中获取不同分类下的所有国自然项目数据，如优青、杰青、面上、重大等分类中的项目数据。</p><h3 id="依赖包"><a href="#依赖包" class="headerlink" title="依赖包"></a>依赖包</h3><ul><li>urllib3</li><li>time</li><li>csv</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>整个过程分为数据获取和数据处理两部分，具体代码如下。</p><span id="more"></span><h4 id="1-网页原始数据获取"><a href="#1-网页原始数据获取" class="headerlink" title="1.网页原始数据获取"></a>1.网页原始数据获取</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib3<span class="token keyword">import</span> time<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> unquote<span class="token keyword">def</span> <span class="token function">download_content</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    根据链接下载数据    :param url: 链接    :return: 页面数据    '''</span>    http <span class="token operator">=</span> urllib3<span class="token punctuation">.</span>PoolManager<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 不登录只能查看20页，所以总页数需要通过查询条件限制在20页以内，建议通过起止时间来限制，便于分类和获取</span>    body <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'startTime'</span><span class="token punctuation">:</span> <span class="token string">'2016'</span><span class="token punctuation">,</span> <span class="token string">'endTime'</span><span class="token punctuation">:</span> <span class="token string">"2021"</span><span class="token punctuation">,</span>            <span class="token string">'addcomment_s1'</span><span class="token punctuation">:</span> <span class="token string">'D'</span><span class="token punctuation">,</span>            <span class="token string">'searchsubmit'</span><span class="token punctuation">:</span> <span class="token string">'true'</span><span class="token punctuation">,</span>            <span class="token string">'subcategory'</span><span class="token punctuation">:</span> <span class="token string">'优秀青年基金项目'</span><span class="token punctuation">&#125;</span>    <span class="token comment"># letpub网站是POST请求，izaiwen网站（已停用）是GET请求</span>    response <span class="token operator">=</span> http<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'POST'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> fields<span class="token operator">=</span>body<span class="token punctuation">)</span>    <span class="token comment"># 从返回结果中获取页面内容，编码一般是utf-8</span>    response_data <span class="token operator">=</span> response<span class="token punctuation">.</span>data    html_content <span class="token operator">=</span> response_data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    unquote<span class="token punctuation">(</span>html_content<span class="token punctuation">)</span>    <span class="token comment"># print(html_content)</span>    <span class="token keyword">return</span> html_content<span class="token keyword">def</span> <span class="token function">save_to_file</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    保存数据到本地文件    :param filename: 文件名    :param content: 文件内容    :return: 本地文件    '''</span>    fo <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    fo<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span>    fo<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># url需要根据在letpub网站中点击查询时，控制台中显示的实际地址`Request URL`修改</span>    url_prefix <span class="token operator">=</span> <span class="token string">'https://www.letpub.com.cn/nsfcfund_search.php?mode=advanced&amp;datakind=list&amp;currentpage='</span>    <span class="token comment"># 总页数根据网页查询结果调整</span>    page_total <span class="token operator">=</span> <span class="token number">18</span>    <span class="token comment"># 保存路径名建议根据查询条件按年份区分</span>    path_prefix <span class="token operator">=</span> <span class="token string">'./2016-2021/page-'</span>    path_suffix <span class="token operator">=</span> <span class="token string">'.html'</span>    <span class="token comment"># 从第一页开始获取，中间加休眠5~10秒左右，防止访问被禁</span>    page_number <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> page_number <span class="token operator">&lt;=</span> page_total<span class="token punctuation">:</span>        <span class="token comment"># 每页的url</span>        url <span class="token operator">=</span> url_prefix <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>page_number<span class="token punctuation">)</span>        <span class="token comment"># 每页的原始数据</span>        page_data <span class="token operator">=</span> download_content<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token comment"># 每页的保存路径</span>        save_path <span class="token operator">=</span> path_prefix <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>page_number<span class="token punctuation">)</span> <span class="token operator">+</span> path_suffix        <span class="token comment"># 保存每页的数据</span>        save_to_file<span class="token punctuation">(</span>save_path<span class="token punctuation">,</span> page_data<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'page '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>page_number<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' end'</span><span class="token punctuation">)</span>        <span class="token comment"># 休眠10秒</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token comment"># 访问下一个页面</span>        page_number <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-数据处理"><a href="#2-数据处理" class="headerlink" title="2.数据处理"></a>2.数据处理</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> csv<span class="token keyword">def</span> <span class="token function">save_to_file</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    fo <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    fo<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span>    fo<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">replace_string</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    页面数据处理方法（根据网站页面内容自定义，以letpub网站举例）    :param content: 页面内容    :return: 处理后的页面内容    '''</span>    <span class="token triple-quoted-string string">'''    页面数据分割的形式，可以打开原始的页面数据文件看看，找易于分割出需要内容的字符串，像letpub网站有下面两行明显标识，很好分割    '''</span>    content <span class="token operator">=</span> content<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'&lt;!-- ################## start content ################## -->'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    content <span class="token operator">=</span> content<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'&lt;!-- ################## end content ################## -->'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    content <span class="token operator">=</span> content<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'TR>'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token triple-quoted-string string">'''    替换页面中重复多次出现的标签    '''</span>    <span class="token comment"># 此处标签替换为换行符\n是为了区分不同的项目（通常是每页10个项目）</span>    content <span class="token operator">=</span> content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'&lt;tr style="background:#EFEFEF;">'</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>        <span class="token string">'&lt;td style="border:1px #DDD solid; border-collapse:collapse; text-align:left; padding:8px 8px 8px 8px;">'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>        <span class="token string">'style="border:1px #DDD solid; border-collapse:collapse; text-align:left; padding:8px 8px 8px 8px;  font-size:13px; color:#333333;">'</span><span class="token punctuation">,</span>        <span class="token string">''</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>        <span class="token string">'&lt;td style="border:1px #DDD solid; border-collapse:collapse; text-align:left; padding:8px 8px 8px 8px; font-size:13px; color:#333333;"'</span><span class="token punctuation">,</span>        <span class="token string">''</span><span class="token punctuation">)</span>    <span class="token comment"># 项目小标题对于实际内容获取没有帮助，直接替换掉；若需要保留，可以只替换&lt;/td>标签</span>    content <span class="token operator">=</span> content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'题目&lt;/td>'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'学科分类&lt;/td>'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'学科代码&lt;/td>'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'执行时间&lt;/td>'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'中文关键词&lt;/td>'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'英文关键词&lt;/td>'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'结题摘要&lt;/td>'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    <span class="token comment"># 此处的替换字符串@@可以修改为任意其他的可以唯一区分的字符串（如##、#%），不建议使用空格、反斜杠等容易出现内容歧义的字符</span>    content <span class="token operator">=</span> content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'&lt;/td>'</span><span class="token punctuation">,</span> <span class="token string">'@@'</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'&lt;td'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>        <span class="token string">'style="border:1px #DDD solid; border-collapse:collapse; text-align:left; padding:8px 8px 8px 8px; color:#3b5998; font-weight:bold;">'</span><span class="token punctuation">,</span>        <span class="token string">''</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'colspan="6">'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'&lt;/tr>'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'&lt;tr>'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">'''    单独处理页面中剩余的非通用标签，如下方的表头    '''</span>    content <span class="token operator">=</span> content<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'批准年份'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    content <span class="token operator">=</span> content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'&lt;/th>'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'&lt;'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'&lt;/th>'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'  '</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    <span class="token comment"># 返回结果</span>    <span class="token keyword">return</span> content<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    以下参数需要手动指定，以按年份查询区分为例    '''</span>    <span class="token comment"># 页面文件的存储路径</span>    origin_path_name <span class="token operator">=</span> <span class="token string">'./2016-2021/'</span>    <span class="token comment"># 文件前缀、后准、页面数量</span>    file_name_prefix <span class="token operator">=</span> <span class="token string">'page-'</span>    file_name_suffix <span class="token operator">=</span> <span class="token string">'.html'</span>    file_number <span class="token operator">=</span> <span class="token number">18</span>    <span class="token comment"># 结果输出的目标路径</span>    target_path_name <span class="token operator">=</span> <span class="token string">'./flushed_data/2016-2021/'</span>    <span class="token comment"># 处理后文件的前缀、后缀</span>    target_file_name_prefix <span class="token operator">=</span> <span class="token string">'flushed-page-'</span>    target_file_name_suffix <span class="token operator">=</span> <span class="token string">'.txt'</span>    <span class="token triple-quoted-string string">'''    需要从页面数据中获取的常用的信息    '''</span>    <span class="token comment"># 负责人</span>    charge_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment"># 单位</span>    department_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment"># 金额 (万)</span>    money_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment"># 项目编号</span>    project_number_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment"># 项目类型</span>    project_type_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment"># 所属学部</span>    xuebu_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment"># 批准年份</span>    pass_year_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment"># 题目</span>    title_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment"># 学科分类</span>    subject_type_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment"># 学科代码</span>    subject_code_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment"># 执行时间</span>    execution_time_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment"># 记录所有页面中的每一行（因为预处理时不可以替换的换行符\n的存在，会出现空行，通过长度判断筛选掉）</span>    lines <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment"># 从第1个页面开始处理</span>    page_number <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> page_number <span class="token operator">&lt;=</span> file_number<span class="token punctuation">:</span>        <span class="token comment"># 处理后的页面内容</span>        content <span class="token operator">=</span> <span class="token string">''</span>        <span class="token comment"># 页面文件名</span>        file_name <span class="token operator">=</span> origin_path_name <span class="token operator">+</span> file_name_prefix <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>page_number<span class="token punctuation">)</span> <span class="token operator">+</span> file_name_suffix        <span class="token comment"># 打开文件获取数据，按行追加到页面内容中</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> <span class="token string">'r+'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>                content <span class="token operator">+=</span> line        f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 页面数据处理（方法内容自定义，需要根据页面实际内容调整）</span>        content <span class="token operator">=</span> replace_string<span class="token punctuation">(</span>content<span class="token punctuation">)</span>        <span class="token comment"># print(content)</span>        <span class="token comment"># 保存各处理后的页面内容到文件中</span>        save_path <span class="token operator">=</span> target_path_name <span class="token operator">+</span> target_file_name_prefix <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>page_number<span class="token punctuation">)</span> <span class="token operator">+</span> target_file_name_suffix        save_to_file<span class="token punctuation">(</span>save_path<span class="token punctuation">,</span> content<span class="token punctuation">)</span>        <span class="token comment"># 打开上一步保存的处理后的页面数据文件</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>save_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            <span class="token comment"># 将符合筛选要求的行内容添加到列表中（因为预处理时不可以替换的换行符\n的存在，会出现空行，通过长度判断筛选掉）</span>            <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    line <span class="token operator">=</span> line<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>                    lines<span class="token punctuation">.</span>append<span class="token punctuation">(</span>line<span class="token punctuation">)</span>        f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 下一个页面</span>        page_number <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment"># 处理列表信息，分到各个单独的列表中</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>        <span class="token comment"># 可能因为‘结题摘要’等小项的存在，导致出现一些冗余行，先打印结果看看，在循环中加个筛选</span>        <span class="token keyword">if</span> line<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'@@'</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">9</span><span class="token punctuation">:</span>            <span class="token comment"># 页面数据处理方法中人为添加的分隔符做分割，按照网页数据中固定顺序分到不同的列表中</span>            items <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'@@'</span><span class="token punctuation">)</span>            <span class="token comment"># print(items)</span>            charge_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            department_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>items<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            money_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>items<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            project_number_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>items<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            project_type_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>items<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            xuebu_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>items<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            pass_year_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>items<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            title_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>items<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            subject_type_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>items<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            subject_code_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>items<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            execution_time_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>items<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># 把上方的列表合并为一个table</span>    content_to_table <span class="token operator">=</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>charge_list<span class="token punctuation">,</span> department_list<span class="token punctuation">,</span> money_list<span class="token punctuation">,</span> project_number_list<span class="token punctuation">,</span> project_type_list<span class="token punctuation">,</span> xuebu_list<span class="token punctuation">,</span>                           pass_year_list<span class="token punctuation">,</span> title_list<span class="token punctuation">,</span> subject_type_list<span class="token punctuation">,</span> subject_code_list<span class="token punctuation">,</span> execution_time_list<span class="token punctuation">)</span>    <span class="token comment"># 把数据保存到表格中（csv文件如果用word打开乱码，可以用wps打开）</span>    output_table_path <span class="token operator">=</span> origin_path_name<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'.csv'</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>output_table_path<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>f<span class="token punctuation">)</span>        <span class="token keyword">for</span> row <span class="token keyword">in</span> content_to_table<span class="token punctuation">:</span>            writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span>row<span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h3&gt;&lt;p&gt;从指定网站中获取不同分类下的所有国自然项目数据，如优青、杰青、面上、重大等分类中的项目数据。&lt;/p&gt;
&lt;h3 id=&quot;依赖包&quot;&gt;&lt;a href=&quot;#依赖包&quot; class=&quot;headerlink&quot; title=&quot;依赖包&quot;&gt;&lt;/a&gt;依赖包&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;urllib3&lt;/li&gt;
&lt;li&gt;time&lt;/li&gt;
&lt;li&gt;csv&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h3&gt;&lt;p&gt;整个过程分为数据获取和数据处理两部分，具体代码如下。&lt;/p&gt;</summary>
    
    
    
    <category term="其他" scheme="https://hexo.whtli.cn/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="Python" scheme="https://hexo.whtli.cn/tags/Python/"/>
    
    <category term="其他" scheme="https://hexo.whtli.cn/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>pip uninstall scikit-learn报错，Cannot uninstall &#39;scikit-learn&#39;</title>
    <link href="https://hexo.whtli.cn/archives/48d922c5.html"/>
    <id>https://hexo.whtli.cn/archives/48d922c5.html</id>
    <published>2022-11-07T14:00:00.000Z</published>
    <updated>2022-11-20T13:50:15.947Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="执行命令-pip-uninstall-scikit-learn-报错，Cannot-uninstall-‘scikit-learn’"><a href="#执行命令-pip-uninstall-scikit-learn-报错，Cannot-uninstall-‘scikit-learn’" class="headerlink" title="执行命令 pip uninstall scikit-learn 报错，Cannot uninstall ‘scikit-learn’"></a>执行命令 <code>pip uninstall scikit-learn</code> 报错，Cannot uninstall ‘scikit-learn’</h4><h4 id="具体报错如下："><a href="#具体报错如下：" class="headerlink" title="具体报错如下："></a>具体报错如下：</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ERROR: Cannot uninstall <span class="token string">'scikit-learn'</span><span class="token builtin class-name">.</span> It is a distutils installed project and thus we cannot accurately determine <span class="token function">which</span> files belong to it <span class="token function">which</span> would lead to only a partial uninstall.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">不能卸载“scikit-learn”。这是一个安装了distutils的项目，因此我们不能准确地确定哪些文件属于它，这将导致只有部分卸载。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><span id="more"></span><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>大概率是其他依赖中包含了scikit-learn，如<code>keras</code>，<code>tensorflow</code>。</p><h4 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h4><p>先从本地文件夹中搜索如<code>keras</code>，<code>tensorflow</code>等包中是否包含scikit-learn。<br>若是，则先把这些包卸载掉，然后，找到并删除虚拟环境（以anaconda的虚拟环境为例）中的<code>scikit-learn * .egg-info</code>文件。<br>最后，重新安装需要版本的scikit-learn，再安装其他被卸载的依赖包（如<code>keras</code>）即可。 </p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;执行命令-pip-uninstall-scikit-learn-报错，Cannot-uninstall-‘scikit-learn’&quot;&gt;&lt;a href=&quot;#执行命令-pip-uninstall-scikit-learn-报错，Cannot-uninstall-‘scikit-learn’&quot; class=&quot;headerlink&quot; title=&quot;执行命令 pip uninstall scikit-learn 报错，Cannot uninstall ‘scikit-learn’&quot;&gt;&lt;/a&gt;执行命令 &lt;code&gt;pip uninstall scikit-learn&lt;/code&gt; 报错，Cannot uninstall ‘scikit-learn’&lt;/h4&gt;&lt;h4 id=&quot;具体报错如下：&quot;&gt;&lt;a href=&quot;#具体报错如下：&quot; class=&quot;headerlink&quot; title=&quot;具体报错如下：&quot;&gt;&lt;/a&gt;具体报错如下：&lt;/h4&gt;&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;ERROR: Cannot uninstall &lt;span class=&quot;token string&quot;&gt;&#39;scikit-learn&#39;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; It is a distutils installed project and thus we cannot accurately determine &lt;span class=&quot;token function&quot;&gt;which&lt;/span&gt; files belong to it &lt;span class=&quot;token function&quot;&gt;which&lt;/span&gt; would lead to only a partial uninstall.&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;不能卸载“scikit-learn”。这是一个安装了distutils的项目，因此我们不能准确地确定哪些文件属于它，这将导致只有部分卸载。&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="D2L" scheme="https://hexo.whtli.cn/categories/D2L/"/>
    
    
    <category term="深度学习" scheme="https://hexo.whtli.cn/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Python" scheme="https://hexo.whtli.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Estimating High-Dimensional Directed Acyclic Graphs with the PC-Algorithm</title>
    <link href="https://hexo.whtli.cn/archives/3abfd6b2.html"/>
    <id>https://hexo.whtli.cn/archives/3abfd6b2.html</id>
    <published>2022-10-28T13:00:00.000Z</published>
    <updated>2022-11-21T02:50:15.052Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>原文：Kalisch M, Buehlmann P. Estimating high-dimensional directed acyclic graphs with the PC-algorithm. J Mach Learn Res 2007;8:613–36.<br><a href="https://www.jmlr.org/papers/volume8/kalisch07a/kalisch07a.pdf">原文网页版</a><br><a href="https://www.webofscience.com/wos/alldb/full-record/WOS:000247002700008">Web of science</a></p></blockquote><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>本文研究了PC算法用于估计具有相应高斯分布的高维有向无环图（DAG）的骨架和等价类。 对于有许多节点（变量）的稀疏问题，PC算法在计算上是可行的，而且往往非常快，它具有吸引人的特性，可以自动实现高计算效率，作为真实底层DAG的稀疏程度的函数。本文证明了该算法在高维稀疏DAGs中的一致性，并允许节点数量随样本大小n快速增长，对于任何0 &lt; a &lt;∞快如$O(n^a)$。稀疏性假设是相当最小的，只要求DAG中的邻域的阶数低于样本容量n。文章还演示了模拟数据的PC算法。</p><span id="more"></span><h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h2><p>图模型是一种用来分析和可视化随机变量之间的条件独立性关系流行的概率工具。模型的主要构建模块是节点（代表随机变量）和边（编码了顶点的条件独立性关系）。随机变量之间的条件独立性结构可以使用马尔可夫性质来探索。</p><p>当前的研究兴趣是有向无环图（DAG），它包含有向边而不是无向边，这在一定程度上限制了条件独立性关系。这些图可以应用马尔可夫性质来解释。当忽略DAG的方向，可以得到一个DAG的骨架。通常来说，它和条件独立性图（CIG）是不同的，见2.1节（因此，有向图的估计方法不能简单地借鉴无向的CIG的估计方法）。2.1节中可以看到，骨架可以很容易地解释，从而对数据的依赖结构产生有趣的见解。</p><p>由于DAG空间的巨大规模，从数据中估计DAG是困难的，在计算上也是不可行的：可能的DAG的数量在节点数量上是超指数的。然而，针对中小规模节点数量，有一些十分成功的的 搜索-评分方法。例如，搜索空间可能像MWST那样被限制为树结构，或者采用贪婪的搜索方式。如GES (Greedy Equivalent Search, see Chickering, 2002a) 方法所述，贪婪的DAG搜索可以通过利用概率等价关系来优化，且搜索空间可以从单个DAG缩小到等价类。尽管这种方法在中小规模的节点数量情况下似乎很有前途，但它受限于一个事实，即等价类的空间在节点数量增长时也是超指数增长的 (Gillispie and Perlman, 2001)。</p><p>一个有趣的替代贪婪或者结构限制的方法是Spirtes等人在2000年提出的PC算法。它从一个完备的无向图开始，基于条件独立性决策递归地删除边。这会生成一个无向图，然后它会被部分地定向，并进一步扩展以表示底层的DAG。PC算法在最坏的情况下是以运行时间是运行的，但是如果真实的底层DAG是稀疏的（这通常是一个合理的假设），运行时间将会缩减为多项式时间。</p><p>在过去，提出了一些有趣的混合方法，最近，Tsamardinos等人(2006)提出了一种计算上非常有竞争力的算法。本文还参考了他们的论文，在广泛的算法之间进行了相当详尽的数值比较研究。</p><p>本文主要研究了在高维环境下DAGs的等价类和骨架的估计（对应于多元高斯分布），即节点数p可能远远大于样本数n。本文证明，当样本大小n→∞时，即使允许维数 $p = p_n = O(n^a) (0 ≤ a ＜∞)$作为n的函数快速增长，PC算法也能一致地估计出底层稀疏DAG地等价类和骨架。</p><p>如第4.5节所示，本文对PC算法的实现速度惊人地快，它允许估计一个稀疏的DAG，即使p很大。对于p远大于n的高维设定，底层DAG的稀疏性对于统计一致性和计算可行性是至关重要的。本文的分析似乎是第一次为高维DAG建立了一个可证明的正确算法（在渐进意义上），该算法在计算上是可行的。</p><p>关于包括PC算法在内的一类方法的一致性问题已经被Sprites等人和Robins等人在因果推断的文章讨论过。他们证明，只假设忠实性（第二节中有说明），统一一致性无法实现，但点状一致性可以实现。在本文中，本文用两种方式对其进行了扩展：本文提供了一套假设，使PC算法具有统一的一致性。更重要的是，本文证明即使是当节点数和邻居数增加，并且最小的非零协方差作为样本量的函数而减小，这个一致性也能始终保持。Zhang和Spirtes（2003）也提出了比忠实性条件更严格的假设，使均匀一致成为可能。Zuk等人（2006）对学习正确的贝叶斯网络结构需要多少样本的更普遍的讨论。</p><p>寻找DAG的等价类的问题与特征选择问题有很大的重合：如果找到了等价类，则可以很容易地读取任意变量(节点)的马尔可夫毯。给定一个节点集合<em>V</em>，假设<em>M</em>是节点<em>X</em>的马尔科夫毯，那么在给定M的条件下，<em>X</em>与<em>V\M</em>是条件独立的。因此，M包含且只包含所有的<em>X</em>的相关特征。例如，见Goldenberg和Moore(2004)关于处理非常高的维度的方法，或Ng(1998)关于处理泛化误差的界限的相当普遍的方法。</p><h2 id="2-Finding-the-Equivalence-Class-of-a-DAG"><a href="#2-Finding-the-Equivalence-Class-of-a-DAG" class="headerlink" title="2. Finding the Equivalence Class of a DAG"></a>2. Finding the Equivalence Class of a DAG</h2><p>在本节中，首先说明主要的概念。然后，给出关于PC算法的详尽描述。</p><h3 id="2-1-Definitions-and-Preliminaries"><a href="#2-1-Definitions-and-Preliminaries" class="headerlink" title="2.1 Definitions and Preliminaries"></a>2.1 Definitions and Preliminaries</h3><p>图 <em>G=(V, E)</em> 由一组顶点<em>V={1，…，p}</em> 和一组边 <em>E⊆V×V</em> 组成，即边集是不同节点的有序对的子集。在本文的设定中，节点集对应于随机变量<em>X∈R^p^</em> 的分量。如果 <em>(i, j)∈E</em> 且<em>(j, i)</em>/∈<em>E</em> ，则边 <em>(i, j)∈E</em> 被叫做有向边，用符号<em>i→j</em> 表示。如果 <em>(i, j)∈E</em> 且 <em>(j, i)∈E</em> ，则该边被叫做无向边用符号 <em>i-j</em> 表示。一个有向无环图（DAG）是一个所有边都是有向边且不包含环的图。</p><p>如果存在有向边 <em>i→j</em> ，则节点i是节点 <em>j</em> 的父节点。节点j的父节点的集合用 <em>pa(j)</em> 表示。节点 <em>j</em> 在图 <em>G</em> 中的邻居集合用 <em>adj(G, j)</em> 表示，它表示所有直接和 <em>j</em> 通过边（有向或者无向）连接的节点。 <em>adj(G, j)</em> 中的节点也被称为j的邻居或者与 <em>j</em> 相邻。</p><p>如果 $R^p$上 的概率分布 <em>P</em> 中的条件独立性可以从图 <em>G</em> 的d-separation中被推断出来，反之亦然，则 <em>P</em> 忠诚于图 <em>G</em> 。更精确的说：考虑一个随机向量 <em>X~P</em> 。 <em>P</em> 的忠诚性意味着：对于任意的 <em>i,j∈V</em> 且 <em>i≠j</em> ，则对于任意的 <em>s⊆V</em> 有</p><p>$X^{(i)}$ and $X^{(j)}$ are conditionally independent given ${X^{(r)}; r ∈ s}$</p><p>⇔ node <em>i</em> and node <em>j</em> are d-separated by the set <strong>s</strong>.</p><p><code>d-separation</code>的概念可以由道德图定义；详见Lauritzen的描述 (1996,Prop. 3.25)。在此指出，忠实性是排除某些类别的概率分布的。Spirtes等人（2000，第3.5.2章）给出了一个非忠实分布的例子。另一方面，多元正态族（本文将限制在此）的非忠诚分布在与DAG G相关的分布空间中形成一个Lebesgue 空集，见Meek(1995a)。</p><p>DAG <em>G</em> 的骨架是用无向边代替 <em>G</em> 中的有向边得到的无向图。DAG <em>G</em> 中的 <code>v-structure</code> 是一个有序的三元节点组 <em>(i, j, k)</em> 使得G包含有向边 <em>i→j</em> 和 <em>k→j</em> ，并且 <em>i</em>  和 <em>k</em> 在G中不相邻。</p><p>众所周知，对于一个由DAG <em>G</em> 生成的概率分布 <em>P</em> ，存在一个完整的具有对应分布 <em>P</em> 的等价类DAGs (见 Chickering, 2002a, Section 2.2 )。即使有无限多的观察结果，本文也无法区分一个等价类中的不同DAG。利用Verma和Pearl(1990)的一个成果，可以更精确的描述等价类的特征。当且仅当两个DAG有相同的骨架和相同的v-structure时，他们是等价的。</p><p>常用的DAG等价类的可视化工具是完备的部分有向无环图（CPDAG）。一个部分有向无环图（PDAG）是一个部分边有向且部分边无向的图。PDAG之间或PDAG和DAG之间的等价性可以通过检查骨架和V形结构来决定，就像DAG一样。一个PDAG是完备的，如果：(1)在属于DAG等价类的每个DAG中也存在相应的有向边，且(2)对于每条无向边 <em>i−j</em> ，在等价类中存在一个带i→j的DAG和一个带 <em>i←j</em> 的DAG。</p><p>CPDAG编码了相应的等价类中包含的所有独立性信息。Chickering（2002）证明，当且仅当两个CPDAG表示的是同一个等价类时，它们是等价的，即，它们表示的是同一个等价类。</p><p>尽管主要目标是确定CPDAG，骨架本身已经包含了有趣的信息。尤其是，如果概率分布P忠诚于一个DAG G，</p><p>there is an edge between nodes i and j in the skeleton of DAG G</p><p>⇔ for all $s ⊆ V \ {i, j}, X^{(i)}$ and $X^{(j)}$ are conditionally dependent given ${X^{(r)}; r∈s}$,(1)</p><p>(Spirtes et al., 2000, Th. 3.4). 这表明如果概率分布P对于一个DAG G来说是忠诚的，则DAG G的骨架是对应于P的条件独立性图（CIG）的真子集（或子集）。原因是CIG中的一条边只需要在给定集合<em>V \ {i, j}</em> 的情况下有条件依赖性。更重要的是，骨架张的每条边都表示某种强依赖，其不能通过其他变量来解释。本文认为，这个性质对探索性分析很有意义。</p><p>在接下来的细节内容中将看到，估计CPDAG主要由两部分组成（这自然地组成了本文地分析结构）：（1）骨架的估计（2）部分边的定向。所有统计推断都在第一部分完成，第二部分只是对第一部分的结果应用确定性的规则。因此本文将更多的注意力放在第一部分上，如果第一部分操作正确，那么第二部分将永远不会失败。但是，如果在第一部分中出现错误，第二部分将对它更加敏感，因为它更详细地依赖于(1)的推断结果。当处理高维设定时（p大，n小），CPDAG比骨架的恢复更加困难。此外，对于CPDAG的解释更多地依赖于图的全局正确性。而对于骨架的解释只依赖于局部区域，因此更可靠。</p><p>本文的结论是，如果真实的底层概率机制是由DAG生成的，那么找到CPDAG是主要目标。骨架本身通常已经提供了有趣的见解，在高维设定中，当找到一个有用的CPDAG的近似似乎没有希望时，使用无向骨架作为CPDAG的替代目标可能是有趣的。</p><p>综上所述，本文接下来将描述两个主要步骤。首先，文章讨论PC算法生成骨架图的部分。之后文章将通过讨论寻找CPDAG的扩展来完成该算法。在讨论PC算法理论性质的时，文章将使用相同的格式。</p><h3 id="2-2-The-PC-algorithm-for-Finding-the-Skeleton"><a href="#2-2-The-PC-algorithm-for-Finding-the-Skeleton" class="headerlink" title="2.2 The PC-algorithm for Finding the Skeleton"></a>2.2 The PC-algorithm for Finding the Skeleton</h3><p>寻找骨架的一种朴素的策略是检查给定所有子集s⊆V \ {i, j}(见公式1)的”条件独立性”，也就是说，如Verma和j . pearl(1991)首次提出的，在多元正态分布情况下的所有”偏相关”。当p大于样本量时，这在计算上是不可行的，在统计上也是不恰当的。PC算法使用了一个更好的办法，它可以利用图的稀疏性。更准确地说，文章应用PC算法的一部分来识别DAG的无向边。</p><h4 id="2-2-1-POPULATION-VERSION-FOR-THE-SKELETON"><a href="#2-2-1-POPULATION-VERSION-FOR-THE-SKELETON" class="headerlink" title="2.2.1 POPULATION VERSION FOR THE SKELETON"></a>2.2.1 POPULATION VERSION FOR THE SKELETON</h4><p>在PC算法地population版本中，文章假设对所有必要地条件独立性都有充分地了解。这里指的PC算法是别人所说的PC算法的第一部分；另一部分在第2.3节的算法2中描述。</p><p><img src="https://s2.loli.net/2022/10/28/xzcpsmuOUCkMS6Z.png" alt="image-20221028194614633"></p><p>PC算法的第一部分在Algorithm1中给出。算法1中 <em>l</em> 的最大值可表示为</p><p>$m_{reach}$ = maximal reached value of <em>l</em>. (2) </p><p>$m_{reach}$的值取决于底层分布。</p><p>从Spirtes等人（2000）中的定理5.1中，可以很容易地推导出该算法会生成正确的骨架。文章总结如下。</p><p><strong>Proposition 1</strong> 考虑一个DAG G并假设分布P忠诚于G。标记最大邻居数为 $q=max_{1≤j≤p}|adj(G, j)|$。然后，$PC_{pop}$ 算法构建DAG的真实骨架。此外，$m_{reach}∈{\lbrace q-1, q\rbrace}$</p><p>（原文附录A中给出了证明。）</p><h4 id="2-2-2-SAMPLE-VERSION-FOR-THE-SKELETON"><a href="#2-2-2-SAMPLE-VERSION-FOR-THE-SKELETON" class="headerlink" title="2.2.2 SAMPLE VERSION FOR THE SKELETON"></a>2.2.2 SAMPLE VERSION FOR THE SKELETON</h4><p>对于有限的样本，需要估计条件独立性。本文将自身限制在高斯情况下，其中所有节点都对应于具有多元正态分布的随机变量。此外，本文假设忠诚性模型，这意味着条件独立关系对应于d-separation (因此可以从图中读出)，反之亦然；见第2.1节。</p><p>在高斯情况下，可以从偏相关性中推断出条件的独立性。</p><p><strong>Proposition 2</strong> 假设随机变量X的分布P是多元正态分布。对于$i ≠ j\in {1,…, p}, k⊆{\lbrace 1,…, p\rbrace}\setminus {\lbrace i, j\rbrace}$，使用符号$\rho_{i,j\mid k}$来表示$X^{(i)}$和$X^{(j)}$在给定 $\lbrace X^{(r)};r\in k \rbrace$时的偏相关性。那么，当且仅当$X^{(i)}$和$X^{(j)}$在给定$\lbrace X^{(r)};r\in k \rbrace $条件独立时$\rho_{i,j\mid k}$的值为0。</p><p>证明：该主张是多变量正态分布的一个基本属性，见Lauritzen(1996, Prop. 5.2.)。</p><p>因此可以估计偏相关性，以获得条件独立性的估计。样本偏相关性$\hatρ$可以通过回归，部分协方差矩阵的反演，或者使用以下恒等式来递归计算：对于<em>h</em>∈k，</p><img src="https://s2.loli.net/2022/10/28/31ndelUK2hsJtyN.png" alt="image-20221028195415811" style="zoom:50%;" /><p>本文使用的是递归方法（上式，即第三种方法）。为了检验偏相关系数是否为0，本文使用Fisher’s z-transform对偏相关系数进行转换。</p><img src="https://s2.loli.net/2022/10/28/NwzIPAyJZxsU16Y.png" alt="image-20221028195600738" style="zoom:50%;" /><p>当使用显著性水平α时，经典决策理论生成了以下规则。$H_0$和$H_A$。当$sqrt(n−|k|−3|)Z(i,j|k)|&gt;Φ^{−1}(1−α/2)$时，接受$H_A:\rho_{i,j|k}≠0$；拒绝$H_0:\rho_{i,j|k}=0$；其中Φ(·)代表N(0, 1)的累积分布函数。</p><p>用 $sqrt(n−|k|−3|)Z(i,j|k)| ≤ Φ^{−1}(1−α/2)$替换 $PC_{pop}$算法 中的第11行：“<strong>if</strong> <em>i</em> and <em>j</em> are conditionally independent given <strong>k</strong> <strong>then</strong>”。该算法产生一个依赖于数据的值$\hat{m}_{reach}$，它是公式(2)的样本版本。</p><p>$PC_{pop}$ 算法的唯一调优参数是α，这是检验偏相关性的显著性水平。</p><p>正如将在第3节中看到的，即使p远大于n，但当DAG是稀疏的，该算法也是渐进一致的。</p><h3 id="2-3-Extending-the-Skeleton-to-the-Equivalence-Class"><a href="#2-3-Extending-the-Skeleton-to-the-Equivalence-Class" class="headerlink" title="2.3 Extending the Skeleton to the Equivalence Class"></a><strong>2.3 Extending the Skeleton to the Equivalence Class</strong></h3><p>在寻找算法1中的骨架时，记录了使边缘在由S表示的变量中消失的分离集。这对于寻找骨架本身来说是不必要的，但对于将骨架扩展到等价类来说是必不可少的。在算法2中，描述了Pearl(2000, p.50f)的工作，将骨架扩展到属于底层DAG的等价类的CPDAG。</p><p><img src="https://s2.loli.net/2022/10/28/P6RMmd5rEuIk8qD.png" alt="image-20221028200302479"></p><p>算法2的输出是一个CPDAG，这是由Meek（1995b）首次证明的。</p><h2 id="3-Consistency-for-High-Dimensional-Data"><a href="#3-Consistency-for-High-Dimensional-Data" class="headerlink" title="3. Consistency for High-Dimensional Data"></a>3. Consistency for High-Dimensional Data</h2><p>由第二节可以看到，首先处理寻找骨架的问题。接下来，将结果扩展到寻找CPDAG。</p><h3 id="3-1-Finding-the-Skeleton"><a href="#3-1-Finding-the-Skeleton" class="headerlink" title="3.1 Finding the Skeleton"></a>3.1 Finding the Skeleton</h3><p>本文将证明第2.2.2节中的PC算法对于DAG的骨架是渐进一致的，即使p远大于n，而DAG是稀疏的。本文假设数据是i.i.d.（独立同分布）的向量$X_1, …, X_n，X_i∈R^p$ 来自有对应分布P的DAG G。为了观察高维行为，本文将使维数作为样本大小的函数增长：因此，$p=p_n$，且$DAG~G=G_n$，分布$P = P_n$。假设如下：</p><ul><li>（A1）对于任意的n，分布P<del>n</del>是多元正态分布且忠诚于DAG $G_n$。</li><li>（A2）维数$p_n=O(n^a)，0≤a＜∞$</li><li>（A3）$DAG~G_n$中的最大邻居数表示为 $q_n=max_{1≤j≤p_n}|adj(G,j)|$，与$q_n=O(n^{(1−b)}), 0&lt;b≤1$。</li><li>（A4）对于集合$k⊆{\lbrace1，…，p_n}\rbrace \setminus {\lbrace i, j\rbrace}$，给定{X^(r)^; r∈k}时，$X^{(i)}$和$X^{(j)}$之间的偏相关用 $ρ_{n;i,j|k}$ 表示。它们的绝对值有上界和下界：<img src="https://s2.loli.net/2022/10/28/uqLDXMWzjG7myhC.png" alt="image-20221028200721136">)（A1）是图模型中常用的假设，尽管它确实限制了可能的概率分布类型（见2.1节的第三段）；（A2）允许维度作为样本量的函数的任意多项式增长，即高维度；（A3）是稀疏假设；（A4)是正则性条件。定理1如下图：<img src="https://s2.loli.net/2022/10/28/o3KeDtPZCJywBaI.png" alt="image-20221028200803279"></li></ul><h3 id="3-2-Extending-the-Skeleton-to-the-Equivalence-Class"><a href="#3-2-Extending-the-Skeleton-to-the-Equivalence-Class" class="headerlink" title="3.2 Extending the Skeleton to the Equivalence Class"></a>3.2 Extending the Skeleton to the Equivalence Class</h3><p>如前所述，所有的推理都是在寻找骨架时完成的。如果这部分完美地完成，也就是说，如果在测试条件独立性时没有错误（假设骨架被正确估计是不够的），第二部分将永远不会失败（见Meek，1995b）。因此，很容易得到定理2：</p><p><img src="https://s2.loli.net/2022/10/28/puPJif1xqN9FIlA.png" alt="image-20221028200900068"></p><h2 id="4-Numerical-Examples"><a href="#4-Numerical-Examples" class="headerlink" title="4. Numerical Examples"></a>4. Numerical Examples</h2><p>本文分析了PC算法使用各种模拟数据集来寻找骨架和CPDAG。利用R语言的<code>pcalg</code>包得到了数值结果。关于对不同算法的广泛的数值比较研究，文章参考了Tsamardinos等人的文章（2006）。</p><h3 id="4-1-Simulating-Data"><a href="#4-1-Simulating-Data" class="headerlink" title="4.1 Simulating Data"></a>4.1 Simulating Data</h3><h3 id="4-2-Choice-of-Significance-Level"><a href="#4-2-Choice-of-Significance-Level" class="headerlink" title="4.2 Choice of Significance Level"></a>4.2 Choice of Significance Level</h3><p>文章中通过多组对比实验，认为α=0.005或α=0.01时的拟合效果最好。</p><p><strong>4.3 Performance for Different Parameter Settings</strong></p><p>为了保持概述在一个可管理的大小，文章将后续实验的显著性水平限制为α = 0.01。</p><p><strong>4.4 Properties in High-Dimensional Setting</strong></p><p>从某种意义上说，DAG的真实边的百分比的稀疏性是下降的，而在另一种意义上，邻域大小的稀疏性是随着n的增加而增加的。</p><p><strong>4.5 Computational Complexity</strong></p><p>PC 算法的计算复杂度难以精确计算，但最坏情况是以作为维数p的函数的公式(4)为界的。</p><h2 id="5-R-Package-pcalg"><a href="#5-R-Package-pcalg" class="headerlink" title="5. R-Package pcalg"></a>5. R-Package pcalg</h2><p>R语言包<code>pcalg</code>可用于从数据中估计DAG的底层骨架或等价类。若要使用此软件包，就需要安装统计软件R。R和R包都可以在<a href="http://www.r-project.org免费获得。对于低维问题（但不是对于成百成千上万的p），还有许多pc算法的其他实现也值得一提：">http://www.r-project.org免费获得。对于低维问题（但不是对于成百成千上万的p），还有许多pc算法的其他实现也值得一提：</a></p><p> • Hugin at <a href="http://www.hugin.com">http://www.hugin.com</a> . </p><p>• Murphy’s Bayes Network toolbox at <a href="http://bnt.sourceforge.net">http://bnt.sourceforge.net</a> . </p><p>• Tetrad IV at <a href="http://www.phil.cmu.edu/projects/tetrad">http://www.phil.cmu.edu/projects/tetrad</a> .</p><p>接下来将展示一个如何使用R包<code>pcalg</code>生成随机DAG，抽取样本并从数据中推断原始DAG的骨架和等价类。结果骨架和CPDAG中的边的线宽可以被调整，以对应于估计得到的依赖关系的可靠性。(线宽与✓(n−|k|−3)Z(i, j, k)的最小值成正比。因此，粗线是<code>可靠</code>的)。</p><h3 id="示例代码（原文和新版本R包）"><a href="#示例代码（原文和新版本R包）" class="headerlink" title="示例代码（原文和新版本R包）"></a>示例代码（原文和新版本R包）</h3><h4 id="原文版本-Old-example-in-this-paper-the-new-version-of-R-package"><a href="#原文版本-Old-example-in-this-paper-the-new-version-of-R-package" class="headerlink" title="原文版本 Old example in this paper(the new version of R-package)"></a>原文版本 Old example in this paper(the new version of R-package)</h4><pre class="line-numbers language-R" data-language="R"><code class="language-R">library(pcalg)## define parameters# number of random variablesp &lt;- 10# number of samplesn &lt;- 10000# sparsness of the graphs &lt;- 0.4 ## generate random dataset.seed(42)# generate a random DAGg &lt;- randomDAG(p, s) # generate random samplesd &lt;- rmvDAG(n, g) ## Note : pcAlgo is DEPRECATED in the new version of pcalg package, and the new method &#39;pc&#39;, &#39;skeleton&#39; is recommended.# estimate of the skeletongSkel &lt;- pcAlgo(d, alpha&#x3D;0.05) gCPDAG &lt;- udag2cpdag(gSkel)# The CPDAG can also be estimated directly usinggCPDAG &lt;- pcAlgo(d, alpha&#x3D;0.05, directed&#x3D;TRUE)## plot the graphplot(g)plot(gSkel, zvalue.lwd&#x3D;TRUE)plot(gCPDAG, zvalue.lwd&#x3D;TRUE)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/10/28/vSON4XG7lDWt2dT.png" alt="image-20221028201108702"></p><h4 id="新的R包版本-New-example-in-the-new-version-of-R-package"><a href="#新的R包版本-New-example-in-the-new-version-of-R-package" class="headerlink" title="新的R包版本 New example in the new version of R-package"></a>新的R包版本 New example in the new version of R-package</h4><pre class="line-numbers language-R" data-language="R"><code class="language-R">## Using Gaussian Datalibrary(pcalg)library(Rgraphviz)library(graph)library(BiocGenerics)library(grid)# Load predefined datadata(gmG)n &lt;- nrow(gmG8$x)# labels aka node namesV &lt;- colnames(gmG8$x) # estimate skeletonskel.fit &lt;- skeleton(suffStat &#x3D; list(C &#x3D; cor(gmG8$x), n &#x3D; n), indepTest &#x3D; gaussCItest, alpha &#x3D; 0.01, labels &#x3D; V, verbose &#x3D; TRUE)if (require(Rgraphviz)) &#123;  ## show estimated Skeleton  par(mfrow&#x3D;c(1,2))  plot(skel.fit, main &#x3D; &quot;Estimated Skeleton&quot;)  plot(gmG8$g, main &#x3D; &quot;True DAG&quot;)&#125;# estimate CPDAGpc.fit &lt;- pc(suffStat &#x3D; list(C &#x3D; cor(gmG8$x), n &#x3D; n), indepTest &#x3D; gaussCItest, alpha &#x3D; 0.01, labels &#x3D; V, verbose &#x3D; TRUE)if (require(Rgraphviz)) &#123;  ## show estimated CPDAG  par(mfrow&#x3D;c(1,2))  plot(pc.fit, main &#x3D; &quot;Estimated CPDAG&quot;)  plot(gmG8$g, main &#x3D; &quot;True DAG&quot;)&#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://s2.loli.net/2022/10/28/obexHu2dNvyPCfq.png" alt="image-20221028201156455" style="zoom: 33%;" /><img src="https://s2.loli.net/2022/10/28/Zk5ogUNzJHslXTR.png" alt="image-20221028201240787" style="zoom: 33%;" /><h2 id="6-Conclusions"><a href="#6-Conclusions" class="headerlink" title="6. Conclusions"></a>6. Conclusions</h2><p>本文表明，对于DAG（由CPDAG表示）及其骨架的等价类，PC算法是渐进一致的，具有相应的高维稀疏高斯分布。此外，PC算法对于这种高维、稀疏的问题在计算上是可行的。把这两个事实放在一起，PC算法被确立为一种方法（到目前（文章发表于2007年）为止是唯一的一种），它在计算上是可行的，并且在统一一致性的意义上是可以证明正确的，适用于高维DAGs。稀疏性，即真正底层DAG的邻域的最大大小，对于统计一致性和计算可行性至关重要，其复杂度最多是作为维数函数的多项式。</p><p>文章强调，DAG的骨架经常提供有趣的见解，在高维环境下，使用<code>无向的骨架</code>作为更简单但更现实的目标而不是整个CPDAG是非常明智的。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;原文：Kalisch M, Buehlmann P. Estimating high-dimensional directed acyclic graphs with the PC-algorithm. J Mach Learn Res 2007;8:613–36.&lt;br&gt;&lt;a href=&quot;https://www.jmlr.org/papers/volume8/kalisch07a/kalisch07a.pdf&quot;&gt;原文网页版&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.webofscience.com/wos/alldb/full-record/WOS:000247002700008&quot;&gt;Web of science&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Abstract&quot;&gt;&lt;a href=&quot;#Abstract&quot; class=&quot;headerlink&quot; title=&quot;Abstract&quot;&gt;&lt;/a&gt;Abstract&lt;/h2&gt;&lt;p&gt;本文研究了PC算法用于估计具有相应高斯分布的高维有向无环图（DAG）的骨架和等价类。 对于有许多节点（变量）的稀疏问题，PC算法在计算上是可行的，而且往往非常快，它具有吸引人的特性，可以自动实现高计算效率，作为真实底层DAG的稀疏程度的函数。本文证明了该算法在高维稀疏DAGs中的一致性，并允许节点数量随样本大小n快速增长，对于任何0 &amp;lt; a &amp;lt;∞快如$O(n^a)$。稀疏性假设是相当最小的，只要求DAG中的邻域的阶数低于样本容量n。文章还演示了模拟数据的PC算法。&lt;/p&gt;</summary>
    
    
    
    <category term="Causality" scheme="https://hexo.whtli.cn/categories/Causality/"/>
    
    
    <category term="Causality" scheme="https://hexo.whtli.cn/tags/Causality/"/>
    
    <category term="因果推断" scheme="https://hexo.whtli.cn/tags/%E5%9B%A0%E6%9E%9C%E6%8E%A8%E6%96%AD/"/>
    
    <category term="贝叶斯网络" scheme="https://hexo.whtli.cn/tags/%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode腾讯精选练习50题-011.盛水最多的容器</title>
    <link href="https://hexo.whtli.cn/archives/f371ce93.html"/>
    <id>https://hexo.whtli.cn/archives/f371ce93.html</id>
    <published>2022-10-03T03:00:00.000Z</published>
    <updated>2022-10-27T12:57:23.870Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定一个长度为 n 的整数数组 height 。</li><li>有 n 条垂线，第 i 条线的两个端点是 (i, 0) 和 (i, height[i]) 。</li><li>找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</li><li>返回容器可以储存的最大水量。</li><li>说明：不能倾斜容器。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token number">1,8</span>,6,2,5,4,8,3,7<span class="token punctuation">]</span>output <span class="token builtin class-name">:</span> <span class="token number">49</span>input  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token number">1,1</span><span class="token punctuation">]</span>output <span class="token builtin class-name">:</span> <span class="token number">1</span>input  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token number">4</span>, <span class="token number">4</span>, <span class="token number">2</span>, <span class="token number">11</span>, <span class="token number">0</span>, <span class="token number">11</span>, <span class="token number">5</span>, <span class="token number">11</span>, <span class="token number">13</span>, <span class="token number">8</span><span class="token punctuation">]</span>output <span class="token builtin class-name">:</span> <span class="token number">55</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li><p>双指针+贪心</p></li><li><p>双指针指向高度数组的首尾两端</p></li><li><p>容器的面积取决于<code>左右两指针之间的横向距离差</code> 和 <code>左右两指针指向的数字中的较小值</code></p></li><li><p>如果向内移动指向的数字较大的那个指针，那么前者<code>左右两指针指向的数字中的较小值</code>不会增加（会不变或者变小），后者<code>左右两指针之间的横向距离差</code>会减小，则两者乘积会减小</p></li><li><p>因此，移动数字较大的那个指针是不合理的</p></li><li><p>若想提高容量，能做的就是向内移动高度较小的指针（期望获得更高的高度），并比较移动后的容量是否大于当前最大容量</p></li></ul><ul><li>时间复杂度:O(n)</li><li>空间复杂度:O(1)</li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxArea</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> height<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> height<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxArea <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> area <span class="token operator">=</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            maxArea <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>area<span class="token punctuation">,</span> maxArea<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>height<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">>=</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                right<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> maxArea<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定一个长度为 n 的整数数组 height 。&lt;/li&gt;
&lt;li&gt;有 n 条垂线，第 i 条线的两个端点是 (i, 0) 和 (i, height[i]) 。&lt;/li&gt;
&lt;li&gt;找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。&lt;/li&gt;
&lt;li&gt;返回容器可以储存的最大水量。&lt;/li&gt;
&lt;li&gt;说明：不能倾斜容器。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1,8&lt;/span&gt;,6,2,5,4,8,3,7&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;49&lt;/span&gt;

input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1,1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;

input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;55&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.whtli.cn/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.whtli.cn/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.whtli.cn/tags/LeetCode/"/>
    
    <category term="数组" scheme="https://hexo.whtli.cn/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="双指针" scheme="https://hexo.whtli.cn/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
    <category term="贪心" scheme="https://hexo.whtli.cn/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode腾讯精选练习50题-062.不同路径</title>
    <link href="https://hexo.whtli.cn/archives/13f1b654.html"/>
    <id>https://hexo.whtli.cn/archives/13f1b654.html</id>
    <published>2022-09-23T13:00:00.000Z</published>
    <updated>2022-10-14T01:21:51.590Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。</li><li>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。</li><li>问总共有多少条不同的路径？</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> m <span class="token operator">=</span> <span class="token number">3</span>, n <span class="token operator">=</span> <span class="token number">2</span>output <span class="token builtin class-name">:</span> <span class="token number">3</span>note   <span class="token builtin class-name">:</span> 从左上角开始，总共有 <span class="token number">3</span> 条路径可以到达右下角。         <span class="token number">1</span>. 向右 -<span class="token operator">></span> 向下 -<span class="token operator">></span> 向下         <span class="token number">2</span>. 向下 -<span class="token operator">></span> 向下 -<span class="token operator">></span> 向右         <span class="token number">3</span>. 向下 -<span class="token operator">></span> 向右 -<span class="token operator">></span> 向下input  <span class="token builtin class-name">:</span> m <span class="token operator">=</span> <span class="token number">7</span>, n <span class="token operator">=</span> <span class="token number">3</span>output <span class="token builtin class-name">:</span> <span class="token number">28</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h5 id="思路1-动态规划"><a href="#思路1-动态规划" class="headerlink" title="思路1 动态规划"></a>思路1 动态规划</h5><ul><li><p>这是一个标准的动态规划问题，可以完成状态转移</p></li><li><p>转移方程：dp[i][j] = dp[i-1][j] + dp[i][j-1]</p></li><li><p>因为只能向右或向下移动，所以：</p><ul><li>对于第一行和第一列的所有格子，都有且仅有一条路径可以直达其位置</li><li>对于非第一行或非第一列的格子，<code>到达其位置的路径数</code> = <code>到达其上方格子的路径数</code>+<code>到达其左方格子的路径数</code></li></ul></li><li><p>绘制网格图后，可以通过举例测试确定上述规律</p></li><li><p>时间复杂度:O(m x n)</p></li><li><p>空间复杂度:O(m x n)</p><h5 id="思路2-组合数学"><a href="#思路2-组合数学" class="headerlink" title="思路2 组合数学"></a>思路2 组合数学</h5><p>从左上角到右下角的过程中，需要移动 m+n-2 次，其中有 m-1 次向下移动，n-1 次向右移动。<br>因此路径的总数，就等于从 m+n-2 次移动中选择 m-1 次向下移动的方案数，即组合数：</p></li></ul><p>C = (m + n - 2)! / (m - 1)! * (n - 1)!<br>因此直接计算出这个组合数即可。<br>化简可得：C = (m + n - 2) * (m + n - 3) * ··· * n / (m - 1)!</p><ul><li>时间复杂度:O(m)</li><li>空间复杂度:O(1)</li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">uniquePaths</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pathNum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">/*        for (int j = 0; j &lt; n; j++) &#123;            pathNum[0][j] = 1;        &#125;        for (int i = 1; i &lt; m; i++) &#123;            pathNum[i][0] = 1;        &#125;        for (int i = 1; i &lt; m; i++) &#123;            for (int j = 1; j &lt; n; j++) &#123;                pathNum[i][j] = pathNum[i - 1][j] + pathNum[i][j - 1];            &#125;        &#125;        */</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    pathNum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    pathNum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> pathNum<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> pathNum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/* 打印动态规划得到的二维数组        for (int i = 0; i &lt; m; i++) &#123;            for (int j = 0; j &lt; n; j++) &#123;                System.out.print(pathNum[i][j] + "\t");            &#125;            System.out.println();        &#125;        */</span>        <span class="token keyword">return</span> pathNum<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路2代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">uniquePaths</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> n<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">,</span> y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// x和y同时前进 m - 2 次，刚好满足化简后的公式</span>            ans <span class="token operator">=</span> ans <span class="token operator">*</span> x <span class="token operator">/</span> y<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。&lt;/li&gt;
&lt;li&gt;机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。&lt;/li&gt;
&lt;li&gt;问总共有多少条不同的路径？&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; m &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;, n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
note   &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; 从左上角开始，总共有 &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; 条路径可以到达右下角。
         &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;. 向右 -&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 向下 -&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 向下
         &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;. 向下 -&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 向下 -&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 向右
         &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;. 向下 -&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 向右 -&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 向下

input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; m &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;, n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;28&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.whtli.cn/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.whtli.cn/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.whtli.cn/tags/LeetCode/"/>
    
    <category term="数学" scheme="https://hexo.whtli.cn/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="动态规划" scheme="https://hexo.whtli.cn/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Git报错Kex_exchange_identification</title>
    <link href="https://hexo.whtli.cn/archives/a232f9d0.html"/>
    <id>https://hexo.whtli.cn/archives/a232f9d0.html</id>
    <published>2022-09-21T02:00:00.000Z</published>
    <updated>2022-10-25T03:53:44.340Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><ul><li><p>本地项目push到github失败</p><blockquote><p>Push failed<br>Kex_exchange_identification: Connection closed by remote hostConnection closed by 20.205.243.166 port 22<br>Could not read from remote repository.<br>Please make sure you have the correct access rightsand the repository exists.</p></blockquote></li><li><p>同样地，从github中clone、pull、fetch也报上述错误</p></li></ul><span id="more"></span><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ul><li><p>一般情况下是以上错误都是因为挂着VPN导致端口冲突</p></li><li><p>目前遇到两类情况，解决办法如下。</p></li></ul><h4 id="1-网络本身无vpn，使用ShadowsocksR等工具科学上网"><a href="#1-网络本身无vpn，使用ShadowsocksR等工具科学上网" class="headerlink" title="1 网络本身无vpn，使用ShadowsocksR等工具科学上网"></a>1 网络本身无vpn，使用ShadowsocksR等工具科学上网</h4><ul><li>退出ShadowsocksR即可</li><li>缺点：访问github会变慢，毕竟把vpn关掉了。如果开vpn本身就是为了更快速的访问github，那这样的操作就很费劲，每次和远程仓库交互都要关掉vpn，搞完再打开，推荐2.1。</li></ul><h4 id="2-网络本身挂载vpn，如openwrt上安装了ShadowsocksR"><a href="#2-网络本身挂载vpn，如openwrt上安装了ShadowsocksR" class="headerlink" title="2 网络本身挂载vpn，如openwrt上安装了ShadowsocksR"></a>2 网络本身挂载vpn，如openwrt上安装了ShadowsocksR</h4><ul><li>解决办法有两种（推荐第一种）</li></ul><h5 id="2-1-修改项目目录中隐藏文件夹-git-内的-config-文件"><a href="#2-1-修改项目目录中隐藏文件夹-git-内的-config-文件" class="headerlink" title="2.1 修改项目目录中隐藏文件夹 .git 内的 config 文件"></a>2.1 修改项目目录中隐藏文件夹 .git 内的 config 文件</h5><ul><li><p>将 Project/.git/config 文件中ssh格式的url，修改为github仓库中https格式的url。如：</p><blockquote><p>url = <a href="https://github.com/username/SpringBootWebTest.git">https://github.com/username/SpringBootWebTest.git</a></p></blockquote><p><img src="https://s2.loli.net/2022/09/21/Ud15VIifqF3Es26.png" alt="image-20220921101237310"></p></li><li><p>因为开着vpn，代理端口走22；同时git的ssh一般也使用22端口，这样造成冲突；而git的https一般使用443端口，不会产生冲突。</p></li><li><p>一般企业防火墙会打开80和443这两个http/https协议的端口，因此在架设了企业防火墙的时候使用https可以很好地绕开安全限制使用git；但是对于ssh来说，企业防火墙很可能没打开22端口。</p></li><li><p>如果按以上操作修改之后报错<code>Invocation failed Server returned invalid Response.</code>，则到IDEA等软件的配置界面，选中 <code>Use credential helper</code> 即可，<a href="https://blog.csdn.net/wzy901213/article/details/84334163">参考</a>。路径如下：</p><blockquote><p>File -&gt; Settings -&gt; Version Control -&gt; Git-&gt; Use credential helper </p></blockquote><p><img src="https://s2.loli.net/2022/09/21/cZASLvJ1InCyUGO.png" alt="image-20220921102253464"></p></li></ul><h5 id="2-2-修改openwrt的ShadowsocksR的访问控制配置"><a href="#2-2-修改openwrt的ShadowsocksR的访问控制配置" class="headerlink" title="2.2  修改openwrt的ShadowsocksR的访问控制配置"></a>2.2  修改openwrt的ShadowsocksR的访问控制配置</h5><ul><li>在访问控制的<code>不走代理名单</code>中加入 <code>github.com</code> ，保存并应用，这样访问github的操作就与 <strong>1</strong> 中一样了，缺点也一样</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>还有<a href="https://stackoverflow.com/questions/10127818/ssh-exchange-identification-connection-closed-by-remote-host-under-git-bash">其他的不同情况下的解决方案</a>，可以根据实际情况寻找对应的解决办法</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;问题：&quot;&gt;&lt;a href=&quot;#问题：&quot; class=&quot;headerlink&quot; title=&quot;问题：&quot;&gt;&lt;/a&gt;问题：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;本地项目push到github失败&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Push failed&lt;br&gt;Kex_exchange_identification: Connection closed by remote hostConnection closed by 20.205.243.166 port 22&lt;br&gt;Could not read from remote repository.&lt;br&gt;Please make sure you have the correct access rightsand the repository exists.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;同样地，从github中clone、pull、fetch也报上述错误&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="其他" scheme="https://hexo.whtli.cn/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="其他" scheme="https://hexo.whtli.cn/tags/%E5%85%B6%E4%BB%96/"/>
    
    <category term="Git" scheme="https://hexo.whtli.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode腾讯精选练习50题-054.螺旋矩阵</title>
    <link href="https://hexo.whtli.cn/archives/533bfe2b.html"/>
    <id>https://hexo.whtli.cn/archives/533bfe2b.html</id>
    <published>2022-07-13T06:00:00.000Z</published>
    <updated>2022-08-29T02:49:09.768Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定一个 m 行 n 列的矩阵 matrix ，请按照 顺时针螺旋顺序 ，返回矩阵中的所有元素。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> matrix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1,2</span>,3<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">4,5</span>,6<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">7,8</span>,9<span class="token punctuation">]</span><span class="token punctuation">]</span>output <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token number">1,2</span>,3,6,9,8,7,4,5<span class="token punctuation">]</span>input  <span class="token builtin class-name">:</span> matrix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1,2</span>,3,4<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">5,6</span>,7,8<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">9,10</span>,11,12<span class="token punctuation">]</span><span class="token punctuation">]</span>output <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token number">1,2</span>,3,4,8,12,11,10,9,5,6,7<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="解题思路-按层模拟"><a href="#解题思路-按层模拟" class="headerlink" title="解题思路 按层模拟"></a>解题思路 按层模拟</h3><ul><li>按照题目要求的转圈遍历顺序，使用上下左右四个界限坐标来标记每圈的位置，模拟整个向内环绕的元素获取过程。</li><li>时间复杂度:O(m×n)</li><li>空间复杂度:O(1)</li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">spiralOrder</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> width <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> width <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> bottom <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right <span class="token operator">&amp;&amp;</span> top <span class="token operator">&lt;=</span> bottom<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> top <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> bottom<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> top <span class="token operator">&lt;</span> bottom<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> p <span class="token operator">=</span> right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> p <span class="token operator">>=</span> left<span class="token punctuation">;</span> p<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>bottom<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> q <span class="token operator">=</span> bottom <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> q <span class="token operator">></span> top<span class="token punctuation">;</span> q<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            left<span class="token operator">++</span><span class="token punctuation">;</span>            right<span class="token operator">--</span><span class="token punctuation">;</span>            top<span class="token operator">++</span><span class="token punctuation">;</span>            bottom<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定一个 m 行 n 列的矩阵 matrix ，请按照 顺时针螺旋顺序 ，返回矩阵中的所有元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; matrix &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1,2&lt;/span&gt;,3&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4,5&lt;/span&gt;,6&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;7,8&lt;/span&gt;,9&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1,2&lt;/span&gt;,3,6,9,8,7,4,5&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; matrix &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1,2&lt;/span&gt;,3,4&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5,6&lt;/span&gt;,7,8&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;9,10&lt;/span&gt;,11,12&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1,2&lt;/span&gt;,3,4,8,12,11,10,9,5,6,7&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.whtli.cn/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.whtli.cn/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.whtli.cn/tags/LeetCode/"/>
    
    <category term="数组" scheme="https://hexo.whtli.cn/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="矩阵" scheme="https://hexo.whtli.cn/tags/%E7%9F%A9%E9%98%B5/"/>
    
    <category term="模拟" scheme="https://hexo.whtli.cn/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode腾讯精选练习50题-059.螺旋矩阵II</title>
    <link href="https://hexo.whtli.cn/archives/4a5d2c97.html"/>
    <id>https://hexo.whtli.cn/archives/4a5d2c97.html</id>
    <published>2022-07-13T04:00:00.000Z</published>
    <updated>2022-08-29T02:49:09.769Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定一个正整数 n ，生成一个包含 1 到 n2 所有元素，且元素按顺时针顺序螺旋排列的 n x n 正方形矩阵 matrix 。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> n <span class="token operator">=</span> <span class="token number">3</span>output <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1,2</span>,3<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">8,9</span>,4<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">7,6</span>,5<span class="token punctuation">]</span><span class="token punctuation">]</span>input  <span class="token builtin class-name">:</span> n <span class="token operator">=</span> <span class="token number">1</span>output <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="解题思路-按层模拟"><a href="#解题思路-按层模拟" class="headerlink" title="解题思路 按层模拟"></a>解题思路 按层模拟</h3><ul><li>按照题目要求的转圈填充顺序，使用上下左右四个界限坐标来标记每圈的位置，模拟整个向内环绕的填充过程。</li><li>时间复杂度:O(n^2)</li><li>空间复杂度:O(1)</li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">generateMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> bottom <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right <span class="token operator">&amp;&amp;</span> top <span class="token operator">&lt;=</span> bottom<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                matrix<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> top <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> bottom<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> p <span class="token operator">=</span> right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> p <span class="token operator">>=</span> left<span class="token punctuation">;</span> p<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                matrix<span class="token punctuation">[</span>bottom<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> q <span class="token operator">=</span> bottom <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> q <span class="token operator">></span> top<span class="token punctuation">;</span> q<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                matrix<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            left<span class="token operator">++</span><span class="token punctuation">;</span>            right<span class="token operator">--</span><span class="token punctuation">;</span>            top<span class="token operator">++</span><span class="token punctuation">;</span>            bottom<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> matrix<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定一个正整数 n ，生成一个包含 1 到 n2 所有元素，且元素按顺时针顺序螺旋排列的 n x n 正方形矩阵 matrix 。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1,2&lt;/span&gt;,3&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;8,9&lt;/span&gt;,4&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;7,6&lt;/span&gt;,5&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.whtli.cn/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.whtli.cn/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.whtli.cn/tags/LeetCode/"/>
    
    <category term="数组" scheme="https://hexo.whtli.cn/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="矩阵" scheme="https://hexo.whtli.cn/tags/%E7%9F%A9%E9%98%B5/"/>
    
    <category term="模拟" scheme="https://hexo.whtli.cn/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode腾讯精选练习50题-142.环形链表 II</title>
    <link href="https://hexo.whtli.cn/archives/bae2b272.html"/>
    <id>https://hexo.whtli.cn/archives/bae2b272.html</id>
    <published>2022-06-07T08:00:00.000Z</published>
    <updated>2022-08-29T02:49:09.777Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定一个链表的头节点  head ，返回链表开始入环的第一个节点。 </li><li>如果链表无环，则返回 null。</li><li>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。</li><li>为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。</li><li>如果 pos 是 -1，则在该链表中没有环。</li><li>注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。</li><li>不允许修改 链表。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> <span class="token function">head</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3,2</span>,0,-4<span class="token punctuation">]</span>, pos <span class="token operator">=</span> <span class="token number">1</span>output <span class="token builtin class-name">:</span> <span class="token function">tail</span> connects to node index <span class="token number">1</span>note   <span class="token builtin class-name">:</span> 返回索引为 <span class="token number">1</span> 的链表节点，链表中有一个环，其尾部连接到第二个节点。input  <span class="token builtin class-name">:</span> <span class="token function">head</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1,2</span><span class="token punctuation">]</span>, pos <span class="token operator">=</span> <span class="token number">0</span>output <span class="token builtin class-name">:</span> <span class="token function">tail</span> connects to node index <span class="token number">0</span>note   <span class="token builtin class-name">:</span> 返回索引为 <span class="token number">0</span> 的链表节点，链表中有一个环，其尾部连接到第二个节点。input  <span class="token builtin class-name">:</span> <span class="token function">head</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>, pos <span class="token operator">=</span> -1output <span class="token builtin class-name">:</span> no cyclenote   <span class="token builtin class-name">:</span> 返回 null，链表中没有环。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h5 id="思路1-快慢指针"><a href="#思路1-快慢指针" class="headerlink" title="思路1 快慢指针"></a>思路1 快慢指针</h5><ul><li>设快指针是fast，慢指针是slow，两者起点相同</li><li>快指针以2倍速前进，慢指针以逐步前进；可知fast前进的路程s1是slow前进的路程s2的两倍，即 s1 = 2 * s2</li><li>设从起点到入环节点的距离（节点个数）是a，入环节点顺序到fast和slow相遇节点的距离为b，相遇节点再顺序到入环节点的距离为c，则有<ul><li>环长（环内节点总数）为：s3 = b + c</li><li>fast走过的路程：s1 = a + n(b + c) + b</li><li>slow走过的路程：s2 = a + b</li><li>以上则有：s1 = 2 * s2 =&gt; a + n(b + c) + b = 2(a + b)<ul><li>移项可得：a = c + (n - 1)(b + c)，即，a = c + (n - 1)s3 （⭐）</li><li>由⭐可知，从链表起点出发到入环节点的距离a，等于从相遇节点出发向入环节点移动 n - 1 圈再走一个从相遇节点到入环节点的距离</li><li>即，两个指针，一个从起始节点，另一个从相遇节点，同时出发，他们最终会经过相等数量的节点，在入环节点处相遇，其中第一个节点一直在环外走，第二个节点一直在环内走</li></ul></li></ul></li><li>时间复杂度:O(N)</li><li>空间复杂度:O(1)</li></ul><h5 id="思路2-哈希表"><a href="#思路2-哈希表" class="headerlink" title="思路2 哈希表"></a>思路2 哈希表</h5><ul><li>遍历链表，把遍历过的节点存入哈希表中</li><li>当第一次出现被遍历到的节点已经存在于哈希表中的情况时，这个节点就是环形的入口节点</li><li>时间复杂度:O(N)</li><li>空间复杂度:O(N)</li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">detectCycle</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">ListNode</span> slow <span class="token operator">=</span> head<span class="token punctuation">,</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">==</span> slow<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">ListNode</span> p <span class="token operator">=</span> head<span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> slow<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                    slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> p<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路2代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">detectCycle</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ListNode</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>slow <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>slow<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> slow<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>slow<span class="token punctuation">)</span><span class="token punctuation">;</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定一个链表的头节点  head ，返回链表开始入环的第一个节点。 &lt;/li&gt;
&lt;li&gt;如果链表无环，则返回 null。&lt;/li&gt;
&lt;li&gt;如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。&lt;/li&gt;
&lt;li&gt;为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。&lt;/li&gt;
&lt;li&gt;如果 pos 是 -1，则在该链表中没有环。&lt;/li&gt;
&lt;li&gt;注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。&lt;/li&gt;
&lt;li&gt;不允许修改 链表。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3,2&lt;/span&gt;,0,-4&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;, pos &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;tail&lt;/span&gt; connects to node index &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
note   &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; 返回索引为 &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; 的链表节点，链表中有一个环，其尾部连接到第二个节点。

input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1,2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;, pos &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;tail&lt;/span&gt; connects to node index &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
note   &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; 返回索引为 &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; 的链表节点，链表中有一个环，其尾部连接到第二个节点。

input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;, pos &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; -1
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; no cycle
note   &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; 返回 null，链表中没有环。&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.whtli.cn/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.whtli.cn/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.whtli.cn/tags/LeetCode/"/>
    
    <category term="双指针" scheme="https://hexo.whtli.cn/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
    <category term="哈希表" scheme="https://hexo.whtli.cn/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
    <category term="链表" scheme="https://hexo.whtli.cn/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode腾讯精选练习50题-061.旋转链表</title>
    <link href="https://hexo.whtli.cn/archives/27b234bf.html"/>
    <id>https://hexo.whtli.cn/archives/27b234bf.html</id>
    <published>2022-06-05T13:00:00.000Z</published>
    <updated>2022-08-29T02:49:09.771Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定一个链表的头节点 head ，旋转链表，将链表每个节点向右移动 k 个位置。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> <span class="token function">head</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1,2</span>,3,4,5<span class="token punctuation">]</span>, k <span class="token operator">=</span> <span class="token number">2</span>output <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token number">4,5</span>,1,2,3<span class="token punctuation">]</span>input  <span class="token builtin class-name">:</span> <span class="token function">head</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0,1</span>,2<span class="token punctuation">]</span>, k <span class="token operator">=</span> <span class="token number">4</span>output <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token number">2,0</span>,1<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>如果满足以下条件，可以直接返回原链表<ul><li>链表为空，即 head = null</li><li>链表只有一个节点，即 head.next = null</li><li>旋转次数 k 为0</li><li>旋转次数 k 是链表长度的倍数，即旋转后的链表还是原样</li></ul></li></ul><h5 id="思路1-双指针-快慢指针"><a href="#思路1-双指针-快慢指针" class="headerlink" title="思路1 双指针/快慢指针"></a>思路1 双指针/快慢指针</h5><ul><li><p>第一次遍历获取链表长度</p></li><li><p>用快慢指针拉开遍历差距，并借助<code>慢指针</code>获取<code>结果链表的起始节</code>点，即</p><ul><li>先考虑简单情况 <code>k 严格小于 链表长度 n</code>，那么就是要找到原链表的倒数第k个节点作为结果链表的起始节点</li><li>再拓展到<code>k &gt; n</code>的情况，此时只需要刷新k，即令 <code>k = k % n</code>，转变成第一种简单情况即可</li></ul></li><li><p>使链表闭合，并断开新的起始节点与其之前节点的链接</p></li><li><p>时间复杂度:O(n)</p></li><li><p>空间复杂度:O(1)</p><h5 id="思路2-双指针的反向思考"><a href="#思路2-双指针的反向思考" class="headerlink" title="思路2 双指针的反向思考"></a>思路2 双指针的反向思考</h5></li><li><p>其实就是双指针思路的变形</p></li><li><p>第一次遍历获取链表长</p></li><li><p>反向思考旋转后结果链表起始节点的位置，使用<code>单个指针遍历</code>来获取<code>结果链表的起始节点</code>，即</p><ul><li>先考虑简单情况 <code>k 严格小于 链表长度 n</code>，那么就是要找到<code>原链表的倒数第k个节点</code>即<code>原始链表的正数第 n - k 个节点的后继结点</code>作为结果链表的起始节点</li><li>再拓展到<code>k &gt; n</code> 的情况，此时只需要将 <code>k % n</code>，转变成第一种简单情况即可，即刷新k，令 <code>k = n - k % n</code></li></ul></li><li><p>使链表闭合，并断开新的起始节点与其之前节点的链接</p></li><li><p>时间复杂度:O(n)</p></li><li><p>空间复杂度:O(1)</p></li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">rotateRight</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">ListNode</span> iter <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> tail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iter <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>iter<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                tail <span class="token operator">=</span> iter<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            len<span class="token operator">++</span><span class="token punctuation">;</span>            iter <span class="token operator">=</span> iter<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 如果旋转次数恰好是链表长度的倍数，说明旋转后也是原样，所以不需要移动</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">%</span> len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 初始令计数器延后一位（即-1），以获取结果链表的起始位置的前一个位置</span>        <span class="token comment">// 此处若初始令计数器为0，则获得的是结果链表的其实位置，无法将它与之前的节点断开</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// 先令快指针向前遍历k%len步</span>        <span class="token class-name">ListNode</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cnt <span class="token operator">!=</span> k <span class="token operator">%</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cnt<span class="token operator">++</span><span class="token punctuation">;</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 再同步开启慢指针的遍历</span>        <span class="token comment">// 当快指针为空时，说明慢指针已经到达了目标结果链表的起始节点的前一个位置</span>        <span class="token class-name">ListNode</span> second <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            second <span class="token operator">=</span> second<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 使原始链表闭合为环</span>        tail<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment">// 获得新起点</span>        <span class="token class-name">ListNode</span> res <span class="token operator">=</span> second<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token comment">// 从新起点之前断开</span>        second<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">// 返回结果</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路2代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">rotateRight2</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">ListNode</span> first <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>first<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            len<span class="token operator">++</span><span class="token punctuation">;</span>            first <span class="token operator">=</span> first<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">%</span> len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 第二次遍历</span>        <span class="token class-name">ListNode</span> second <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// 移动k个位置，其实就是以 第len - k % len个节点的后继节点 作为新链表的头节点，并使其与其之前的节点断开链接</span>        <span class="token comment">// 所以此处可以做减法来替代快慢指针的同步遍历，只需要遍历一次即可。</span>        <span class="token keyword">int</span> step <span class="token operator">=</span> len <span class="token operator">-</span> k <span class="token operator">%</span> len<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cnt <span class="token operator">&lt;</span> step<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cnt<span class="token operator">++</span><span class="token punctuation">;</span>            second <span class="token operator">=</span> second<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 使之闭合为环</span>        first<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> res <span class="token operator">=</span> second<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        second<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定一个链表的头节点 head ，旋转链表，将链表每个节点向右移动 k 个位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1,2&lt;/span&gt;,3,4,5&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;, k &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4,5&lt;/span&gt;,1,2,3&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0,1&lt;/span&gt;,2&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;, k &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2,0&lt;/span&gt;,1&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.whtli.cn/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.whtli.cn/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.whtli.cn/tags/LeetCode/"/>
    
    <category term="双指针" scheme="https://hexo.whtli.cn/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
    <category term="链表" scheme="https://hexo.whtli.cn/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode腾讯精选练习50题-016.最接近的三数之和</title>
    <link href="https://hexo.whtli.cn/archives/61876662.html"/>
    <id>https://hexo.whtli.cn/archives/61876662.html</id>
    <published>2022-06-04T04:00:00.000Z</published>
    <updated>2022-10-27T02:10:05.979Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定一个长度为 n 的整数数组 nums 和 一个目标值 target。</li><li>请从 nums 中选出三个整数，使它们的和与 target 最接近。</li><li>返回这三个数的和。</li><li>假定每组输入只存在恰好一个解。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span>-1,2,1,-4<span class="token punctuation">]</span>, target <span class="token operator">=</span> <span class="token number">1</span>output <span class="token builtin class-name">:</span> <span class="token number">2</span>note   <span class="token builtin class-name">:</span> 与 target 最接近的和是 <span class="token number">2</span> <span class="token punctuation">(</span>-1 + <span class="token number">2</span> + <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> 。input  <span class="token builtin class-name">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0,0</span>,0<span class="token punctuation">]</span>, target <span class="token operator">=</span> <span class="token number">1</span>output <span class="token builtin class-name">:</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="解题思路-排序-双指针"><a href="#解题思路-排序-双指针" class="headerlink" title="解题思路 排序+双指针"></a>解题思路 排序+双指针</h3><ul><li><p>先把数组排序</p></li><li><p>外层循环从头开始遍历，逐个固定遍历到的元素作为三数的第1个数，然后内层循环是在其后方区间使用首尾双指针</p></li><li><p>根据三数之和确定移动首部指针还是尾部指针</p></li><li><p>对比每组三数之和<code>tmpSum</code>与<code>target</code>的<code>差值绝对值</code>，不断保留差值绝对值最小的三数之和</p></li><li><p>最终保留下来的结果就是与<code>target</code>差值绝对值最小的三数之和，即最接近<code>target</code>的三数之和</p></li><li><p>时间复杂度:O(n^2)</p></li><li><p>空间复杂度:O(1)</p><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 推荐参考下方的写法2</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">threeSumClosest</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> bigger <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token keyword">int</span> smaller <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> k <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> tmpSum <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tmpSum <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>tmpSum <span class="token operator">&lt;=</span> bigger<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        bigger <span class="token operator">=</span> tmpSum<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    k<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tmpSum <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>tmpSum <span class="token operator">>=</span> smaller<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        smaller <span class="token operator">=</span> tmpSum<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    j<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> target<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bigger <span class="token operator">==</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> smaller<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>smaller <span class="token operator">==</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> bigger<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> target <span class="token operator">-</span> smaller<span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> bigger <span class="token operator">-</span> target<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">></span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> bigger<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> smaller<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 以下为与思路描述更加一一对应的写法</span>    <span class="token comment">// 相较于写法1更易读</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">threeSumClosest2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> best <span class="token operator">=</span> <span class="token number">10001</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> k <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> tmpSum <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> cur <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>tmpSum <span class="token operator">-</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> old <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>best <span class="token operator">-</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">&lt;</span> old<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    best <span class="token operator">=</span> tmpSum<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tmpSum <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    k<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tmpSum <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    j<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> target<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> best<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定一个长度为 n 的整数数组 nums 和 一个目标值 target。&lt;/li&gt;
&lt;li&gt;请从 nums 中选出三个整数，使它们的和与 target 最接近。&lt;/li&gt;
&lt;li&gt;返回这三个数的和。&lt;/li&gt;
&lt;li&gt;假定每组输入只存在恰好一个解。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; nums &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;-1,2,1,-4&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;, target &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
note   &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; 与 target 最接近的和是 &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;-1 + &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 。

input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; nums &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0,0&lt;/span&gt;,0&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;, target &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.whtli.cn/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.whtli.cn/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.whtli.cn/tags/LeetCode/"/>
    
    <category term="数组" scheme="https://hexo.whtli.cn/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="排序" scheme="https://hexo.whtli.cn/tags/%E6%8E%92%E5%BA%8F/"/>
    
    <category term="双指针" scheme="https://hexo.whtli.cn/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode腾讯精选练习50题-015.三数之和</title>
    <link href="https://hexo.whtli.cn/archives/2a30eb9c.html"/>
    <id>https://hexo.whtli.cn/archives/2a30eb9c.html</id>
    <published>2022-05-30T13:00:00.000Z</published>
    <updated>2022-08-29T02:49:09.763Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？</li><li>请找出所有和为 0 且不重复的三元组。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span>-1,0,1,2,-1,-4<span class="token punctuation">]</span>output <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>-1,-1,2<span class="token punctuation">]</span>,<span class="token punctuation">[</span>-1,0,1<span class="token punctuation">]</span><span class="token punctuation">]</span>input  <span class="token builtin class-name">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>output <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>input  <span class="token builtin class-name">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>output <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h5 id="思路1-双指针"><a href="#思路1-双指针" class="headerlink" title="思路1 双指针"></a>思路1 双指针</h5><ul><li><p>排序</p></li><li><p>外层循环从头开始遍历，逐个固定遍历到的元素作为三数的第1个数，然后内层循环是在其后方区间使用首尾双指针</p></li><li><p>根据三数之和确定移动首部指针还是尾部指针</p></li><li><p>移动指针的过程中遇到相同则跳过，以避免重复解</p></li><li><p>遇到符合要求的三数之和则将其记录到结果列表中</p></li><li><p>执行用时：17 ms, 在所有 Java 提交中击败了99.71%的用户</p></li><li><p>内存消耗：45 MB, 在所有 Java 提交中击败了92.86%的用户</p></li><li><p>时间复杂度:O(n^2)</p></li><li><p>空间复杂度:O(n))</p><h5 id="思路2-Map"><a href="#思路2-Map" class="headerlink" title="思路2 Map"></a>思路2 Map</h5></li><li><p>排序</p></li><li><p>外层循环从中部（1 ~ n-1）开始遍历，逐个固定遍历到的元素作为三数的第2个数，内层循环是在其前后两个小的区间内依次顺序遍历，以确定其他两个元素</p></li><li><p>内层循环中，对当前第2个数的前方区间的遍历，记录所有第1个数和已经固定的第2个数的求和组合</p></li><li><p>然后继续在内层循环中，遍历当前第2个数的后方区间，找到map中是否存在某个键，等于当前元素的相反数</p><ul><li>若存在，则说明当前找到的三个数符合要求，将它们记录到结果列表中</li><li>额外再使用一个map来记录前两个数组成的map和第三个数</li></ul></li><li><p>两层循环的遍历过程中遇到相同则跳过，以避免重复解</p></li><li><p>执行用时: 266 ms</p></li><li><p>内存消耗: 46.9 MB</p></li><li><p>时间复杂度:O(n^2)</p></li><li><p>空间复杂度:O(n))</p></li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">threeSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 排序</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> lists <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">||</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> nums<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> lists<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 转换成 a + b = -c</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            k <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> target <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&lt;</span> <span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    j<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">></span> <span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    k<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    lists<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    k<span class="token operator">--</span><span class="token punctuation">;</span>                    j<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        j<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        k<span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> lists<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路2代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">threeSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 排序</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> lists <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">||</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> nums<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> lists<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 转换成 a + b = -c</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> ansHash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// i是中间元素，j是从0到i找元素，k是从i到n找元素</span>            <span class="token comment">// 即借助中间元素来缩小两侧的查找范围</span>            map<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> x <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">></span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token operator">-</span>nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">int</span> b <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> c <span class="token operator">=</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ansHash<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>ansHash<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        ansHash<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        ansHash<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        lists<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> lists<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路3代码（思路2代码的改写，修改了map的使用方式）</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution3</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">threeSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 排序</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> lists <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">||</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> nums<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> lists<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 转换成 a + b = -c</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> ansHash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// i是中间元素，j是从0到i找元素，k是从i到n找元素</span>            <span class="token comment">// 即借助中间元素来缩小两侧的查找范围</span>            map<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> x <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">></span> j <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token operator">-</span>nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> b <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> c <span class="token operator">=</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    t<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ansHash<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        ansHash<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        lists<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> lists<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？&lt;/li&gt;
&lt;li&gt;请找出所有和为 0 且不重复的三元组。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; nums &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;-1,0,1,2,-1,-4&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;-1,-1,2&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;-1,0,1&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; nums &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; nums &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.whtli.cn/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.whtli.cn/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.whtli.cn/tags/LeetCode/"/>
    
    <category term="数组" scheme="https://hexo.whtli.cn/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="排序" scheme="https://hexo.whtli.cn/tags/%E6%8E%92%E5%BA%8F/"/>
    
    <category term="双指针" scheme="https://hexo.whtli.cn/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode腾讯精选练习50题-008.字符串转换整数 (atoi)</title>
    <link href="https://hexo.whtli.cn/archives/5da50d68.html"/>
    <id>https://hexo.whtli.cn/archives/5da50d68.html</id>
    <published>2022-05-29T13:00:00.000Z</published>
    <updated>2022-08-29T02:49:09.762Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 atoi 函数）。</li><li>函数 myAtoi(string s) 的算法如下：</li><li>读入字符串并丢弃无用的前导空格</li><li>检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。</li><li>读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。</li><li>将前面步骤读入的这些数字转换为整数（即，”123” -&gt; 123， “0032” -&gt; 32）。如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。</li><li>如果整数数超过 32 位有符号整数范围 [−2^31,  2^(31 − 1)] ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 −2^31 的整数应该被固定为 −2^31 ，大于 2^(31 − 1) 的整数应该被固定为 2^(31 − 1) 。</li><li>返回整数作为最终结果。</li><li>注意：</li><li>本题中的空白字符只包括空格字符 ‘ ‘ 。</li><li>除前导空格或数字后的其余字符串外，请勿忽略 任何其他字符。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> s <span class="token operator">=</span> <span class="token string">"   -42"</span>output <span class="token builtin class-name">:</span> -42input  <span class="token builtin class-name">:</span> s <span class="token operator">=</span> <span class="token string">"20000000000000000000"</span>output <span class="token builtin class-name">:</span> <span class="token number">2147483647</span>input  <span class="token builtin class-name">:</span> s <span class="token operator">=</span> <span class="token string">"  0000000000012345678"</span>output <span class="token builtin class-name">:</span> <span class="token number">12345678</span>input  <span class="token builtin class-name">:</span> s <span class="token operator">=</span> <span class="token string">"    0000000000000   "</span>output <span class="token builtin class-name">:</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>题目要求中已经明确了所有思路。</li><li>代码中不使用Long来提前处理数据，只使用int以符合题意，因此就要求在遍历过程中对越界问题提前做出判断</li><li>无非是直接在遍历过程中直接更新数值或者借助字符串截取一下再处理数值<ul><li>直接更新数值<ul><li>时间复杂度:O(n)</li><li>空间复杂度:O(1)</li></ul></li><li>借助字符串截取后再处理<ul><li>时间复杂度:O(n)</li><li>空间复杂度:O(n)</li></ul></li></ul></li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">myAtoi</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 读入字符串并丢弃无用的前导空格</span>        s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。</span>        <span class="token comment">// 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。</span>        <span class="token comment">// 字符串的其余部分将被忽略。</span>        <span class="token comment">// 将前面步骤读入的这些数字转换为整数（即，"123" -> 123， "0032" -> 32）。</span>        <span class="token comment">// 如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 如果整数数超过 32 位有符号整数范围 [−2^31,  2^(31 − 1)] ，需要截断这个整数，使其保持在这个范围内。</span>            <span class="token comment">// 具体来说，小于 −231 的整数应该被固定为 −2^31 ，大于 2^(31 − 1) 的整数应该被固定为 2^(31 − 1) 。</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token string">'7'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span>res <span class="token operator">&lt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span>res <span class="token operator">==</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token string">'8'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            res <span class="token operator">=</span> res <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> flag <span class="token operator">?</span> <span class="token operator">-</span>res <span class="token operator">:</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">myAtoi2</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 读入字符串并丢弃无用的前导空格</span>        s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。</span>        <span class="token comment">// 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。</span>        <span class="token comment">// 字符串的其余部分将被忽略。</span>        <span class="token comment">// 将前面步骤读入的这些数字转换为整数（即，"123" -> 123， "0032" -> 32）。</span>        <span class="token comment">// 如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 如果整数数超过 32 位有符号整数范围 [−2^31,  2^(31 − 1)] ，需要截断这个整数，使其保持在这个范围内。</span>        <span class="token comment">// 具体来说，小于 −231 的整数应该被固定为 −2^31 ，大于 2^(31 − 1) 的整数应该被固定为 2^(31 − 1) 。</span>        <span class="token class-name">String</span> tmp <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            tmp <span class="token operator">=</span> tmp<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag <span class="token operator">&amp;&amp;</span> tmp<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token string">"2147483647"</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">&amp;&amp;</span> tmp<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token string">"2147483648"</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> flag <span class="token operator">?</span> <span class="token operator">-</span>res <span class="token operator">:</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 atoi 函数）。&lt;/li&gt;
&lt;li&gt;函数 myAtoi(string s) 的算法如下：&lt;/li&gt;
&lt;li&gt;读入字符串并丢弃无用的前导空格&lt;/li&gt;
&lt;li&gt;检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。&lt;/li&gt;
&lt;li&gt;读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。&lt;/li&gt;
&lt;li&gt;将前面步骤读入的这些数字转换为整数（即，”123” -&amp;gt; 123， “0032” -&amp;gt; 32）。如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。&lt;/li&gt;
&lt;li&gt;如果整数数超过 32 位有符号整数范围 [−2^31,  2^(31 − 1)] ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 −2^31 的整数应该被固定为 −2^31 ，大于 2^(31 − 1) 的整数应该被固定为 2^(31 − 1) 。&lt;/li&gt;
&lt;li&gt;返回整数作为最终结果。&lt;/li&gt;
&lt;li&gt;注意：&lt;/li&gt;
&lt;li&gt;本题中的空白字符只包括空格字符 ‘ ‘ 。&lt;/li&gt;
&lt;li&gt;除前导空格或数字后的其余字符串外，请勿忽略 任何其他字符。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; s &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;   -42&quot;&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; -42
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; s &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;20000000000000000000&quot;&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2147483647&lt;/span&gt;
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; s &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;  0000000000012345678&quot;&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;12345678&lt;/span&gt;
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; s &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;    0000000000000   &quot;&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.whtli.cn/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.whtli.cn/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.whtli.cn/tags/LeetCode/"/>
    
    <category term="字符串" scheme="https://hexo.whtli.cn/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode腾讯精选练习50题-007.整数反转</title>
    <link href="https://hexo.whtli.cn/archives/af67ebb7.html"/>
    <id>https://hexo.whtli.cn/archives/af67ebb7.html</id>
    <published>2022-05-28T09:00:00.000Z</published>
    <updated>2022-10-27T02:10:24.734Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。</li><li>如果反转后整数超过 32 位的有符号整数的范围 [−2^31,  2^(31 − 1)] ，就返回 0。</li><li>假设环境不允许存储 64 位整数（有符号或无符号）。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> x <span class="token operator">=</span> -123output <span class="token builtin class-name">:</span> -321input  <span class="token builtin class-name">:</span> x <span class="token operator">=</span> <span class="token number">120</span>output <span class="token builtin class-name">:</span> <span class="token number">21</span>input  <span class="token builtin class-name">:</span> x <span class="token operator">=</span> -2147483648output <span class="token builtin class-name">:</span> <span class="token number">0</span>input  <span class="token builtin class-name">:</span> x <span class="token operator">=</span> <span class="token number">1534236469</span>output <span class="token builtin class-name">:</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li><p>因为输入数据保证在 32 位的有符号整数的范围内，所以不需要考虑像 8463847412 这种超出本身就超出范围且反转后依然超出范围的情况 </p><h5 id="思路1-字符串"><a href="#思路1-字符串" class="headerlink" title="思路1 字符串"></a>思路1 字符串</h5></li><li><p>借助字符串<code>str</code>接收 x ，然后反转字符串<code>str</code>，并判断输入 x 的正负性、<code>str</code>与 “2147483648”、”-2147483648”的大小关系</p><ul><li>若x为正(+)，且字符串<code>str</code>大于字符串”2147483647”，超出上界，返回0</li><li>若x为负(-)，且字符串<code>str</code>大于字符串”2147483648”，超出下界，返回0</li><li>正常则取其Integer值并添上符号返回</li></ul></li><li><p>时间复杂度:O(n)</p></li><li><p>空间复杂度:O(n)，使用了额外的等“长”字符串</p><h5 id="思路2-让步比大小"><a href="#思路2-让步比大小" class="headerlink" title="思路2 让步比大小"></a>思路2 让步比大小</h5></li><li><p>“让步”的意思是在数值超出32位整形范围之前就把它判断出来，即用最大值/10和最小值/10的范围作为临时上下界来防止完全反转后的越界</p></li><li><p>先统一转换成正数</p><ul><li>用整形变量<code>res</code>（初始值为0）不断扩大十倍并加上当前<code>x%10</code>得到的数，然后将<code>x/10</code>去掉它的末尾数值</li><li>在执行以上操作之前，先判断一下当前的<code>res</code>是否大于32位整型变量的最大值Integer.MAX_VALUE/10，若是则说明完全的反转后肯定会越界，不必继续操作，直接按要求返回0即可</li><li>当x减小到0的时候，判断原始的符号位，并给结果<code>res</code>添加上，然后返回</li></ul></li><li><p>不转换正数，统一判断</p><ul><li>用整形变量<code>res</code>（初始值为0）不断扩大十倍并加上当前<code>x%10</code>得到的数，然后将<code>x/10</code>去掉它的末尾数值</li><li>在执行以上操作之前，先判断一下以下两条，若满足则说明完全的反转后肯定会越界，不必继续操作，直接按要求返回0即可<ul><li>当前的<code>res</code>是否大于32位整型变量的最大值Integer.MAX_VALUE / 10</li><li>当前的<code>res</code>是否小于32位整型变量的最小值Integer.MIN_VALUE / 10</li></ul></li><li>当x等于0的时候，返回<code>res</code>即可（不需要在判断符号位了）</li></ul></li><li><p>时间复杂度:O(log(n))</p></li><li><p>空间复杂度:O(1)，只使用了有限个整型变量</p></li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 因为输入保证为32位整数，所以不需要考虑更小的数值，判断到Integer的最小值即可</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            x <span class="token operator">=</span> <span class="token operator">-</span>x<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">StringBuilder</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token string">"2147483647"</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token string">"2147483648"</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> flag <span class="token operator">?</span> <span class="token operator">-</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路2代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">==</span> <span class="token operator">-</span>x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            x <span class="token operator">=</span> <span class="token operator">-</span>x<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            y <span class="token operator">=</span> y <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>            x <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> flag <span class="token operator">?</span> <span class="token operator">-</span>y <span class="token operator">:</span> y<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 以下为简化代码</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">reverse2</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">></span> max <span class="token operator">||</span> y <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            y <span class="token operator">=</span> y <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>            x <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> y<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。&lt;/li&gt;
&lt;li&gt;如果反转后整数超过 32 位的有符号整数的范围 [−2^31,  2^(31 − 1)] ，就返回 0。&lt;/li&gt;
&lt;li&gt;假设环境不允许存储 64 位整数（有符号或无符号）。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; -123
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; -321
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;120&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt;
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; -2147483648
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1534236469&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.whtli.cn/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.whtli.cn/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.whtli.cn/tags/LeetCode/"/>
    
    <category term="字符串" scheme="https://hexo.whtli.cn/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="数学" scheme="https://hexo.whtli.cn/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode腾讯精选练习50题-002.两数相加</title>
    <link href="https://hexo.whtli.cn/archives/236dbfeb.html"/>
    <id>https://hexo.whtli.cn/archives/236dbfeb.html</id>
    <published>2022-05-21T12:00:00.000Z</published>
    <updated>2022-08-29T02:49:09.757Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>给定两个 非空 的链表，表示两个非负的整数。</li><li>它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。</li><li>请将两个数相加，并以相同形式返回一个表示和的链表。</li><li>可以假设除了数字 0 之外，这两个数都不会以 0 开头。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> l1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2,4</span>,3<span class="token punctuation">]</span>, l2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5,6</span>,4<span class="token punctuation">]</span>output <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token number">7,0</span>,8<span class="token punctuation">]</span>note   <span class="token builtin class-name">:</span> <span class="token number">342</span> + <span class="token number">465</span> <span class="token operator">=</span> <span class="token number">807</span>.input  <span class="token builtin class-name">:</span> l1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">9,9</span>,9,9,9,9,9<span class="token punctuation">]</span>, l2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">9,9</span>,9,9<span class="token punctuation">]</span>output <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token number">8,9</span>,9,9,0,0,0,1<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h5 id="思路1-模拟"><a href="#思路1-模拟" class="headerlink" title="思路1 模拟"></a>思路1 模拟</h5><ul><li><p>同时遍历两个链表，并维护<code>进位标志</code>，都不为空时，对应位置的2个节点值和<code>进位标志</code>求和得到<code>sum</code>，在结果链表末尾创建新节点并将其赋值为<code>sum</code></p></li><li><p>其中一个为空时，继续维护<code>进位标志</code>，只遍历不空的那个链表，对应位置的1个节点值和<code>进位标志</code>求和得到<code>sum1</code>，在结果链表末尾创建新节点并将其赋值为<code>sum1</code></p></li><li><p>时间复杂度：O(max(m, n))</p></li><li><p>空间复杂度：O(1)</p><h5 id="思路2-递归"><a href="#思路2-递归" class="headerlink" title="思路2 递归"></a>思路2 递归</h5></li><li><p>从思路1变形得到的</p></li><li><p>递归退出边界：两个节点都为null，且进位标志为0，意味着不需要创建新节点；若两个节点为null，但进位标志不为0，说明结果链表末尾需要进位补1，即创建新节点且其值为1</p></li><li><p>递归操作：创建新节点<code>node</code>，其值为两个参数节点的值与进位标志的值之和</p></li><li><p>递归过程：因为原始数值本身以逆序存放在链表中，所以可以做正向的思考，直接把node.next的求解扔进递归即可</p></li><li><p>时间复杂度：O(max(m, n))</p></li><li><p>空间复杂度：O(max(m, n))</p><h5 id="思路3-BigInteger"><a href="#思路3-BigInteger" class="headerlink" title="思路3 BigInteger"></a>思路3 BigInteger</h5></li><li><p>分别遍历两个链表，用StringBuilder记录其逆序数值</p></li><li><p>分别反转两个链表，得到原始数值</p></li><li><p>使用BigInteger分别接收两个原始数组并求和，得到的结果重新赋给StringBuilder</p></li><li><p>逆序遍历结果字符串，将其字符转换成int类型并以此存放到结果链表种</p></li><li><p>时间复杂度：O(max(m, n))</p></li><li><p>空间复杂度：O(1)</p><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3></li></ul><p><strong>思路1代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> l1<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> l2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> jin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> r <span class="token operator">=</span> list<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> l2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sum <span class="token operator">=</span> l1<span class="token punctuation">.</span>val <span class="token operator">+</span> l2<span class="token punctuation">.</span>val <span class="token operator">+</span> jin<span class="token punctuation">;</span>            jin <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>            sum <span class="token operator">%=</span> <span class="token number">10</span><span class="token punctuation">;</span>            r<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>            r <span class="token operator">=</span> r<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l1 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sum <span class="token operator">=</span> l1<span class="token punctuation">.</span>val <span class="token operator">+</span> jin<span class="token punctuation">;</span>            jin <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>            sum <span class="token operator">%=</span> <span class="token number">10</span><span class="token punctuation">;</span>            r<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>            r <span class="token operator">=</span> r<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sum <span class="token operator">=</span> l2<span class="token punctuation">.</span>val <span class="token operator">+</span> jin<span class="token punctuation">;</span>            jin <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>            sum <span class="token operator">%=</span> <span class="token number">10</span><span class="token punctuation">;</span>            r<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>            r <span class="token operator">=</span> r<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>jin <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            r<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> list<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 以下代码是上方代码的简化版</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">addTwoNumbersSim</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> l1<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> l2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> jin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> r <span class="token operator">=</span> list<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> l2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> n1 <span class="token operator">=</span> l1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> l1<span class="token punctuation">.</span>val<span class="token punctuation">;</span>            <span class="token keyword">int</span> n2 <span class="token operator">=</span> l2 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">;</span>            <span class="token keyword">int</span> sum <span class="token operator">=</span> n1 <span class="token operator">+</span> n2 <span class="token operator">+</span> jin<span class="token punctuation">;</span>            jin <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>            sum <span class="token operator">%=</span> <span class="token number">10</span><span class="token punctuation">;</span>            r<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>            r <span class="token operator">=</span> r<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>l1 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>l2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>jin <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            r<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> list<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路2代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> l1<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> l2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">loop</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> l1<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> l2<span class="token punctuation">,</span> <span class="token keyword">int</span> jin<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> l2 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> jin <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> n1 <span class="token operator">=</span> l1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> l1<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token keyword">int</span> n2 <span class="token operator">=</span> l2 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> n1 <span class="token operator">+</span> n2 <span class="token operator">+</span> jin<span class="token punctuation">;</span>        jin <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        sum <span class="token operator">%=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">loop</span><span class="token punctuation">(</span>l1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> l1<span class="token punctuation">.</span>next <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> l2 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> l2<span class="token punctuation">.</span>next <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> jin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路3代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution3</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> l1<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> l2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StringBuilder</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l1 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            m<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            n<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">BigInteger</span> mm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BigInteger</span> nn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BigInteger</span> res <span class="token operator">=</span> mm<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> r <span class="token operator">=</span> list<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            r<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            r <span class="token operator">=</span> r<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> list<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;给定两个 非空 的链表，表示两个非负的整数。&lt;/li&gt;
&lt;li&gt;它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。&lt;/li&gt;
&lt;li&gt;请将两个数相加，并以相同形式返回一个表示和的链表。&lt;/li&gt;
&lt;li&gt;可以假设除了数字 0 之外，这两个数都不会以 0 开头。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; l1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2,4&lt;/span&gt;,3&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;, l2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5,6&lt;/span&gt;,4&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;7,0&lt;/span&gt;,8&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
note   &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;342&lt;/span&gt; + &lt;span class=&quot;token number&quot;&gt;465&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;807&lt;/span&gt;.

input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; l1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;9,9&lt;/span&gt;,9,9,9,9,9&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;, l2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;9,9&lt;/span&gt;,9,9&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;8,9&lt;/span&gt;,9,9,0,0,0,1&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.whtli.cn/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.whtli.cn/tags/Java/"/>
    
    <category term="递归" scheme="https://hexo.whtli.cn/tags/%E9%80%92%E5%BD%92/"/>
    
    <category term="LeetCode" scheme="https://hexo.whtli.cn/tags/LeetCode/"/>
    
    <category term="数学" scheme="https://hexo.whtli.cn/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="链表" scheme="https://hexo.whtli.cn/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="模拟" scheme="https://hexo.whtli.cn/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode腾讯精选练习50题-070.爬楼梯</title>
    <link href="https://hexo.whtli.cn/archives/a47c4019.html"/>
    <id>https://hexo.whtli.cn/archives/a47c4019.html</id>
    <published>2022-05-20T13:00:00.000Z</published>
    <updated>2022-08-29T02:49:09.772Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> n <span class="token operator">=</span> <span class="token number">2</span>output <span class="token builtin class-name">:</span> <span class="token number">2</span>note   <span class="token builtin class-name">:</span> 有两种方法可以爬到楼顶。         <span class="token number">1</span>. <span class="token number">1</span> 阶 + <span class="token number">1</span> 阶         <span class="token number">2</span>. <span class="token number">2</span> 阶input  <span class="token builtin class-name">:</span> n <span class="token operator">=</span> <span class="token number">3</span>output <span class="token builtin class-name">:</span> <span class="token number">3</span>note   <span class="token builtin class-name">:</span> 有三种方法可以爬到楼顶。         <span class="token number">1</span>. <span class="token number">1</span> 阶 + <span class="token number">1</span> 阶 + <span class="token number">1</span> 阶         <span class="token number">2</span>. <span class="token number">1</span> 阶 + <span class="token number">2</span> 阶         <span class="token number">3</span>. <span class="token number">2</span> 阶 + <span class="token number">1</span> 阶<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li><p>列举几个简单的台阶数，做总结，可以发现爬楼梯的方案数满足斐波那契数列。如：</p><ul><li>2阶，2种</li><li>3阶，3种</li><li>4阶，5种</li><li>5阶，8种<h5 id="思路1-动态规划"><a href="#思路1-动态规划" class="headerlink" title="思路1 动态规划"></a>思路1 动态规划</h5></li></ul></li><li><p>状态转移方程：dp[i] = dp[i-1] + dp[i-2]</p></li><li><p>初始，dp[1] = 1, dp[2] = 2</p></li><li><p>从3到n遍历结束后，返回dp[n]即是爬楼梯的方案数</p></li><li><p>可以维护dp数组，保留每一个n可以产生的方案数</p></li><li><p>也可以不维护数组，动过迭代变量保留最后的方案数</p></li></ul><h5 id="思路2-递归（会超出时间限制）"><a href="#思路2-递归（会超出时间限制）" class="headerlink" title="思路2 递归（会超出时间限制）"></a>思路2 递归（会超出时间限制）</h5><ul><li>从动态规划变形得到的</li><li>递归出口：<ul><li>n = 1，返回1</li><li>n = 2，返回2</li></ul></li><li>递归过程：<ul><li>返回 loop(n - 1) + loop(n - 2)</li></ul></li></ul><h5 id="思路3-数学通项公式"><a href="#思路3-数学通项公式" class="headerlink" title="思路3 数学通项公式"></a>思路3 数学通项公式</h5><ul><li>斐波那契数列的通项公式为：<ul><li><em>f(n)</em>=[((1+√5) / 2)^n^−((1−√5)/2)^n^] / √5</li></ul></li></ul><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3><p><strong>思路1代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 不借助dp数组的写法</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">climbStairs2</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> q <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> p <span class="token operator">+</span> q<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            p <span class="token operator">=</span> q<span class="token punctuation">;</span>            q <span class="token operator">=</span> r<span class="token punctuation">;</span>            r <span class="token operator">=</span> p <span class="token operator">+</span> q<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> r<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路2代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 超出时间限制O(2^n)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路3代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution3</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">double</span> sqrt5 <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> fibn <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> sqrt5<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> sqrt5<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>fibn <span class="token operator">/</span> sqrt5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
note   &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; 有两种方法可以爬到楼顶。
         &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;. &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; 阶 + &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; 阶
         &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;. &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; 阶

input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
note   &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; 有三种方法可以爬到楼顶。
         &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;. &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; 阶 + &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; 阶 + &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; 阶
         &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;. &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; 阶 + &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; 阶
         &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;. &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; 阶 + &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; 阶&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.whtli.cn/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.whtli.cn/tags/Java/"/>
    
    <category term="LeetCode" scheme="https://hexo.whtli.cn/tags/LeetCode/"/>
    
    <category term="数学" scheme="https://hexo.whtli.cn/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="动态规划" scheme="https://hexo.whtli.cn/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode腾讯精选练习50题-155.最小栈</title>
    <link href="https://hexo.whtli.cn/archives/582739c1.html"/>
    <id>https://hexo.whtli.cn/archives/582739c1.html</id>
    <published>2022-05-16T13:00:00.000Z</published>
    <updated>2022-08-29T02:49:09.778Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>设计一个支持 push ，pop ，top 操作，并能在常数时间内检索到最小元素的栈。</li><li>实现 MinStack 类:</li><li></li><li>MinStack() 初始化堆栈对象。</li><li>void push(int val) 将元素val推入堆栈。</li><li>void pop() 删除堆栈顶部的元素。</li><li>int top() 获取堆栈顶部的元素。</li><li>int getMin() 获取堆栈中的最小元素。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exampleinput  <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"MinStack"</span>,<span class="token string">"push"</span>,<span class="token string">"push"</span>,<span class="token string">"push"</span>,<span class="token string">"getMin"</span>,<span class="token string">"pop"</span>,<span class="token string">"top"</span>,<span class="token string">"getMin"</span><span class="token punctuation">]</span>         <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span>,<span class="token punctuation">[</span>-2<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>,<span class="token punctuation">[</span>-3<span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>output <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>null,null,null,null,-3,null,0,-2<span class="token punctuation">]</span>note   <span class="token builtin class-name">:</span> MinStack minStack <span class="token operator">=</span> new MinStack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         minStack.push<span class="token punctuation">(</span>-2<span class="token punctuation">)</span><span class="token punctuation">;</span>         minStack.push<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         minStack.push<span class="token punctuation">(</span>-3<span class="token punctuation">)</span><span class="token punctuation">;</span>         minStack.getMin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   --<span class="token operator">></span> 返回 -3.         minStack.pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         minStack.top<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      --<span class="token operator">></span> 返回 <span class="token number">0</span>.         minStack.getMin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   --<span class="token operator">></span> 返回 -2.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h5 id="思路1-维护最小值栈"><a href="#思路1-维护最小值栈" class="headerlink" title="思路1 维护最小值栈"></a>思路1 维护最小值栈</h5><ul><li><p>每次在元素栈中入栈一个元素之后，就在最小值栈中入栈一个当前元素栈中的最小值</p></li><li><p>这样就可以在pop过程中同步变更两个栈，来保证每次geiMin获取的最小值都是当前元素栈中的最小值</p></li><li><p><code>MinStack()</code></p><ul><li>初始化元素栈 elem<Integer> 、最小值栈 min<Integer></li><li>最小值栈 min 中先入栈Integer.MAX_VALUE;</li></ul></li><li><p><code>void push(int val)</code></p><ul><li>elem 中入栈 val</li><li>比较 min 的栈顶元素和 val 的大小，把小的入 min 栈</li></ul></li><li><p><code>void pop()</code> </p><ul><li>elem 栈顶元素出栈</li><li>min 栈顶元素也出栈</li></ul></li><li><p><code>int top()</code></p><ul><li>获取 elem 栈顶元素值，但是栈顶元素不出栈</li></ul></li><li><p><code>int getMin()</code></p><ul><li>获取 min 栈顶元素值，但是栈顶元素不出栈</li></ul></li><li><p>时间复杂度O(1)</p></li><li><p>空间复杂度O(n)</p><h5 id="思路2-以数组为元素"><a href="#思路2-以数组为元素" class="headerlink" title="思路2 以数组为元素"></a>思路2 以数组为元素</h5></li><li><p>只维护一个元素栈，但栈中元素是数组，每次入栈的数组的形式为 [当前需要入栈的元素val, 当前栈顶数组元素中的第2个元素 和 当前元素val 中的较小者]</p></li><li><p>这样就相当于把思路1中的两个栈，维护到了一个栈中，把元素值和当前最小值放到数组中整体入栈</p></li><li><p><code>MinStack()</code></p><ul><li>初始化元素栈 elem&lt;int[]&gt;</li></ul></li><li><p><code>void push(int val)</code></p><ul><li>通过比较val 和 栈顶数组的第 2 个元素 得到 较小值 min</li><li>elem 中入栈 [val, min]，即 elem.push([val, Math.min(val, elem.peek()[1])])</li></ul></li><li><p><code>void pop()</code> </p><ul><li>elem 栈顶数组出栈</li></ul></li><li><p><code>int top()</code></p><ul><li>获取 elem 栈顶数组中的第 1 个元素，但是栈顶数组不出栈</li></ul></li><li><p><code>int getMin()</code></p><ul><li>获取 elem 栈顶数组中的第 2 个元素，但是栈顶元素不出栈</li></ul></li><li><p>时间复杂度O(1)</p></li><li><p>空间复杂度O(n)</p><h3 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h3></li></ul><p><strong>思路1代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MinStack1</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack<span class="token punctuation">;</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> min<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MinStack1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        min <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        min<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> min<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            min<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            min<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>min<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        min<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> min<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路2代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MinStack2</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> stack<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MinStack2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>val<span class="token punctuation">,</span> val<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>val<span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路2代码 非数组版</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MinStack3</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MinStack3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> min <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> min<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> top <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> top<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;设计一个支持 push ，pop ，top 操作，并能在常数时间内检索到最小元素的栈。&lt;/li&gt;
&lt;li&gt;实现 MinStack 类:&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;MinStack() 初始化堆栈对象。&lt;/li&gt;
&lt;li&gt;void push(int val) 将元素val推入堆栈。&lt;/li&gt;
&lt;li&gt;void pop() 删除堆栈顶部的元素。&lt;/li&gt;
&lt;li&gt;int top() 获取堆栈顶部的元素。&lt;/li&gt;
&lt;li&gt;int getMin() 获取堆栈中的最小元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;example
input  &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;MinStack&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;push&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;push&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;push&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;getMin&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;pop&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;top&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;getMin&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
         &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;-2&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;-3&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
output &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;null,null,null,null,-3,null,0,-2&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
note   &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; MinStack minStack &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; new MinStack&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
         minStack.push&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;-2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
         minStack.push&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
         minStack.push&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;-3&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
         minStack.getMin&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;   --&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 返回 -3.
         minStack.pop&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
         minStack.top&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;      --&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 返回 &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;.
         minStack.getMin&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;   --&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 返回 -2.&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://hexo.whtli.cn/categories/LeetCode/"/>
    
    
    <category term="Java" scheme="https://hexo.whtli.cn/tags/Java/"/>
    
    <category term="栈" scheme="https://hexo.whtli.cn/tags/%E6%A0%88/"/>
    
    <category term="LeetCode" scheme="https://hexo.whtli.cn/tags/LeetCode/"/>
    
  </entry>
  
</feed>
